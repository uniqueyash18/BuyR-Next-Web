This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.cursor/
  rules/
    project-rules.mdc
public/
  images/
    about.svg
    account.svg
    avatar-placeholder.svg
    banking.svg
    contact-us.svg
    contact.svg
    down-arrow.svg
    email.svg
    facebook.svg
    form.svg
    help.svg
    home.svg
    instagram.svg
    link.svg
    live-chat.svg
    logout.svg
    message.svg
    order-details.svg
    order.svg
    profile.svg
    purple-back.svg
    refer-your-friend.svg
    refer.svg
    terms.svg
    tutorial.svg
    twitter.svg
    user-placeholder.svg
    wallet.svg
    whatsapp.svg
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    (commons)/
      tutorial/
        page.tsx
    (main)/
      about/
        page.tsx
      account/
        page.tsx
      brands/
        page.tsx
      categories/
        page.tsx
      contact/
        page.tsx
      deal/
        [id]/
          page.tsx
      deals/
        [type]/
          [id]/
            page.tsx
      earnings/
        page.tsx
      home/
        page.tsx
      orderForm/
        [orderId]/
          page.tsx
        page.tsx
      orders/
        [orderId]/
          page.tsx
        page.tsx
      profile/
        page.tsx
      refer/
        page.tsx
      refund-form/
        [orderId]/
          page.tsx
      search/
        page.tsx
      terms/
        page.tsx
      transactions/
        page.tsx
      layout.tsx
    auth/
      forgot-password/
        page.tsx
      login/
        page.tsx
      signup/
        page.tsx
    globals.css
    layout.tsx
    not-found.tsx
    page.tsx
    ProgressBarProvider.tsx
    providers.tsx
  components/
    auth/
      Login.tsx
      LoginForm.tsx
      Signup.tsx
      SignupForm.tsx
      styles.ts
    CustomForm/
      CustomDatePicker.tsx
      CustomForm.tsx
      CustomImageUpload.tsx
      CustomInput.tsx
      CustomSelect.tsx
      index.ts
      types.ts
    transactions/
      TransactionCard.tsx
    transitions/
      AnimatedGrid.tsx
      index.tsx
    BrandCard.tsx
    CustomScrollBanner.tsx
    CustomTextInput.tsx
    DealCard.tsx
    GradientButton.tsx
    Header.tsx
    NoDataFound.tsx
    PhoneNumberInput.tsx
    TextContainer.tsx
  constants/
    imagePath.ts
  hooks/
    useAuth.ts
    usePostData.ts
    useQuery.ts
  lib/
    axios.ts
    firebase.ts
  redux/
    actions/
      auth.ts
    slices/
      userSlice.ts
    store.ts
  services/
    api.ts
    apiService.ts
  styles/
    colors.ts
    responsiveSize.ts
  utils/
    helperFunctions.ts
    notificationService.ts
.gitignore
next.config.js
next.config.ts
package.json
postcss.config.mjs
README.md
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="src/app/(commons)/tutorial/page.tsx">
"use client";

import { motion } from "framer-motion";
import Image from "next/image";
import Link from "next/link";
import { useState } from "react";

export default function TutorialsPage() {
  const [selectedImage, setSelectedImage] = useState<{ src: string; alt: string } | null>(null);

  const platforms = [
    {
      name: "Amazon",
      logo: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRlO7c1ph0372RPy2_DwWn7a8PX_i7xxSUYPw&s",
      tutorials: [
        {
          type: "video",
          src: "/images/Amazon/amazon_rating_submit.mp4",
          caption: "How to Submit Ratings on Amazon"
        },
        {
          type: "image",
          src: "/images/Amazon/AmazonRatingScreenshotSample.webp",
          caption: "Rating Screenshot Example"
        },
        {
          type: "image",
          src: "/images/Amazon/AmazonOrderSS.webp",
          caption: "Order Process Guide"
        },
        {
          type: "image",
          src: "/images/Amazon/AmazonReviewSubmitSample.webp",
          caption: "Review Submit Process"
        },
        {
          type: "image",
          src: "/images/Amazon/AmazonRatingScreenshotSampleLaptop.webp",
          caption: "Rating Process on Laptop"
        },
        {
          type: "image",
          src: "/images/Amazon/AmazonExchangeDealSampleOrderSS.webp",
          caption: "Exchange Deal Process"
        },
        {
          type: "image",
          src: "/images/Amazon/AmazonDelivered.webp",
          caption: "Delivery Confirmation"
        }
      ]
    },
    {
      name: "Flipkart",
      logo: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRFAS1xR8ZdYCvsWvARhon_DyYInDgr2WpIPQ&s",
      tutorials: [
        {
          type: "video",
          src: "/images/Flipkart/flipkart_Review_Link.mp4",
          caption: "How to Submit Reviews on Flipkart"
        },
        {
          type: "image",
          src: "/images/Flipkart/FlipkartReviewScreenshotSample.webp",
          caption: "Review Screenshot Example"
        },
        {
          type: "image",
          src: "/images/Flipkart/FlipkartOrderSS.webp",
          caption: "Order Process Guide"
        },
        {
          type: "image",
          src: "/images/Flipkart/FlipkartRatingScreenshotSample.webp",
          caption: "Rating Process Guide"
        },
        {
          type: "image",
          src: "/images/Flipkart/FlipkartDeliveredWithReturnWindowClosedSample.webp",
          caption: "Delivery Confirmation"
        }
      ]
    },
    {
      name: "Nykaa",
      logo: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQDjTRAMkw1ub06xFYGTzvD2eyeywq1-XYuCQ&s",
      tutorials: [
        {
          type: "image",
          src: "/images/MyntraNykaa/NykaaReviewScreenshot.webp",
          caption: "How to Submit Reviews on Nykaa"
        },
        {
          type: "image",
          src: "/images/MyntraNykaa/NykaaOrderScreenshot.webp",
          caption: "Order Process Guide"
        },
        {
          type: "image",
          src: "/images/MyntraNykaa/NykaaDeliveredScreenshot.webp",
          caption: "Delivery Confirmation Example"
        }
      ]
    }
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-gradient-to-r from-blue-500 via-indigo-500 to-purple-600 text-white py-16 px-4 text-center">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <h1 className="text-4xl font-bold mb-4">Platform Tutorials</h1>
          <p className="text-xl mb-8">Learn how to use BuyR with different e-commerce platforms</p>
          <Link
            href="/"
            className="inline-block bg-white text-blue-600 font-semibold py-3 px-6 rounded-lg transition-all duration-300 hover:shadow-lg hover:shadow-blue-500/30"
          >
            Back to Home
          </Link>
        </motion.div>
      </header>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 py-12">
        {platforms.map((platform, platformIndex) => (
          <motion.section
            key={platform.name}
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: platformIndex * 0.1 }}
            viewport={{ once: true }}
            className="bg-white rounded-2xl p-8 mb-12 shadow-lg hover:shadow-xl transition-all duration-300"
          >
            <div className="flex items-center border-b border-gray-200 pb-6 mb-8">
              <Image
                src={platform.logo}
                alt={`${platform.name} Logo`}
                width={60}
                height={60}
                className="rounded-lg mr-4"
              />
              <h2 className="text-3xl font-semibold text-gray-800">{platform.name} Tutorials</h2>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {platform.tutorials.map((tutorial, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 20 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5, delay: index * 0.1 }}
                  viewport={{ once: true }}
                  whileHover={{ y: -5 }}
                  className="bg-white rounded-xl overflow-hidden shadow-md hover:shadow-lg transition-all duration-300"
                >
                  <div className="relative aspect-video bg-gray-100">
                    {tutorial.type === "video" ? (
                      <video
                        controls
                        className="w-full h-full object-cover"
                      >
                        <source src={tutorial.src} type="video/mp4" />
                        Your browser does not support the video tag.
                      </video>
                    ) : (
                      <Image
                        src={tutorial.src}
                        alt={tutorial.caption}
                        fill
                        className="object-cover cursor-pointer"
                        onClick={() => setSelectedImage({ src: tutorial.src, alt: tutorial.caption })}
                      />
                    )}
                  </div>
                  <div className="p-4 text-center">
                    <p className="text-gray-700 font-medium">{tutorial.caption}</p>
                  </div>
                </motion.div>
              ))}
            </div>
          </motion.section>
        ))}
      </div>

      {/* Image Modal */}
      {selectedImage && (
        <div
          className="fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center p-4"
          onClick={() => setSelectedImage(null)}
        >
          <div className="relative max-w-4xl w-full">
            <button
              className="absolute -top-12 right-0 text-white text-4xl font-bold hover:text-gray-300"
              onClick={() => setSelectedImage(null)}
            >
              ×
            </button>
            <Image
              src={selectedImage.src}
              alt={selectedImage.alt}
              width={1200}
              height={800}
              className="w-full h-auto rounded-lg"
            />
            <p className="text-white text-center mt-4">{selectedImage.alt}</p>
          </div>
        </div>
      )}
    </div>
  );
}
</file>

<file path=".cursor/rules/project-rules.mdc">
---
description: 
globs: *.tsx
alwaysApply: false
---
Always start your output with "Hey buddy!!"
- Read my complete project structure [repomix-output.xml](mdc:.cursor/rules/repomix-output.xml)

Strictly follow all the rules; it's essential.

# Cursor AI Project Rules – Next.js 15 + Tailwind Setup

---

## Project Setup Rules

1. This project is built using **Next.js 15+ App Router**, and the root is inside the `src/app/` directory.
2. **Tailwind CSS** is already fully configured — do **NOT** reinstall or modify it.
3. Use **server components** by default. If a component includes interactivity (e.g., `useState`, `useEffect`), add `"use client"` at the top.
4. Pages must be created using folders inside `src/app/` — for example, the signup page lives at:
   ```
   src/app/signup/page.tsx
   ```
5. Each route folder inside `src/app/` must contain a `page.tsx` file to register the route.

---

## Tailwind Styling Rules

6. Use only **Tailwind CSS utility classes** — do not use inline styles, external CSS, or custom SCSS.
7. Match **font sizes, paddings, margins, spacing, colors, and line heights** exactly as shown in the Figma design.
8. Use **gray placeholders** for any image or icon if the real asset isn’t available.
9. Use responsive Tailwind units like `w-full`, `min-h-screen`, `p-4`, etc., and maintain relative sizing.
10. Always use layout utilities like `flex`, `grid`, `gap`, and responsive breakpoints (`sm:`, `md:`, `lg:`) for layout.

---

## Code Structure Rules

11. Reusable components must be placed in `src/components/`.
12. All static images and assets must be stored in `public/images/`.
13. Keep JSX markup clean — break large UI into smaller components if it improves readability.
14. Use semantic HTML tags wherever appropriate — buttons, headings, inputs, labels, sections.
15. Always use **named functional components** with the syntax:
   ```tsx
   export default function ComponentName() {}
   ```

---

## Smart Reasoning Rules

16. If the Figma layout is messy or lacks proper Auto Layout, rely on **visual spacing and grouping** to infer structure.
17. Organize components by logical hierarchy — e.g., `Header → Form → CTA → Footer`.
18. Prioritize **clean, readable code** and accurate UI structure over matching Figma’s raw layer naming.
19. Use common UI/UX conventions (like consistent spacing, proper alignment) where the design is unclear.

---

## Avoid These Practices

20. ❌ Do not use any external CSS files or `styled-components`.
21. ❌ Do not generate `tailwind.config.js` or `postcss.config.js` — they're already set up.
22. ❌ Avoid extra wrapper `<div>`s — keep the DOM structure as minimal and meaningful as possible.


## Tailwind Custom Color Rules

23. Use Tailwind's Default Color Palette First
   - Always prioritize using Tailwind's built-in color classes before defining custom colors.
   - Example: Use text-blue-500, bg-gray-200 before defining new colors.
24. Define Custom Colors Dynamically
   - If a color is not available in Tailwind's default palette, create it dynamically using Tailwind’s theme() function inside globals.css:
   ```css
      @layer utilities {
         .text-primary {
            color: theme('colors.primary');
         }
         .bg-primary {
            background-color: theme('colors.primary');
         }
      }
   ```
25. Apply Colors Through Tailwind or Utility Classes
   - Always apply colors using Tailwind classes or custom utility classes inside your components:
   ```tsx
      export default function ExampleComponent() {
         return (
            <div className="bg-primary text-secondary">
               {/* Component content */}
            </div>
         );
      }
   ```
26. Use Semantic Naming for Custom Colors
   - Name custom colors meaningfully (e.g., primary, accent) to improve readability.

## Avoid These Practices

27. ❌ Do Not Use Hardcoded Colors
   - Never use direct hex, RGB, or HSL values inside components.
   - Example: Avoid <div style={{ color: '#ff5733' }}>.
28. ❌ Do Not Modify Tailwind's Core Configuration
   - Do not create or alter tailwind.config.js or postcss.config.js.
   - Tailwind CSS v4 operates with zero configuration.
29. ❌ Do Not Introduce Unnecessary Custom Colors
   - Only define colors that are essential to the project.
   - Avoid excessive custom colors to keep styles manageable.


## Animation and Transition Rules

30. Use the following animation components from `@/components/transitions` for consistent page transitions:
   - `PageTransition`: Wrap page content for smooth page-to-page transitions.
   - `FadeInSection`: Use for individual content sections that should fade in.
   - `AnimatedGrid`: Use for lists and grid items that should appear with staggered timing.
   - `PageHeader`: Use for consistent, animated page headers.

31. Follow this animation structure for all feature pages:
   ```tsx
   import { FadeInSection, AnimatedGrid, PageHeader } from "@/components/transitions";
   
   export default function FeaturePage() {
     return (
       <div className="py-8">
         <PageHeader
           title="Page Title"
           description="Page description text"
         >
           {/* Optional header actions */}
         </PageHeader>
   
         <FadeInSection className="mb-10" delay={0.1}>
           {/* Main content section */}
         </FadeInSection>
   
         <FadeInSection delay={0.3}>
           {/* Secondary content with AnimatedGrid for lists */}
           <AnimatedGrid staggerDelay={0.08}>
             {items.map(item => (
               <div key={item.id}>
                 {/* Item content */}
               </div>
             ))}
           </AnimatedGrid>
         </FadeInSection>
       </div>
     );
   }
   ```

32. Animation timing guidelines:
   - Main page transitions: 0.3-0.5 seconds
   - Staggered children: 0.05-0.1 second delay between items
   - Section delays: 0.1-0.3 seconds between major sections
   - Keep animations subtle and professional - avoid excessive motion

33. Ensure all animations are accessibility-friendly by:
   - Using CSS `prefers-reduced-motion` media query support (built into components)
   - Keeping motion subtle with small displacements (20px or less)
   - Avoiding animations that flash or move aggressively
</file>

<file path="public/images/about.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M13 9H11V7H13M13 17H11V11H13M12 2A10 10 0 0 0 2 12A10 10 0 0 0 12 22A10 10 0 0 0 22 12A10 10 0 0 0 12 2Z" fill="#6B7280"/>
</svg>
</file>

<file path="public/images/account.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
</svg>
</file>

<file path="public/images/avatar-placeholder.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="100%" height="100%">
  <!-- Background circle with gradient -->
  <defs>
    <linearGradient id="avatarGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#4F46E5" />
      <stop offset="100%" stop-color="#7C3AED" />
    </linearGradient>
  </defs>
  
  <!-- Main circle with gradient fill -->
  <circle cx="12" cy="12" r="12" fill="url(#avatarGradient)" />
  
  <!-- User silhouette with white fill -->
  <path d="M12 13.5c2.5 0 4.5-2 4.5-4.5S14.5 4.5 12 4.5 7.5 6.5 7.5 9s2 4.5 4.5 4.5z" fill="white" />
  <path d="M18 19.5c0-3.3-2.7-6-6-6s-6 2.7-6 6" fill="white" />
  
  <!-- Decorative elements -->
  <circle cx="8" cy="8" r="1" fill="white" opacity="0.8" />
  <circle cx="16" cy="8" r="1" fill="white" opacity="0.8" />
</svg>
</file>

<file path="public/images/banking.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M11.5 1L2 6V8H21V6L11.5 1Z" fill="#6B7280"/>
  <path d="M4 10V17C4 17.55 4.45 18 5 18H6V10H4Z" fill="#6B7280"/>
  <path d="M8 18H9V10H8V18Z" fill="#6B7280"/>
  <path d="M11 18H12V10H11V18Z" fill="#6B7280"/>
  <path d="M14 18H15V10H14V18Z" fill="#6B7280"/>
  <path d="M17 18H18V10H17V18Z" fill="#6B7280"/>
  <path d="M19 18H20C20.55 18 21 17.55 21 17V10H19V18Z" fill="#6B7280"/>
  <path d="M2 22H21V24H2V22Z" fill="#6B7280"/>
</svg>
</file>

<file path="public/images/contact-us.svg">
<svg width="400" height="300" viewBox="0 0 400 300" fill="none" xmlns="http://www.w3.org/2000/svg">
  <!-- Background elements -->
  <circle cx="200" cy="150" r="120" fill="#F3F4F6" />
  <circle cx="200" cy="150" r="100" fill="#EEF2FF" />
  
  <!-- Decorative elements -->
  <circle cx="100" cy="100" r="20" fill="#C7D2FE" opacity="0.6" />
  <circle cx="300" cy="200" r="30" fill="#C7D2FE" opacity="0.6" />
  <circle cx="150" cy="250" r="15" fill="#C7D2FE" opacity="0.6" />
  
  <!-- Phone icon with modern design -->
  <rect x="120" y="80" width="160" height="140" rx="20" fill="#E5E7EB" />
  <rect x="130" y="90" width="140" height="120" rx="10" fill="#9CA3AF" />
  
  <!-- Contact icons with modern design -->
  <circle cx="180" cy="120" r="15" fill="#3B82F6" />
  <circle cx="220" cy="120" r="15" fill="#10B981" />
  <circle cx="200" cy="160" r="15" fill="#6366F1" />
  
  <!-- Email icon with modern design -->
  <path d="M250 100L200 130L150 100" stroke="#6B7280" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" />
  <rect x="150" y="95" width="100" height="70" rx="10" stroke="#6B7280" stroke-width="3" fill="none" />
  
  <!-- Message bubble with modern design -->
  <path d="M180 180C180 177.239 182.239 175 185 175H215C217.761 175 220 177.239 220 180V200C220 202.761 217.761 205 215 205H185C182.239 205 180 202.761 180 200V180Z" fill="#6366F1" />
  <path d="M200 205L190 215H210L200 205Z" fill="#6366F1" />
  
  <!-- Decorative dots -->
  <circle cx="185" cy="190" r="3" fill="white" />
  <circle cx="195" cy="190" r="3" fill="white" />
  <circle cx="205" cy="190" r="3" fill="white" />
</svg>
</file>

<file path="public/images/contact.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M20 4H4C2.9 4 2.01 4.9 2.01 6L2 18C2 19.1 2.9 20 4 20H20C21.1 20 22 19.1 22 18V6C22 4.9 21.1 4 20 4ZM20 8L12 13L4 8V6L12 11L20 6V8Z" fill="#6B7280"/>
</svg>
</file>

<file path="public/images/down-arrow.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M7.41 8.59L12 13.17L16.59 8.59L18 10L12 16L6 10L7.41 8.59Z" fill="#6B7280"/>
</svg>
</file>

<file path="public/images/email.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
  <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
</svg>
</file>

<file path="public/images/facebook.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
  <path d="M18.77 7.46H14.5v-1.9c0-.9.6-1.1 1-1.1h3V.5h-4.33C10.24.5 9.5 3.44 9.5 5.32v2.15h-3v4h3v12h5v-12h3.85l.42-4z"/>
</svg>
</file>

<file path="public/images/form.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
</svg>
</file>

<file path="public/images/help.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM13 19H11V17H13V19ZM15.07 11.25L14.17 12.17C13.45 12.9 13 13.5 13 15H11V14.5C11 13.4 11.45 12.4 12.17 11.67L13.41 10.41C13.78 10.05 14 9.55 14 9C14 7.9 13.1 7 12 7C10.9 7 10 7.9 10 9H8C8 6.79 9.79 5 12 5C14.21 5 16 6.79 16 9C16 9.88 15.64 10.68 15.07 11.25Z" fill="#6B7280"/>
</svg>
</file>

<file path="public/images/home.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
</svg>
</file>

<file path="public/images/instagram.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
  <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/>
</svg>
</file>

<file path="public/images/link.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
  <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
</svg>
</file>

<file path="public/images/live-chat.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M20 2H4C2.9 2 2.01 2.9 2.01 4L2 22L6 18H20C21.1 18 22 17.1 22 16V4C22 2.9 21.1 2 20 2ZM6 9H18V11H6V9ZM14 14H6V12H14V14ZM18 8H6V6H18V8Z" fill="#6B7280"/>
</svg>
</file>

<file path="public/images/logout.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
  <polyline points="16 17 21 12 16 7"></polyline>
  <line x1="21" y1="12" x2="9" y2="12"></line>
</svg>
</file>

<file path="public/images/message.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
  <path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"/>
</svg>
</file>

<file path="public/images/order-details.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M19 3H5C3.89 3 3 3.89 3 5V19C3 20.11 3.89 21 5 21H19C20.11 21 21 20.11 21 19V5C21 3.89 20.11 3 19 3ZM19 19H5V5H19V19Z" fill="#6B7280"/>
  <path d="M7 12H9V17H7V12Z" fill="#6B7280"/>
  <path d="M11 7H13V17H11V7Z" fill="#6B7280"/>
  <path d="M15 9H17V17H15V9Z" fill="#6B7280"/>
</svg>
</file>

<file path="public/images/order.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
</svg>
</file>

<file path="public/images/profile.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
  <circle cx="12" cy="7" r="4"></circle>
</svg>
</file>

<file path="public/images/purple-back.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320" preserveAspectRatio="none">
  <path fill="#8B5CF6" fill-opacity="1" d="M0,96L48,112C96,128,192,160,288,160C384,160,480,128,576,122.7C672,117,768,139,864,149.3C960,160,1056,160,1152,138.7C1248,117,1344,75,1392,53.3L1440,32L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z"></path>
</svg>
</file>

<file path="public/images/refer-your-friend.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 500 500">
  <circle cx="250" cy="250" r="240" fill="#F3E8FF" />
  <circle cx="250" cy="250" r="200" fill="#E9D5FF" />
  <circle cx="250" cy="250" r="160" fill="#DDD6FE" />
  <circle cx="250" cy="250" r="120" fill="#C4B5FD" />
  <circle cx="250" cy="250" r="80" fill="#A78BFA" />
  <circle cx="250" cy="250" r="40" fill="#8B5CF6" />
  <path d="M250 100 L350 200 L250 300 L150 200 Z" fill="#7C3AED" />
  <circle cx="250" cy="200" r="30" fill="#6D28D9" />
  <circle cx="250" cy="200" r="15" fill="#5B21B6" />
</svg>
</file>

<file path="public/images/refer.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
</svg>
</file>

<file path="public/images/terms.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M14 2H6A2 2 0 0 0 4 4V20A2 2 0 0 0 6 22H18A2 2 0 0 0 20 20V8L14 2M18 20H6V4H13V9H18V20M8 13V15H16V13H8M8 17V19H16V17H8" fill="#6B7280"/>
</svg>
</file>

<file path="public/images/tutorial.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M12 3L1 9L12 15L21 10.09V17H23V9M5 13.18V17.18L12 21L19 17.18V13.18L12 17L5 13.18Z" fill="#6B7280"/>
</svg>
</file>

<file path="public/images/twitter.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
  <path d="M23.44 4.83c-.8.37-1.5.38-2.22.02.93-.56.98-.96 1.32-2.02-.88.52-1.86.9-2.9 1.1-.82-.88-2-1.43-3.3-1.43-2.5 0-4.55 2.04-4.55 4.54 0 .36.03.7.1 1.04-3.77-.2-7.12-2-9.36-4.75-.4.67-.6 1.45-.6 2.3 0 1.56.8 2.95 2 3.77-.74-.03-1.44-.23-2.05-.57v.06c0 2.2 1.56 4.03 3.64 4.44-.67.2-1.37.2-2.06.08.58 1.8 2.26 3.12 4.25 3.16C5.78 18.1 3.37 18.74 1 18.46c2 1.3 4.4 2.04 6.97 2.04 8.35 0 12.92-6.92 12.92-12.93 0-.2 0-.4-.02-.6.9-.63 1.96-1.22 2.56-2.14z"/>
</svg>
</file>

<file path="public/images/user-placeholder.svg">
<svg width="128" height="128" viewBox="0 0 128 128" fill="none" xmlns="http://www.w3.org/2000/svg">
  <!-- Background circle -->
  <circle cx="64" cy="64" r="64" fill="#F3F4F6" />
  
  <!-- User icon -->
  <circle cx="64" cy="52" r="24" fill="#C7D2FE" />
  <path d="M64 84C44.1177 84 28 100.118 28 120V128H100V120C100 100.118 83.8823 84 64 84Z" fill="#C7D2FE" />
</svg>
</file>

<file path="public/images/wallet.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M21 18V19C21 20.1 20.1 21 19 21H5C3.89 21 3 20.1 3 19V5C3 3.9 3.89 3 5 3H19C20.1 3 21 3.9 21 5V6H12C10.89 6 10 6.9 10 8V16C10 17.1 10.89 18 12 18H21ZM12 16H22V8H12V16ZM16 13.5C15.17 13.5 14.5 12.83 14.5 12C14.5 11.17 15.17 10.5 16 10.5C16.83 10.5 17.5 11.17 17.5 12C17.5 12.83 16.83 13.5 16 13.5Z" fill="#6B7280"/>
</svg>
</file>

<file path="public/images/whatsapp.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
  <path d="M20.1 3.9C17.9 1.7 15 .5 12 .5 5.8.5.5 5.8.5 12c0 2 .5 3.9 1.5 5.6L.6 23.4l6-1.6c1.6.9 3.5 1.3 5.4 1.3 6.3 0 11.4-5.1 11.4-11.4-.1-2.8-1.2-5.7-3.3-7.8zM12 21.4c-1.7 0-3.3-.5-4.8-1.3l-.4-.2-3.5 1 1-3.4L4 17c-1-1.5-1.4-3.2-1.4-5.1 0-5.2 4.2-9.4 9.4-9.4 2.5 0 4.9 1 6.7 2.8 1.8 1.8 2.8 4.2 2.8 6.7-.1 5.2-4.3 9.4-9.5 9.4zm5.1-7.1c-.3-.1-1.7-.9-1.9-1-.3-.1-.5-.1-.7.1-.2.3-.8 1-.9 1.1-.2.2-.3.2-.6.1s-1.2-.5-2.3-1.4c-.9-.8-1.4-1.7-1.6-2-.2-.3 0-.5.1-.6s.3-.3.4-.5c.2-.1.3-.3.4-.5.1-.2 0-.4 0-.5C10 9 9.3 7.6 9 7c-.1-.4-.4-.3-.5-.3h-.6s-.4.1-.7.3c-.3.3-1 1-1 2.4s1 2.8 1.1 3c.1.2 2 3.1 4.9 4.3.7.3 1.2.5 1.6.6.7.2 1.3.2 1.8.1.6-.1 1.7-.7 1.9-1.3.2-.7.2-1.2.2-1.3-.1-.3-.3-.4-.6-.5z"/>
</svg>
</file>

<file path="src/app/(main)/brands/page.tsx">
"use client";

import { FadeInSection, AnimatedGrid } from "@/components/transitions";
import usePostData from "@/hooks/usePostData";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { useState, useEffect } from "react";
import BrandCard from "@/components/BrandCard";

// Add interface for brand data
interface Brand {
  _id: string;
  name: string;
  image?: string;
}

interface BrandsResponse {
  data: Brand[];
  message: string;
  status: number;
}

export default function BrandsPage() {
  const router = useRouter();
  const [currentPage, setCurrentPage] = useState(0);
  const [brandData, setBrandData] = useState<Brand[]>([]);
  const [loadMore, setLoadMore] = useState(true);
  const [isLoading, setIsLoading] = useState(true);
  
  const { mutate: getBrands, isPending } = usePostData("/user/brand/getActiveBrands", {
    onSuccess: async ({ data }: any) => {
      setBrandData(currentPage === 0 ? data : [...brandData, ...data]);
      setIsLoading(false);
      setCurrentPage(data?.length > 0 ? currentPage + 1 : 0);
      setLoadMore(data?.length === 10);
    },
    onError: async (error: any) => {
      console.error("Error loading brands:", error);
      setIsLoading(false);
    },
  });

  // Initial load
  useEffect(() => {
    getBrands({ offset: 0, limit: 10 });
  }, []);

  // Load more when scrolling to bottom
  const handleLoadMore = () => {
    if (!isPending && loadMore) {
      getBrands({ offset: currentPage * 10, limit: 10 });
    }
  };

  if (isLoading && brandData.length === 0) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white p-4">
        <div className="animate-pulse space-y-6">
          <div className="h-12 bg-gray-200 rounded-xl w-1/3" />
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
            {[...Array(10)].map((_, i) => (
              <div key={i} className="h-32 bg-gray-200 rounded-xl" />
            ))}
          </div>
        </div>
      </div>
    );
  }

  if (brandData.length === 0) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white p-4 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-800 mb-2">No Brands Found</h2>
          <p className="text-gray-600 mb-4">There are no brands available at the moment.</p>
          <button 
            onClick={() => router.push("/")}
            className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors"
          >
            Go Back Home
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white">
      <div className="p-4 space-y-8 max-w-7xl mx-auto">
        <FadeInSection delay={0.1}>
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
            <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-indigo-700 bg-clip-text text-transparent">
              All Brands
            </h1>
          </div>
        </FadeInSection>

        <FadeInSection delay={0.2}>
          <AnimatedGrid staggerDelay={0.05}>
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
              {brandData.map((brand: Brand, index: number) => (
                <Link 
                  href={`/deals/brand/${brand._id}`} 
                  key={brand._id}
                >
                  <BrandCard item={brand} index={index} />
                </Link>
              ))}
            </div>
          </AnimatedGrid>
        </FadeInSection>

        {loadMore && (
          <div className="flex justify-center mt-8">
            <button
              onClick={handleLoadMore}
              disabled={isPending}
              className="bg-purple-600 text-white px-6 py-2 rounded-lg hover:bg-purple-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
            >
              {isPending ? (
                <>
                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Loading...
                </>
              ) : (
                'Load More'
              )}
            </button>
          </div>
        )}
      </div>
    </div>
  );
}
</file>

<file path="src/app/(main)/earnings/page.tsx">
"use client";

import { useEffect, useState } from 'react';
import Image from 'next/image';
import { useRouter } from 'next/navigation';
import { FadeInSection } from '@/components/transitions';
import imagePath from '@/constants/imagePath';
import { useGenericQuery } from '@/hooks/useQuery';
import { isEmpty } from 'lodash';

interface NavigationItem {
  title: string;
  screen: string;
  image: string;
  subtitle: string;
}

interface UserEarningResponse {
  totalCashback: number;
  message: string;
  status: number;
}

export default function EarningsPage() {
  const router = useRouter();
  const [state, setState] = useState({
    totalEaring: 0,
  });

  const { data, isPending, isError, refetch } = useGenericQuery<UserEarningResponse>(
    ["userEarning"],
    "/user/order/userEarning"
  );

  useEffect(() => {
    if (!isEmpty(data)) {
      console.log(data,'datadata')
      setState({ totalEaring: data?.totalCashback || 0 });
    }
  }, [data]);

  const navigationItems: NavigationItem[] = [
    {
      title: 'Order Details',
      screen: '/orders',
      image: imagePath.orderDetails,
      subtitle: 'View your order history and details',
    },
    {
      title: 'Wallet',
      screen: '/transactions',
      image: imagePath.walletNew,
      subtitle: 'View your wallet balance and transactions',
    },
    {
      title: 'Get help',
      screen: '/contact',
      image: imagePath.help,
      subtitle: 'Contact us for any assistance',
    },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-b from-purple-50 to-white">
      <FadeInSection>
        <div className="max-w-4xl mx-auto px-4 py-8">
          <div className="bg-white rounded-2xl shadow-lg p-6 mb-8">
            <h1 className="text-2xl font-bold text-gray-800 mb-4">My Earnings</h1>
            <div className="flex items-center justify-between p-4 bg-purple-50 rounded-xl">
              <div>
                <p className="text-sm text-gray-600">Total Earnings</p>
                {isPending ? (
                  <div className="h-8 w-32 bg-gray-200 rounded animate-pulse"></div>
                ) : (
                  <p className="text-3xl font-bold text-purple-600">₹{state.totalEaring.toFixed(2)}</p>
                )}
              </div>
              <Image
                src={imagePath.walletNew}
                alt="Wallet"
                width={48}
                height={48}
                className="text-purple-600"
              />
            </div>
          </div>

          <div className="grid gap-4">
            {navigationItems.map((item, index) => (
              <button
                key={index}
                onClick={() => router.push(item.screen)}
                className="w-full bg-white p-4 rounded-xl shadow-sm hover:shadow-md transition-shadow flex items-center justify-between"
              >
                <div className="flex items-center space-x-4">
                  <Image
                    src={item.image}
                    alt={item.title}
                    width={24}
                    height={24}
                    className="text-gray-600"
                  />
                  <div className="text-left">
                    <h3 className="font-medium text-gray-800">{item.title}</h3>
                    <p className="text-sm text-gray-500">{item.subtitle}</p>
                  </div>
                </div>
                <Image
                  src={imagePath.downArrow}
                  alt="Navigate"
                  width={24}
                  height={24}
                  className="text-gray-400"
                />
              </button>
            ))}
          </div>
        </div>
      </FadeInSection>
    </div>
  );
}
</file>

<file path="src/app/(main)/refer/page.tsx">
"use client";

import { useState } from "react";
import Image from "next/image";
import GradientButton from "@/components/GradientButton";
import imagePath from "@/constants/imagePath";
import { FadeInSection } from "@/components/transitions";

export default function ReferPage() {
  const [copied, setCopied] = useState(false);
  const appLink = 'https://buyrapp.in/';
  
  const onPressSocialBox = async (title: string) => {
    const urlMap: Record<string, string> = {
      facebook: `https://www.facebook.com/sharer/sharer.php?u=${appLink}`,
      whatsapp: `https://api.whatsapp.com/send?text=${appLink}`,
      email: `mailto:?body=${appLink}`,
      twitter: `https://twitter.com/intent/tweet?text=${appLink}`,
      instagram: `https://www.instagram.com/?url=${appLink}`,
      message: `sms:?body=${appLink}`,
    };
  
    const url = urlMap[title];
    
    if (url) {
      window.open(url, '_blank');
    } else {
      console.warn('Unsupported social media platform:', title);
    }
  };

  const shareBtns = [
    { title: 'facebook', image: imagePath.facebooklogo },
    { title: 'whatsapp', image: imagePath.whatsapp },
    { title: 'email', image: imagePath.email },
    { title: 'twitter', image: imagePath.twitter },
    { title: 'instagram', image: imagePath.instagram },
    { title: 'message', image: imagePath.message },
  ];

  const copyToClipboard = () => {
    navigator.clipboard.writeText(appLink);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white">
      <div className="relative">
        {/* Purple background with wave */}
        <div className="absolute top-0 left-0 w-full h-64 overflow-hidden">
          <Image 
            src={imagePath.purpleBack} 
            alt="Purple background" 
            width={1440} 
            height={320}
            className="w-full h-full object-cover"
          />
        </div>
        
        <div className="relative z-10 p-4 max-w-7xl mx-auto">
          <FadeInSection delay={0.1}>
            <div className="bg-white rounded-xl p-6 shadow-md mt-16">
              <div className="text-center mb-8">
                <div className="flex justify-center mb-4">
                  <Image 
                    src={imagePath.referYourFrind} 
                    alt="Refer your friend" 
                    width={200} 
                    height={200}
                    className="w-32 h-32"
                  />
                </div>
                <h2 className="text-2xl font-bold text-gray-900 mb-2">
                  Invite Your Friends
                </h2>
                <p className="text-gray-600">
                  Share the joy of savings with your friends and earn rewards!
                </p>
              </div>
              
              <div className="bg-gray-50 rounded-xl p-6 mb-8">
                <div className="flex flex-col items-center justify-center gap-4">
                  <h3 className="font-semibold text-gray-900">Your Referral Link</h3>
                  <div className="flex items-center gap-4 w-full max-w-md">
                    <div className="bg-white px-4 py-2 rounded-lg border border-gray-200 font-mono text-sm overflow-hidden text-ellipsis flex-1">
                      {appLink}
                    </div>
                    <GradientButton
                      btnText={copied ? "Copied!" : "Copy Link"}
                      onPress={copyToClipboard}
                    />
                  </div>
                </div>
              </div>
              
              <div className="mt-8">
                <h3 className="font-semibold text-gray-900 mb-4 text-center">Share Via</h3>
                <div className="grid grid-cols-3 gap-4">
                  {shareBtns.map((item, index) => (
                    <button 
                      key={index}
                      onClick={() => onPressSocialBox(item.title)}
                      className="bg-white p-4 rounded-xl shadow-sm hover:shadow-md transition-shadow flex items-center justify-center"
                    >
                      <Image 
                        src={item.image} 
                        alt={item.title} 
                        width={24} 
                        height={24}
                        className="w-6 h-6"
                      />
                    </button>
                  ))}
                </div>
              </div>
            </div>
          </FadeInSection>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/app/(main)/search/page.tsx">
"use client";

import BrandCard from "@/components/BrandCard";
import DealCard from "@/components/DealCard";
import NoDataFound from "@/components/NoDataFound";
import { FadeInSection } from "@/components/transitions";
import usePostData from "@/hooks/usePostData";
import { Search } from "lucide-react";
import { useRouter, useSearchParams } from "next/navigation";
import { useEffect, useState, useCallback } from "react";

interface SearchResult {
  _id: string;
  productName: string;
  name: string;
  image?: string;
  imageUrl?: string;
  actualPrice: number;
  finalCashBackForUser: number;
  brand?: {
    name: string;
    image: string;
  };
  dealCategory?: {
    name: string;
    image: string;
  };
  platForm?: {
    name: string;
    image: string;
  };
  parentDealId?: {
    _id: string;
    name: string;
  };
}

export default function SearchPage() {
  const router = useRouter();
  const [searchQuery, setSearchQuery] = useState('');
  const [searchType, setSearchType] = useState<"deals" | "brands">("deals");
  const [page, setPage] = useState(0);
  const [items, setItems] = useState<any[]>([]);
  const [debouncedQuery, setDebouncedQuery] = useState(searchQuery);

  const { data, isLoading, error, mutate } = usePostData<{ data: any[] }>(
    searchType === "brands" 
      ? "/user/brand/getActiveBrands" 
      : "/user/deal/activeDeals",
    {
      onSuccess: (data: { data: any[] }) => {
        if (page === 0) {
          setItems(data.data);
        } else {
          setItems(prev => [...prev, ...data.data]);
        }
      },
      onError: (error: Error) => {
        console.error("Search error:", error);
      }
    }
  );

  // Debounce search query
  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedQuery(searchQuery);
    }, 500);

    return () => clearTimeout(timer);
  }, [searchQuery]);

  // Handle search when debounced query changes
  useEffect(() => {
    if (debouncedQuery.trim()) {
      router.push(`/search?q=${encodeURIComponent(debouncedQuery.trim())}`);
      setPage(0);
      setItems([]);
      mutate({
        search: debouncedQuery.trim(),
        offset: 0,
        limit: 10
      });
    }
  }, [debouncedQuery, searchType]);

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
  };

  const handleLoadMore = () => {
    setPage(prev => prev + 1);
    mutate({
      search: searchQuery.trim(),
      offset: (page + 1) * 10,
      limit: 10
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white">
      <div className="p-4 md:p-6 max-w-7xl mx-auto space-y-8">
        {/* Search Bar */}
        <FadeInSection delay={0.1}>
          <div className="space-y-4">
            <form onSubmit={handleSearch} className="relative">
              <div className="relative">
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="Search deals and brands..."
                  className="w-full h-14 pl-12 pr-4 rounded-2xl border border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-300 bg-white shadow-sm text-gray-400"
                />
                <Search className="absolute left-4 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
              </div>
            </form>

            {/* Search Type Toggle */}
            <div className="flex space-x-4">
              <button
                onClick={() => setSearchType("deals")}
                className={`px-4 py-2 rounded-lg transition-all duration-300 ${
                  searchType === "deals"
                    ? "bg-blue-500 text-white"
                    : "bg-gray-100 text-gray-600 hover:bg-gray-200"
                }`}
              >
                Deals
              </button>
              <button
                onClick={() => setSearchType("brands")}
                className={`px-4 py-2 rounded-lg transition-all duration-300 ${
                  searchType === "brands"
                    ? "bg-blue-500 text-white"
                    : "bg-gray-100 text-gray-600 hover:bg-gray-200"
                }`}
              >
                Brands
              </button>
            </div>
          </div>
        </FadeInSection>

        {/* Search Results */}
        <FadeInSection delay={0.2}>
          {isLoading && items.length === 0 ? (
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
              {[...Array(6)].map((_, index) => (
                <div
                  key={index}
                  className="h-64 bg-gray-200 rounded-2xl animate-pulse"
                />
              ))}
            </div>
          ) : error ? (
            <NoDataFound />
          ) : items.length === 0 ? (
            <NoDataFound />
          ) : (
            <>
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                {items.map((item, index) => (
                  <div key={item?._id}>
                    {searchType === "deals" ? (
                      <DealCard item={item} index={index} />
                    ) : (
                      <BrandCard item={item} index={index} />
                    )}
                  </div>
                ))}
              </div>
              {data?.data?.length === 10 && (
                <div className="flex justify-center mt-8">
                  <button
                    onClick={handleLoadMore}
                    className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
                  >
                    {isLoading ? "Loading..." : "Load More"}
                  </button>
                </div>
              )}
            </>
          )}
        </FadeInSection>
      </div>
    </div>
  );
}
</file>

<file path="src/app/(main)/layout.tsx">
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "../globals.css";
import Header from "@/components/Header";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Buyr Web",
  description: "Your one-stop shop for deals and cashback",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {

    

  return (
    <main className="pt-16">
      <Header />
      {children}
    </main>
  );
}
</file>

<file path="src/app/auth/forgot-password/page.tsx">
"use client";

import { styles } from '@/components/auth/styles';
import GradientButton from '@/components/GradientButton';
import TextContainer from '@/components/TextContainer';
import usePostData from '@/hooks/usePostData';
import { showError, showSuccess } from '@/utils/helperFunctions';
import Image from 'next/image';
import { useRouter } from 'next/navigation';
import { useState } from 'react';

export default function ForgotPasswordPage() {
  const router = useRouter();
  const [email, setEmail] = useState('');
  const [isEmailAdded, setIsEmailAdded] = useState(false);
  const [otpInput, setOtpInput] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [errors, setErrors] = useState({
    email: '',
    otp: '',
    password: '',
    confirmPassword: ''
  });

  const { mutate: sendOtp } = usePostData<{ message?: string }>('/auth/send-otp', {
    onSuccess: (data) => {
      setIsLoading(false);
      setIsEmailAdded(true);
      showSuccess(data?.message || 'OTP sent successfully');
    },
    onError: (error) => {
      setIsLoading(false);
      showError(error.message || 'Failed to send OTP');
    },
  });

  const { mutate: verifyOtp } = usePostData('/auth/verify-otp', {
    onSuccess: () => {
      setIsLoading(false);
      showSuccess('Password reset successful');
      router.push('/login');
    },
    onError: (error) => {
      setIsLoading(false);
      showError(error.message || 'Failed to verify OTP');
    },
  });

  const validateEmail = () => {
    const newErrors = { ...errors, email: '' };
    let isValid = true;

    if (!email) {
      newErrors.email = 'Email is required';
      isValid = false;
    } else if (!/\S+@\S+\.\S+/.test(email)) {
      newErrors.email = 'Please enter a valid email address';
      isValid = false;
    }

    setErrors(newErrors);
    return isValid;
  };

  const validateOtpAndPassword = () => {
    const newErrors = { ...errors, otp: '', password: '', confirmPassword: '' };
    let isValid = true;

    if (!otpInput) {
      newErrors.otp = 'OTP is required';
      isValid = false;
    } else if (otpInput.length !== 4) {
      newErrors.otp = 'OTP must be 4 digits';
      isValid = false;
    }

    if (!password) {
      newErrors.password = 'Password is required';
      isValid = false;
    } else if (password.length < 6) {
      newErrors.password = 'Password must be at least 6 characters';
      isValid = false;
    }

    if (!confirmPassword) {
      newErrors.confirmPassword = 'Please confirm your password';
      isValid = false;
    } else if (password !== confirmPassword) {
      newErrors.confirmPassword = 'Passwords do not match';
      isValid = false;
    }

    setErrors(newErrors);
    return isValid;
  };

  const handleSendOtp = () => {
    if (!validateEmail()) {
      return;
    }

    setIsLoading(true);
    sendOtp({ email });
  };

  const handleVerifyOtp = () => {
    if (!validateOtpAndPassword()) {
      return;
    }

    setIsLoading(true);
    verifyOtp({ 
      otp: otpInput, 
      email, 
      password 
    });
  };

  return (
    <div className="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8 bg-white p-8 rounded-lg shadow-lg">
        <div>
          <TextContainer text="Forgot Password" style={styles.logintxt} />
          <TextContainer text="Enter your email to reset password" style={styles.welcomeBack} />
        </div>

        {!isEmailAdded ? (
          <div className="space-y-6">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <div className="mt-1 relative">
                <input
                  id="email"
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder="Enter your email"
                  className="pl-10 mt-1 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                />
              </div>
              {errors.email && (
                <p className="mt-1 text-sm text-red-600">{errors.email}</p>
              )}
            </div>
            
            <GradientButton
              onPress={handleSendOtp}
              btnText="Next"
              indicator={isLoading}
            />
          </div>
        ) : (
          <div className="space-y-6">
            <div className="text-center">
              <p className="text-gray-600">
                A code has been sent to <span className="font-medium">{email}</span>
              </p>
              <div className="mt-2">
                <span className="text-gray-600">Didn't receive the code? </span>
                <button
                  onClick={handleSendOtp}
                  className="text-indigo-600 font-medium"
                >
                  Resend Code
                </button>
              </div>
            </div>

            <div>
              <label htmlFor="otp" className="block text-sm font-medium text-gray-700">
                Verification Code
              </label>
              <input
                id="otp"
                type="text"
                value={otpInput}
                onChange={(e) => setOtpInput(e.target.value)}
                placeholder="Enter 4-digit code"
                maxLength={4}
                className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              />
              {errors.otp && (
                <p className="mt-1 text-sm text-red-600">{errors.otp}</p>
              )}
            </div>

            {otpInput.length === 4 && (
              <>
                <div>
                  <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                    New Password
                  </label>
                  <div className="mt-1 relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Image 
                        src="/images/lock-icon.png" 
                        alt="Lock icon" 
                        width={20} 
                        height={20} 
                        className="text-gray-400"
                      />
                    </div>
                    <input
                      id="password"
                      type={showPassword ? 'text' : 'password'}
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      placeholder="Enter new password"
                      className="pl-10 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                    />
                    <button
                      type="button"
                      onClick={() => setShowPassword(!showPassword)}
                      className="absolute right-3 top-2 text-gray-500"
                    >
                      <Image 
                        src={showPassword ? "/images/see-eye.png" : "/images/hide-eye.png"} 
                        alt={showPassword ? "Hide password" : "Show password"} 
                        width={20} 
                        height={20} 
                      />
                    </button>
                  </div>
                  {errors.password && (
                    <p className="mt-1 text-sm text-red-600">{errors.password}</p>
                  )}
                </div>

                <div>
                  <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                    Confirm Password
                  </label>
                  <div className="mt-1 relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Image 
                        src="/images/lock-icon.png" 
                        alt="Lock icon" 
                        width={20} 
                        height={20} 
                        className="text-gray-400"
                      />
                    </div>
                    <input
                      id="confirmPassword"
                      type={showConfirmPassword ? 'text' : 'password'}
                      value={confirmPassword}
                      onChange={(e) => setConfirmPassword(e.target.value)}
                      placeholder="Confirm new password"
                      className="pl-10 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                    />
                    <button
                      type="button"
                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                      className="absolute right-3 top-2 text-gray-500"
                    >
                      <Image 
                        src={showConfirmPassword ? "/images/see-eye.png" : "/images/hide-eye.png"} 
                        alt={showConfirmPassword ? "Hide password" : "Show password"} 
                        width={20} 
                        height={20} 
                      />
                    </button>
                  </div>
                  {errors.confirmPassword && (
                    <p className="mt-1 text-sm text-red-600">{errors.confirmPassword}</p>
                  )}
                </div>
              </>
            )}

            <GradientButton
              onPress={handleVerifyOtp}
              btnText="Verify"
              indicator={isLoading}
            />
          </div>
        )}

        <div className="text-center">
          <span className="text-gray-600">Remember your password? </span>
          <button
            onClick={() => router.push('/login')}
            className="text-indigo-600 font-medium"
          >
            Login
          </button>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/app/auth/login/page.tsx">
"use client";

import Login from '@/components/auth/Login';

export default function LoginPage() {
  return <Login />;
}
</file>

<file path="src/app/auth/signup/page.tsx">
"use client";

import Signup from '@/components/auth/Signup';

export default function SignupPage() {
  return <Signup />;
}
</file>

<file path="src/app/globals.css">
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}
</file>

<file path="src/app/not-found.tsx">
"use client";

import { motion } from "framer-motion";
import Link from "next/link";
import Image from "next/image";
import GradientButton from "@/components/GradientButton";

export default function NotFound() {
  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
      <div className="max-w-2xl w-full text-center">
        {/* Animated 404 Text */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="mb-8"
        >
          <h1 className="text-9xl font-bold text-primary mb-2">404</h1>
          <motion.div
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ delay: 0.2 }}
          >
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">
              Oops! Page Not Found
            </h2>
            <p className="text-gray-600 mb-8 max-w-md mx-auto">
              The page you are looking for might have been removed, had its name
              changed, or is temporarily unavailable.
            </p>
          </motion.div>
        </motion.div>

        {/* Animated Illustration */}
        <motion.div
          initial={{ scale: 0.5, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ delay: 0.3, type: "spring", stiffness: 100 }}
          className="mb-12 relative h-64 mx-auto"
        >
          <Image
            src="/images/404-illustration.svg"
            alt="404 Illustration"
            width={300}
            height={300}
            className="mx-auto"
            priority
          />
        </motion.div>

        {/* Action Buttons */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5 }}
          className="flex flex-col sm:flex-row gap-4 justify-center items-center"
        >
          <GradientButton
            variant="primary"
            onClick={() => window.history.back()}
            className="min-w-[160px]"
            fullWidth
          >
            Go Back
          </GradientButton>
          <Link href="/" className="min-w-[160px]">
            <GradientButton variant="outline" fullWidth>
              Return Home
            </GradientButton>
          </Link>
        </motion.div>
      </div>
    </div>
  );
}
</file>

<file path="src/app/ProgressBarProvider.tsx">
"use client";

import NextTopLoader from 'nextjs-toploader';

export default function ProgressBarProvider({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <>
      {children}
      <NextTopLoader
        color="#3b82f6"
        height={4}
        showSpinner={false}
      />
    </>
  );
}
</file>

<file path="src/app/providers.tsx">
"use client";

import { Provider } from "react-redux";
import { store } from "@/redux/store";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import ProgressBarProvider from "./ProgressBarProvider";

const queryClient = new QueryClient();

export function Providers({ children }: { children: React.ReactNode }) {
  return (
    <ProgressBarProvider>
      <Provider store={store}>
        <QueryClientProvider client={queryClient}>
          {children}
        </QueryClientProvider>
      </Provider>
    </ProgressBarProvider>
  );
}
</file>

<file path="src/components/auth/LoginForm.tsx">
"use client";

import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { useSignIn } from '@/hooks/useAuth';
import { useRouter } from 'next/navigation';

const schema = yup.object({
  email: yup.string().email('Invalid email').required('Email is required'),
  password: yup.string().required('Password is required').min(6, 'Password must be at least 6 characters'),
});

type LoginFormData = yup.InferType<typeof schema>;

export default function LoginForm() {
  const router = useRouter();
  const { register, handleSubmit, formState: { errors } } = useForm<LoginFormData>({
    resolver: yupResolver(schema),
  });

  const { mutate: signIn, isPending } = useSignIn();

  const onSubmit = (data: LoginFormData) => {
    signIn(data, {
      onSuccess: () => {
        router.push('/dashboard');
      },
    });
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Sign in to your account
          </h2>
        </div>
        <form className="mt-8 space-y-6" onSubmit={handleSubmit(onSubmit)}>
          <div className="rounded-md shadow-sm -space-y-px">
            <div>
              <label htmlFor="email" className="sr-only">
                Email address
              </label>
              <input
                {...register('email')}
                type="email"
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                placeholder="Email address"
              />
              {errors.email && (
                <p className="text-red-500 text-xs mt-1">{errors.email.message}</p>
              )}
            </div>
            <div>
              <label htmlFor="password" className="sr-only">
                Password
              </label>
              <input
                {...register('password')}
                type="password"
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                placeholder="Password"
              />
              {errors.password && (
                <p className="text-red-500 text-xs mt-1">{errors.password.message}</p>
              )}
            </div>
          </div>

          <div>
            <button
              type="submit"
              disabled={isPending}
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              {isPending ? 'Signing in...' : 'Sign in'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
</file>

<file path="src/components/auth/styles.ts">
"use client";

// For web, we'll use Tailwind classes directly in the components
// This file is kept for compatibility with the React Native code

export const styles = {
  logintxt: 'text-3xl font-bold text-gray-900',
  welcomeBack: 'text-lg text-gray-600 mt-2',
  tabContainer: 'flex flex-row justify-between mt-8 mb-6',
  activeTab: 'bg-indigo-600 text-white px-6 py-2 rounded-md',
  inActiveTab: 'bg-gray-200 text-gray-700 px-6 py-2 rounded-md',
  bottomview: 'mt-8',
  inputarea: 'mb-8',
  forgot: 'text-indigo-600 text-sm mt-2 text-right',
  orLoginView: 'flex flex-row items-center justify-center my-6',
  horizontalLine: 'h-px bg-gray-300 flex-1',
};
</file>

<file path="src/components/CustomForm/CustomImageUpload.tsx">
"use client";

import React, { useState, useEffect } from 'react';
import Image from 'next/image';
import { Field as FormField } from './types';

interface CustomImageUploadProps {
  field: FormField;
  value: string;
  onChange: (value: string, fileName?: string) => void;
  error?: string;
  isUploading?: boolean;
}

const CustomImageUpload: React.FC<CustomImageUploadProps> = ({
  field,
  value,
  onChange,
  error,
  isUploading = false
}) => {
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  
  // Set preview URL when value changes
  useEffect(() => {
    if (value) {
      setPreviewUrl(value);
    }
  }, [value]);

  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) {
      alert('Please select an image first');
      return;
    }

    if (file.size > 4 * 1024 * 1024) {
      alert('Image must be below 4MB');
      return;
    }

    if (!file.type.match(/^image\/(jpeg|png)$/)) {
      alert('Image must be in jpg/png format');
      return;
    }

    // Show preview immediately
    const reader = new FileReader();
    reader.onloadend = () => {
      const dataUrl = reader.result as string;
      setPreviewUrl(dataUrl);
      // Pass the file name to the parent component
      onChange(dataUrl, file.name);
    };
    reader.readAsDataURL(file);
  };

  const handleRemoveImage = () => {
    setPreviewUrl(null);
    onChange('');
  };

  return (
    <div>
      <label htmlFor={field.name} className="block text-sm font-medium text-gray-700 mb-1">
        {field.label}
      </label>
      {field.subHeading && (
        <p className="text-sm text-gray-500 mb-2">{field.subHeading}</p>
      )}
      <div className="flex items-center space-x-4">
        <input
          type="file"
          id={field.name}
          name={field.name}
          accept="image/jpeg,image/png"
          onChange={handleImageUpload}
          disabled={field.disabled || isUploading}
          className="hidden"
        />
        <label
          htmlFor={field.name}
          className={`px-4 py-2 bg-gray-100 text-gray-700 rounded-lg cursor-pointer hover:bg-gray-200 transition-colors
            ${field.disabled || isUploading ? 'opacity-50 cursor-not-allowed' : ''}`}
        >
          {isUploading ? 'Uploading...' : 'Choose File'}
        </label>
        {(value || previewUrl) && (
          <div className="relative w-20 h-20 group">
            <Image
              src={previewUrl || value || ''}
              alt="Uploaded Image"
              fill
              className="object-contain rounded-md"
            />
            <button
              type="button"
              onClick={handleRemoveImage}
              className="absolute top-0 right-0 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"
              aria-label="Remove image"
            >
              ×
            </button>
          </div>
        )}
      </div>
      {error && (
        <p className="text-red-500 text-sm mt-1">{error}</p>
      )}
    </div>
  );
};

export default CustomImageUpload;
</file>

<file path="src/components/CustomForm/index.ts">
export { default as CustomForm } from './CustomForm';
export { default as CustomInput } from './CustomInput';
export { default as CustomSelect } from './CustomSelect';
export { default as CustomImageUpload } from './CustomImageUpload';
export { default as CustomDatePicker } from './CustomDatePicker';
export * from './types';
</file>

<file path="src/components/CustomForm/types.ts">
export interface Field {
  name: string;
  label: string;
  type: 'text' | 'email' | 'password' | 'image' | 'select' | 'checkbox' | 'numeric' | 'date' | 'multiselect';
  options?: { label: string; value: any; id: string }[];
  initialValue?: any;
  isEditable?: boolean;
  subHeading?: string;
  maxDate?: Date;
  minDate?: Date;
  disabled?: boolean;
  placeholder?: string;
}

export interface CustomFormProps {
  fields: Field[];
  validationSchema: any;
  onSubmit: (values: { [key: string]: any }) => void;
  resetKey?: number;
  onReset?: () => void;
  onInputValueChange?: (
    field: string,
    value: any,
    setFieldValue: (field: string, value: any) => void,
    setFieldError: (field: string, error: string) => void
  ) => boolean | void;
  onDropdownOpen?: (isOpen: boolean, fieldName: string) => void;
  submitButtonText?: string;
  showReset?: boolean;
  className?: string;
  dealId?: string;
  t?: (key: string) => string;
  showSuccess?: (message: string) => void;
  uploadImage?: (file: any, dealId: string) => Promise<{ data: string; message: string }>;
  sumPrices?: (value: any, field: string) => number;
  toString?: (value: any) => string;
}
</file>

<file path="src/components/transactions/TransactionCard.tsx">
'use client';

import React from 'react';

interface Transaction {
  orderIdOfPlatForm: string;
  dealId: {
    parentDealId?: {
      platForm?: {
        name: string;
      };
      dealCategory?: {
        name: string;
      };
      productName: string;
    };
    platForm?: {
      name: string;
    };
    dealCategory?: {
      name: string;
    };
    productName: string;
    finalCashBackForUser: number;
  };
  paymentStatus: string;
}

interface TransactionCardProps {
  transaction: Transaction;
  onClick: () => void;
}

const TransactionCard: React.FC<TransactionCardProps> = ({ transaction, onClick }) => {
  const { dealId, orderIdOfPlatForm, paymentStatus } = transaction;
  
  const platformName = dealId?.parentDealId?.platForm?.name || dealId?.platForm?.name;
  const categoryName = dealId?.parentDealId?.dealCategory?.name || dealId?.dealCategory?.name;
  const productName = dealId?.parentDealId?.productName || dealId?.productName;
  
  return (
    <div 
      onClick={onClick}
      className="bg-white rounded-xl shadow-sm hover:shadow-md transition-shadow p-4 mb-3 cursor-pointer"
    >
      <div className="flex flex-wrap gap-2 mb-3">
        <div className="bg-green-100 px-3 py-1 rounded-lg">
          <span className="text-sm font-bold text-green-800">
            {platformName}
          </span>
        </div>
        <div className="bg-yellow-100 px-3 py-1 rounded-lg">
          <span className="text-sm font-bold text-yellow-800">
            {categoryName}
          </span>
        </div>
      </div>
      
      <div className="mb-3">
        <h3 className="text-base font-medium text-gray-800 mb-1 line-clamp-2">
          {productName}
        </h3>
        <p className="text-sm text-gray-600">
          Return Amount: ₹{Number(dealId?.finalCashBackForUser).toFixed(2)}
        </p>
      </div>
      
      <div className="flex items-center justify-between">
        <p className="text-sm text-gray-600 flex-1 line-clamp-2">
          Order ID: {orderIdOfPlatForm}
        </p>
        <div 
          className={`px-3 py-1 rounded-lg text-center w-1/5 ${
            paymentStatus === 'paid' ? 'bg-green-500' : 'bg-red-500'
          }`}
        >
          <span className="text-xs font-medium text-white">
            {paymentStatus === 'paid' ? 'Paid' : 'Pending'}
          </span>
        </div>
      </div>
    </div>
  );
};

export default TransactionCard;
</file>

<file path="src/components/transitions/AnimatedGrid.tsx">
'use client';

import React, { useEffect, useRef, useState } from 'react';

interface AnimatedGridProps {
  children: React.ReactNode;
  staggerDelay?: number;
  className?: string;
}

const AnimatedGrid: React.FC<AnimatedGridProps> = ({ 
  children, 
  staggerDelay = 0.05,
  className = ''
}) => {
  const [isVisible, setIsVisible] = useState(false);
  const gridRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true);
          observer.disconnect();
        }
      },
      { threshold: 0.1 }
    );

    if (gridRef.current) {
      observer.observe(gridRef.current);
    }

    return () => {
      observer.disconnect();
    };
  }, []);

  return (
    <div 
      ref={gridRef} 
      className={`grid gap-4 ${className}`}
    >
      {React.Children.map(children, (child, index) => {
        if (React.isValidElement(child)) {
          return React.cloneElement(child as React.ReactElement<any>, {
            className: `${(child as React.ReactElement<any>).props.className || ''} ${
              isVisible 
                ? 'opacity-100 translate-y-0' 
                : 'opacity-0 translate-y-4'
            } transition-all duration-500 ease-out`,
            style: {
              ...(child as React.ReactElement<any>).props.style,
              transitionDelay: isVisible ? `${index * staggerDelay}s` : '0s',
            },
          });
        }
        return child;
      })}
    </div>
  );
};

export default AnimatedGrid;
</file>

<file path="src/components/transitions/index.tsx">
"use client";

import { motion } from "framer-motion";
import { ReactNode } from "react";

interface FadeInSectionProps {
  children: ReactNode;
  delay?: number;
  className?: string;
}

export function FadeInSection({ children, delay = 0, className = "" }: FadeInSectionProps) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay }}
      className={className}
    >
      {children}
    </motion.div>
  );
}

interface AnimatedGridProps {
  children: ReactNode;
  staggerDelay?: number;
  className?: string;
}

export function AnimatedGrid({ children, staggerDelay = 0.1, className = "" }: AnimatedGridProps) {
  return (
    <motion.div
      initial="hidden"
      animate="visible"
      variants={{
        visible: {
          transition: {
            staggerChildren: staggerDelay,
          },
        },
      }}
      className={className}
    >
      {children}
    </motion.div>
  );
}
</file>

<file path="src/components/CustomTextInput.tsx">
"use client";

import React from 'react';
import Image from 'next/image';

interface CustomTextInputProps {
  value: string;
  placeholder: string;
  onChangeText: (text: string) => void;
  isLeft?: boolean;
  leftImg?: string;
  rightImg?: string;
  onPressRight?: () => void;
  secureTextEntry?: boolean;
  keyboardType?: string;
  containerStyles?: string;
  rightImageStyle?: string;
  maxLength?: number;
  autoCapitalize?: string;
}

const CustomTextInput: React.FC<CustomTextInputProps> = ({
  value,
  placeholder,
  onChangeText,
  isLeft = false,
  leftImg,
  rightImg,
  onPressRight,
  secureTextEntry = false,
  keyboardType = 'text',
  containerStyles = '',
  rightImageStyle = '',
  maxLength,
  autoCapitalize,
}) => {
  return (
    <div className={`relative flex items-center ${containerStyles}`}>
      {isLeft && leftImg && (
        <div className="absolute left-3 flex items-center justify-center">
          <Image src={leftImg} alt="left icon" width={20} height={20} />
        </div>
      )}
      <input
        type={secureTextEntry ? 'password' : keyboardType === 'email-address' ? 'email' : 'text'}
        value={value}
        onChange={(e) => onChangeText(e.target.value)}
        placeholder={placeholder}
        maxLength={maxLength}
        autoCapitalize={autoCapitalize}
        className={`w-full rounded-md border border-gray-300 py-2 px-4 focus:border-indigo-500 focus:outline-none focus:ring-1 focus:ring-indigo-500 ${
          isLeft ? 'pl-10' : ''
        } ${rightImg ? 'pr-10' : ''}`}
      />
      {rightImg && (
        <button
          type="button"
          onClick={onPressRight}
          className="absolute right-3 flex items-center justify-center"
        >
          <Image src={rightImg} alt="right icon" width={20} height={20} className={rightImageStyle} />
        </button>
      )}
    </div>
  );
};

export default CustomTextInput;
</file>

<file path="src/components/GradientButton.tsx">
"use client";

import React from 'react';

interface GradientButtonProps {
  onPress?: () => void;
  onClick?: () => void;
  btnText?: string;
  indicator?: boolean;
  containerStyle?: string;
  className?: string;
  variant?: 'primary' | 'outline';
  fullWidth?: boolean;
  children?: React.ReactNode;
}

const GradientButton: React.FC<GradientButtonProps> = ({
  onPress,
  onClick,
  btnText,
  indicator = false,
  containerStyle = '',
  className = '',
  variant = 'primary',
  fullWidth = false,
  children,
}) => {
  const handleClick = onPress || onClick;
  
  const getVariantClasses = () => {
    if (variant === 'primary') {
      return 'bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white';
    } else if (variant === 'outline') {
      return 'bg-transparent border-2 border-indigo-600 text-indigo-600 hover:bg-indigo-50';
    }
    return 'bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white';
  };
  
  const widthClass = fullWidth ? 'w-full' : '';
  
  return (
    <button
      type="button"
      onClick={handleClick}
      disabled={indicator}
      className={`relative rounded-md py-2 px-4 shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 ${getVariantClasses()} ${widthClass} ${containerStyle} ${className}`}
    >
      {indicator ? (
        <div className="flex items-center justify-center">
          <svg
            className="mr-2 h-5 w-5 animate-spin text-white"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              className="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              strokeWidth="4"
            ></circle>
            <path
              className="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
          <span>Loading...</span>
        </div>
      ) : (
        children || btnText
      )}
    </button>
  );
};

export default GradientButton;
</file>

<file path="src/components/TextContainer.tsx">
"use client";

import React from 'react';

interface TextContainerProps {
  text: string;
  style?: string;
  children?: React.ReactNode;
}

const TextContainer: React.FC<TextContainerProps> = ({ text, style = '', children }) => {
  // In a real implementation, you would use i18n for translations
  // For now, we'll just return the text directly
  return (
    <div className={style}>
      {text}
      {children}
    </div>
  );
};

export default TextContainer;
</file>

<file path="src/constants/imagePath.ts">
const imagePath = {
  facebooklogo: '/images/facebook.svg',
  whatsapp: '/images/whatsapp.svg',
  email: '/images/email.svg',
  twitter: '/images/twitter.svg',
  instagram: '/images/instagram.svg',
  message: '/images/message.svg',
  purpleBack: '/images/purple-back.svg',
  referYourFrind: '/images/refer-your-friend.svg',
  contactUsImg: '/images/contact-us.svg',
  userImg: '/images/user-placeholder.svg',
  orderDetails: '/images/order-details.svg',
  banking: '/images/banking.svg',
  liveChat: '/images/live-chat.svg',
  walletNew: '/images/wallet.svg',
  downArrow: '/images/down-arrow.svg',
  help: '/images/help.svg',
};

export default imagePath;
</file>

<file path="src/hooks/useAuth.ts">
"use client";

import { useMutation } from '@tanstack/react-query';
import { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from 'firebase/auth';
import { auth } from '@/lib/firebase';
import { useDispatch, useSelector } from 'react-redux';
import { setError, setUser, clearUser } from '@/redux/slices/userSlice';
import { RootState } from '@/redux/store';
import { useEffect } from 'react';
import { getCookie, setCookie, deleteCookie } from 'cookies-next';
import usePostData from './usePostData';

export const useSignUp = () => {
  const dispatch = useDispatch();

  return useMutation({
    mutationFn: async ({ email, password }: { email: string; password: string }) => {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      return userCredential.user;
    },
    onSuccess: (user) => {
      dispatch(setUser({
        email: user.email!,
        uid: user.uid,
      }));
    },
    onError: (error: Error) => {
      dispatch(setError(error.message));
    },
  });
};

export const useSignIn = () => {
  const dispatch = useDispatch();

  return useMutation({
    mutationFn: async ({ email, password }: { email: string; password: string }) => {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      return userCredential.user;
    },
    onSuccess: (user) => {
      dispatch(setUser({
        email: user.email!,
        uid: user.uid,
      }));
    },
    onError: (error: Error) => {
      dispatch(setError(error.message));
    },
  });
};

export const useSignOut = () => {
  const dispatch = useDispatch();

  return useMutation({
    mutationFn: async () => {
      await signOut(auth);
    },
    onSuccess: () => {
      dispatch(clearUser());
    },
    onError: (error: Error) => {
      dispatch(setError(error.message));
    },
  });
};

export const useAuth = () => {
  const dispatch = useDispatch();
  const { user, isAuthenticated } = useSelector((state: RootState) => state.user as { user: any; isAuthenticated: boolean });
  const accessToken = getCookie('accessToken');

  const { mutate: fetchUser } = usePostData('/auth/me', {
    onSuccess: (data) => {
      dispatch(setUser(data));
    },
    onError: () => {
      dispatch(clearUser());
      deleteCookie('accessToken');
    },
  });

  useEffect(() => {
    if (accessToken && !isAuthenticated) {
      fetchUser({});
    }
  }, [accessToken, isAuthenticated]);

  const login = (userData: any) => {
    // Also store in localStorage for backward compatibility
    localStorage.setItem('userData', JSON.stringify(userData));
    // Update Redux state
    setCookie('auth-token', userData.token);
    dispatch(setUser(userData));
  };

  const logout = () => {
    // Remove token from cookie
    deleteCookie('accessToken');

    // Also remove from localStorage for backward compatibility
    localStorage.removeItem('userData');

    // Clear Redux state
    dispatch(clearUser());
  };

  return {
    user,
    isAuthenticated,
    accessToken,
    login,
    logout,
  };
};
</file>

<file path="src/hooks/usePostData.ts">
"use client";

import { useMutation, UseMutationResult } from '@tanstack/react-query';
import { postData } from '@/services/apiService';

interface UsePostDataOptions<TData, TError, TVariables> {
  onSuccess?: (data: TData, variables: TVariables) => void | Promise<void>;
  onError?: (error: TError, variables: TVariables) => void | Promise<void>;
  onSettled?: (data: TData | undefined, error: TError | null, variables: TVariables) => void | Promise<void>;
}

const usePostData = <TData, TError = Error, TVariables = any>(
  endpoint: string,
  options?: UsePostDataOptions<TData, TError, TVariables>
): UseMutationResult<TData, TError, TVariables> & { isLoading: boolean } => {
  const mutation = useMutation<TData, TError, TVariables>({
    mutationFn: async (variables) => {
      const response = await postData(endpoint, variables);
      return response as TData;
    },
    onSuccess: options?.onSuccess,
    onError: options?.onError,
    onSettled: options?.onSettled,
  });

  return {
    ...mutation,
    isLoading: mutation.isPending,
  };
};

export default usePostData;
</file>

<file path="src/hooks/useQuery.ts">
import { useQuery, UseQueryOptions } from '@tanstack/react-query';
import axiosInstance from '@/lib/axios';

interface PaginationParams {
  page?: number;
  limit?: number;
  [key: string]: any;
}

interface PaginationMeta {
  currentPage: number;
  totalPages: number;
  totalPosts: number;
  hasNextPage: boolean;
  hasPrevPage: boolean;
}

export interface ApiResponse<T> {
  success: boolean;
  message: string;
  data: {
    posts: T[];
    pagination: PaginationMeta;
  };
}

export function usePaginatedQuery<T>(
  queryKey: string[],
  endpoint: string,
  params: PaginationParams = { page: 1, limit: 10 },
  options?: Omit<UseQueryOptions<ApiResponse<T>, Error>, 'queryKey' | 'queryFn'>
) {
  return useQuery({
    queryKey: [...queryKey, params],
    queryFn: async () => {
      const { data } = await axiosInstance.get<ApiResponse<T>>(endpoint, {
        params: {
          page: params.page || 1,
          limit: params.limit || 10,
          ...params,
        },
      });
      
      if (!data.success) {
        throw new Error(data.message || 'Failed to fetch data');
      }
      
      return data;
    },
    ...options,
  });
}

// Example of a non-paginated GET request
export function useGenericQuery<T>(
  queryKey: string[],
  endpoint: string,
  params: Record<string, any> = {},
  options?: Omit<UseQueryOptions<T, Error>, 'queryKey' | 'queryFn'>
) {
  return useQuery({
    queryKey: [...queryKey, params],
    queryFn: async () => {
      const { data } = await axiosInstance.get<T>(endpoint, { params });
      return data;
    },
    ...options,
  });
}
</file>

<file path="src/lib/axios.ts">
import axios from 'axios';

const baseURL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000/api';

const api = axios.create({
  baseURL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor
api.interceptors.request.use(
  (config) => {
    const userData = localStorage.getItem('userData');
    if (userData) {
      const token  = JSON.parse(userData);
      if (token?.user?.token) {
        config.headers.Authorization = `Bearer ${token?.user?.token}`;
      }
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);
// Response interceptor
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      // Handle unauthorized access
      // localStorage.removeItem('token');
      // window.location.href = '/auth/login';
    }
    return Promise.reject(error);
  }
);

export default api;
</file>

<file path="src/lib/firebase.ts">
import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
</file>

<file path="src/redux/actions/auth.ts">
import { clearUser } from '../slices/userSlice';
import { AppDispatch } from '../store';

export const onLogOut = () => (dispatch: AppDispatch) => {
  dispatch(clearUser());
};
</file>

<file path="src/redux/slices/userSlice.ts">
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

interface UserState {
  user: any | null;
  isAuthenticated: boolean;
  error: string | null;
}

// Load initial state from localStorage if available
const loadState = (): UserState => {
  if (typeof window !== 'undefined') {
    const savedState = localStorage.getItem('userData');
    if (savedState) {
      return JSON.parse(savedState);
    }
  }
  return {
    user: null,
    isAuthenticated: false,
    error: null,
  };
};

const initialState: UserState = loadState();

const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    setUser: (state, action: PayloadAction<any>) => {
      state.user = action.payload;
      state.isAuthenticated = !!action.payload;
      state.error = null;
      // Save to localStorage
      if (typeof window !== 'undefined') {
        localStorage.setItem('userData', JSON.stringify(state));
      }
    },
    clearUser: (state) => {
      state.user = null;
      state.isAuthenticated = false;
      state.error = null;
      // Clear from localStorage
      if (typeof window !== 'undefined') {
        localStorage.removeItem('userData');
      }
    },
    setError: (state, action: PayloadAction<string>) => {
      state.error = action.payload;
    },
  },
});

export const { setUser, clearUser, setError } = userSlice.actions;
export default userSlice.reducer;
</file>

<file path="src/redux/store.ts">
import { configureStore } from '@reduxjs/toolkit';
import userReducer from './slices/userSlice';
export const store = configureStore({
  reducer: {
    user: userReducer,
  },
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;
</file>

<file path="src/services/api.ts">
import api, { getData } from "./apiService";

export interface HomeData {
  Poster: Array<{
    _id: string;
    image: string;
    posterType: string;
    redirectUrl: string;
    brand?: {
      _id: string;
      name: string;
    };
    deal?: {
      _id: string;
      name: string;
    };
    dealCategory?: {
      _id: string;
      name: string;
    };
  }>;
  dealCategoryData: Array<{
    _id: string;
    name: string;
    image: string;
  }>;
  activelyDeals: Array<{
    _id: string;
    productName: string;
    actualPrice: number;
    finalCashBackForUser: number;
    imageUrl?: string;
    brand?: {
      name: string;
      image: string;
    };
    dealCategory?: {
      name: string;
      image: string;
    };
    platForm?: {
      name: string;
      image: string;
    };
    parentDealId?: {
      imageUrl?: string;
      brand?: {
        image: string;
      };
      dealCategory?: {
        name: string;
      };
      platForm?: {
        name: string;
      };
      productName?: string;
      actualPrice?: number;
    };
  }>;
  brandData: Array<{
    _id: string;
    name: string;
    image: string;
  }>;
}

export const getHomeData = async (): Promise<HomeData> => {
  try {
    const response = await getData("/user/getHomeData");
    return response.data;
  } catch (error) {
    console.error("Error fetching home data:", error);
    throw error;
  }
};

export const getDealDetail = async (id: string) => {
  try {
    const response = await getData(`/user/getDealDetail/${id}`);
    return response;
  } catch (error) {
    console.error("Error fetching deal detail:", error);
    throw error;
  }
};
</file>

<file path="src/services/apiService.ts">
"use client";

import axios from 'axios';

// API base URL
const BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'https://www.buyrapp.in';

// Create axios instance
const api = axios.create({
  baseURL: BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor
api.interceptors.request.use(
  (config) => {
    const userData = localStorage.getItem('userData');
    if (userData) {
      const token  = JSON.parse(userData);
      if (token?.user?.token) {
        config.headers.Authorization = `Bearer ${token?.user?.token}`;
      }
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      // Handle unauthorized access
      localStorage.removeItem('userData');
      window.location.href = '/auth/login';
    }
    return Promise.reject(error);
  }
);
// API functions
export const postData = async (endpoint: string, data: any, headers?: any) => {
  try {
    const response = await api.post(endpoint, data, { headers });
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const getData = async (endpoint: string, params?: any) => {
  try {
    const response = await api.get(endpoint, { params });
    return response.data;
  } catch (error) {
    throw error;
  }
};

// Local storage functions
export const setItem = (key: string, value: any) => {
  try {
    localStorage.setItem(key, JSON.stringify(value));
  } catch (error) {
    console.error('Error setting item in localStorage:', error);
  }
};

export const getItem = (key: string) => {
  try {
    const item = localStorage.getItem(key);
    return item ? JSON.parse(item) : null;
  } catch (error) {
    console.error('Error getting item from localStorage:', error);
    return null;
  }
};

export const removeItem = (key: string) => {
  try {
    localStorage.removeItem(key);
  } catch (error) {
    console.error('Error removing item from localStorage:', error);
  }
};

export default api;
</file>

<file path="src/styles/colors.ts">
const colors = {
  white: '#FFFFFF',
  black: '#000000',
  primary: '#4F46E5', // Indigo-600
  secondary: '#7C3AED', // Purple-600
  gray: {
    100: '#F3F4F6',
    200: '#E5E7EB',
    300: '#D1D5DB',
    400: '#9CA3AF',
    500: '#6B7280',
    600: '#4B5563',
    700: '#374151',
    800: '#1F2937',
    900: '#111827',
  },
  // Add more colors as needed
};

export default colors;
</file>

<file path="src/styles/responsiveSize.ts">
"use client";

// For web, we'll use Tailwind's responsive classes
// These functions are kept for compatibility with the React Native code

export const moderateScale = (size: number): number => {
  return size;
};

export const moderateVerticalScale = (size: number): number => {
  return size;
};

export const scale = (size: number): number => {
  return size;
};

export const height = (size: number): number => {
  return size;
};

export const width = (size: number): number => {
  return size;
};

export const textScale = (size: number): number => {
  return size;
};
</file>

<file path="src/utils/helperFunctions.ts">
"use client";

import { postData } from "@/services/apiService";

// For web, we'll use a simple toast notification system
// In a real implementation, you might want to use a library like react-toastify

let toastContainer: HTMLDivElement | null = null;

const createToastContainer = () => {
  if (typeof document === 'undefined') return null;
  
  if (!toastContainer) {
    toastContainer = document.createElement('div');
    toastContainer.className = 'fixed top-4 right-4 z-50 flex flex-col gap-2';
    document.body.appendChild(toastContainer);
  }
  
  return toastContainer;
};

const showToast = (message: string, type: 'success' | 'error') => {
  if (typeof document === 'undefined') return;
  
  const container = createToastContainer();
  if (!container) return;
  
  const toast = document.createElement('div');
  toast.className = `p-4 rounded-md shadow-md ${
    type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
  }`;
  toast.textContent = message;
  
  container.appendChild(toast);
  
  setTimeout(() => {
    toast.classList.add('opacity-0', 'transition-opacity', 'duration-300');
    setTimeout(() => {
      container.removeChild(toast);
    }, 300);
  }, 3000);
};

export const showSuccess = (message: string) => {
  showToast(message, 'success');
};

export const showError = (message: string) => {
  showToast(message, 'error');
}; 

export const uploadImage = async (
  image: {uri: string; name: string; type: string},
  dealId?: string,
) => {
  if (!image) {
    showError('Please select an image first');
    return;
  }

  const formData = new FormData();
  
  // For web, we need to convert the data URL to a Blob
  try {
    // If image.uri is a data URL, convert it to a Blob
    let blob;
    if (image.uri.startsWith('data:')) {
      const response = await fetch(image.uri);
      blob = await response.blob();
    } else {
      // If it's a file path or URL, fetch it first
      const response = await fetch(image.uri);
      blob = await response.blob();
    }
    
    formData.append('file', blob, image.name);
    
    if (dealId) {
      formData.append('dealId', dealId); // Add other fields if needed
    }
    
    const response = await postData(
      '/fileUpload',
      formData,
      {'Content-Type': 'multipart/form-data'},
    );
    
    if (response?.statusCode === 200) {
      return response;
    } else {
      return response?.data?.message;
    }
  } catch (error:any) {
    console.error(error,'testerrorerror');
    showError(error?.error||'An error occurred during upload');
  }
};
</file>

<file path="src/utils/notificationService.ts">
"use client";

// For web, we'll use the Web Push API
// In a real implementation, you might want to use a library like firebase/messaging

export const requestUserPermission = async (): Promise<string> => {
  try {
    // Check if the browser supports notifications
    if (!('Notification' in window)) {
      console.log('This browser does not support notifications');
      return '';
    }

    // Check if permission is already granted
    if (Notification.permission === 'granted') {
      console.log('Notification permission already granted');
      return 'web-push-token'; // In a real implementation, you would get a real token
    }

    // Request permission
    const permission = await Notification.requestPermission();
    
    if (permission === 'granted') {
      console.log('Notification permission granted');
      return 'web-push-token'; // In a real implementation, you would get a real token
    } else {
      console.log('Notification permission denied');
      return '';
    }
  } catch (error) {
    console.error('Error requesting notification permission:', error);
    return '';
  }
};
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    domains: [
      "firebasestorage.googleapis.com",
      "m.media-amazon.com",
      "images.flipkart.com",
      "images-eu.ssl-images-amazon.com",
      "images-na.ssl-images-amazon.com",
      "encrypted-tbn0.gstatic.com",
    ],
  },
};

module.exports = nextConfig;
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="src/app/(main)/about/page.tsx">
"use client";

import { useRouter } from "next/navigation";
import { FadeInSection } from "@/components/transitions";

// About Us HTML content
const aboutUs = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>BuyR</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 16px;
      font-size: 16px;
    }

    h1, h2, h3 {
      margin: 16px 0;
    }

    p {
      margin-bottom: 15px;
    }

    ul {
      list-style-type: none;
      padding: 0;
    }

    li {
      margin-bottom: 10px;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      body {
        font-size: 18px;
      }

      h1 {
        font-size: 24px;
      }
      h2, h3 {
        font-size: 16px;
      }
    }
  </style>
</head>
<body>
  <h1>About Us - BuyR</h1>
  <p>Welcome to BuyR, your one-stop destination for unbeatable offers and deals from the most popular brands. Our mission is to help you save money while shopping for your favourite products. At BuyR, we collaborate directly with brands to bring you exclusive cashback deals that you won't find anywhere else.</p>
  <p>Whether you're shopping for fashion, electronics, home goods, or anything in between, BuyR ensures you get the best value for your money. Our platform is designed to provide you with an effortless shopping experience, allowing you to track and receive cashback seamlessly. Join our community of savvy shoppers today and start saving with every purchase!</p>
  
  <h1>Contact Us</h1>
  <p>For any questions or concerns, please contact our support team at <span title="Click to copy">+91 83187 29508</span>.</p>
  </body>
</html>
`;

export default function AboutPage() {
  const router = useRouter();

  return (
    <div className="min-h-screen bg-gray-50 pt-4 pb-16">
      <div className="max-w-7xl mx-auto px-4">
        <FadeInSection delay={0.1}>
          <div className="bg-white rounded-xl shadow-sm overflow-hidden">
            <div className="p-4 border-b border-gray-100 flex items-center">
              <button 
                onClick={() => router.back()}
                className="p-2 rounded-full hover:bg-gray-100 transition-colors"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
              </button>
              <h1 className="text-xl font-semibold text-gray-800 ml-4">About Us</h1>
            </div>
            
            <div className="p-6">
              <div 
                className="prose max-w-none"
                dangerouslySetInnerHTML={{ __html: aboutUs }}
              />
            </div>
          </div>
        </FadeInSection>
      </div>
    </div>
  );
}
</file>

<file path="src/app/(main)/account/page.tsx">
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import Image from "next/image";
import Link from "next/link";
import { FadeInSection, AnimatedGrid } from "@/components/transitions";
import { useDispatch, useSelector } from "react-redux";
import { RootState, AppDispatch } from "@/redux/store";
import { onLogOut } from "@/redux/actions/auth";

// Define the account list item type
interface AccountListItem {
  id: number;
  title: string;
  onPress: () => void;
  leftIcon: string;
  topTitle?: string;
}

export default function AccountPage() {
  const router = useRouter();
  const dispatch = useDispatch<AppDispatch>();
  const [isLoading, setIsLoading] = useState(false);
  
  // Get user data from Redux store
  const userData = useSelector((state: RootState) => state.user.user) || {
    name: "John Doe",
    email: "john@example.com",
    avatar: "/images/avatar-placeholder.svg"
  };

  // Mock logout function - replace with actual API call
  const handleLogout = async () => {
    setIsLoading(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      dispatch(onLogOut());
      router.push("/auth/login");
    } catch (error) {
      console.error("Logout failed:", error);
    } finally {
      setIsLoading(false);
    }
  };

  // Define account menu items
  const listItems: AccountListItem[] = [
    {
      id: 1,
      title: "My Profile",
      onPress: () => router.push("/profile"),
      leftIcon: "/images/profile.svg",
      topTitle: "My Account"
    },
    {
      id: 2,
      title: "My Earnings",
      onPress: () => router.push("/earnings"),
      leftIcon: "/images/wallet.svg",
    },
    {
      id: 3,
      title: "Contact Us",
      onPress: () => router.push("/contact"),
      leftIcon: "/images/contact.svg",
      topTitle: "General"
    },
    {
      id: 4,
      title: "Join As Mediator",
      onPress: () => {
        if (window.confirm("Wanna Join Us As A Mediator?")) {
          window.open("https://wa.me/1234567890", "_blank");
        }
      },
      leftIcon: "/images/link.svg",
    },
    {
      id: 5,
      title: "Tutorial",
      onPress: () => router.push("/tutorial"),
      leftIcon: "/images/tutorial.svg",
    },
    {
      id: 6,
      title: "About",
      onPress: () => router.push("/about"),
      leftIcon: "/images/about.svg",
    },
    {
      id: 7,
      title: "Terms & Conditions",
      onPress: () => router.push("/terms"),
      leftIcon: "/images/terms.svg",
    },
    {
      id: 8,
      title: "Logout",
      onPress: () => {
        if (window.confirm("Are you sure you want to log out?")) {
          handleLogout();
        }
      },
      leftIcon: "/images/logout.svg",
    },
  ];

  // Group items by topTitle
  const groupedItems = listItems.reduce((acc, item) => {
    const group = item.topTitle || "Other";
    if (!acc[group]) {
      acc[group] = [];
    }
    acc[group].push(item);
    return acc;
  }, {} as Record<string, AccountListItem[]>);

  return (
    <div className="min-h-screen bg-gray-50 pt-4 pb-16">
      <div className="max-w-3xl mx-auto px-4">
        {/* User Profile Header */}
        <FadeInSection delay={0.1}>
          <div className="bg-white rounded-xl shadow-sm p-6 mb-6 flex items-center">
            <div className="relative w-16 h-16 rounded-full overflow-hidden mr-4 bg-gray-100">
              <Image
                src={userData.avatar || "/images/avatar-placeholder.svg"}
                alt="Profile"
                fill
                className="object-cover"
              />
            </div>
            <div>
              <h2 className="text-xl font-semibold text-gray-800">{userData.name}</h2>
              <p className="text-gray-500">{userData.email}</p>
            </div>
          </div>
        </FadeInSection>

        {/* Account Menu Items */}
        <AnimatedGrid className="space-y-6">
          {Object.entries(groupedItems).map(([group, items], groupIndex) => (
            <FadeInSection key={group} delay={0.1 + groupIndex * 0.05}>
              <div className="bg-white rounded-xl shadow-sm overflow-hidden">
                {group !== "Other" && (
                  <div className="px-6 py-3 bg-gray-50 border-b border-gray-100">
                    <h3 className="text-sm font-medium text-gray-500">{group}</h3>
                  </div>
                )}
                <div className="divide-y divide-gray-100">
                  {items.map((item) => (
                    <button
                      key={item.id}
                      onClick={item.onPress}
                      className="w-full flex items-center px-6 py-4 hover:bg-gray-50 transition-colors duration-150"
                    >
                      <div className="relative w-6 h-6 mr-4">
                        <Image
                          src={item.leftIcon}
                          alt={item.title}
                          fill
                          className="object-contain"
                        />
                      </div>
                      <span className="text-gray-700 font-medium">{item.title}</span>
                      <div className="ml-auto">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          className="h-5 w-5 text-gray-400"
                          viewBox="0 0 20 20"
                          fill="currentColor"
                        >
                          <path
                            fillRule="evenodd"
                            d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                            clipRule="evenodd"
                          />
                        </svg>
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            </FadeInSection>
          ))}
        </AnimatedGrid>

        {/* Loading Overlay */}
        {isLoading && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 flex flex-col items-center">
              <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500 mb-4"></div>
              <p className="text-gray-700">Logging out...</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
</file>

<file path="src/app/(main)/categories/page.tsx">
"use client";

import { FadeInSection, AnimatedGrid } from "@/components/transitions";
import { useGenericQuery } from "@/hooks/useQuery";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { useState, useEffect } from "react";

// Add interface for category data
interface Category {
  _id: string;
  name: string;
  image?: string;
}

interface CategoriesResponse {
  data: Category[];
  message: string;
  status: number;
}

export default function CategoriesPage() {
  const router = useRouter();
  const [currentPage, setCurrentPage] = useState(0);
  const [categoryData, setCategoryData] = useState<Category[]>([]);
  const [loadMore, setLoadMore] = useState(true);
  
  const { data: categoriesResponse, isLoading, isFetching, refetch } = useGenericQuery<CategoriesResponse>(
    ["categories", currentPage.toString()],
    "/user/dealCategory/getActiveDealCategories",
    { 
      offset: currentPage * 10, 
      limit: 10 
    }
  );

  // Update category data when response changes
  useEffect(() => {
    if (categoriesResponse?.data) {
      const data = categoriesResponse.data;
      setCategoryData(currentPage === 0 ? data : [...categoryData, ...data]);
      setLoadMore(data.length < 10 ? false : true);
    }
  }, [categoriesResponse]);

  // Load more when scrolling to bottom
  const handleLoadMore = () => {
    if (!isFetching && loadMore) {
      setCurrentPage(currentPage + 1);
    }
  };

  if (isLoading && categoryData.length === 0) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white p-4">
        <div className="animate-pulse space-y-6">
          <div className="h-12 bg-gray-200 rounded-xl w-1/3" />
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
            {[...Array(10)].map((_, i) => (
              <div key={i} className="h-32 bg-gray-200 rounded-xl" />
            ))}
          </div>
        </div>
      </div>
    );
  }

  if (categoryData.length === 0) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white p-4 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-800 mb-2">No Categories Found</h2>
          <p className="text-gray-600 mb-4">There are no categories available at the moment.</p>
          <button 
            onClick={() => router.push("/")}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
          >
            Go Back Home
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white">
      <div className="p-4 space-y-8 max-w-7xl mx-auto">
        <FadeInSection delay={0.1}>
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
            <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-blue-800 bg-clip-text text-transparent">
              All Categories
            </h1>
          </div>
        </FadeInSection>

        <FadeInSection delay={0.2}>
          <AnimatedGrid staggerDelay={0.05}>
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
              {categoryData.map((category: Category) => (
                <Link 
                  href={`/deals/dealCategory/${category?._id}`} 
                  key={category?._id}
                  className="bg-white rounded-xl p-4 shadow-sm hover:shadow-md transition-all duration-300 border border-gray-100 flex flex-col items-center justify-center text-center h-32 hover:border-blue-200 hover:bg-blue-50"
                >
                  <div className="w-12 h-12 rounded-full bg-blue-100 flex items-center justify-center mb-2">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                    </svg>
                  </div>
                  <span className="text-sm font-medium text-gray-500">{category?.name}</span>
                </Link>
              ))}
            </div>
          </AnimatedGrid>
        </FadeInSection>

        {loadMore && (
          <div className="flex justify-center mt-8">
            <button
              onClick={handleLoadMore}
              disabled={isFetching}
              className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
            >
              {isFetching ? (
                <>
                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Loading...
                </>
              ) : (
                'Load More'
              )}
            </button>
          </div>
        )}
      </div>
    </div>
  );
}
</file>

<file path="src/app/(main)/contact/page.tsx">
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { FadeInSection } from "@/components/transitions";
import GradientButton from "@/components/GradientButton";
import Image from "next/image";
import imagePath from "@/constants/imagePath";

export default function ContactPage() {
  const router = useRouter();
  const [copied, setCopied] = useState(false);

  const handlePhoneCall = () => {
    window.location.href = "tel:+918318729508";
  };

  const handleEmail = () => {
    window.location.href = "mailto:rohangill20.7@gmail.com";
  };

  const handleTextMessage = () => {
    window.location.href = "sms:+918318729508";
  };

  const handleWhatsApp = () => {
    window.open("https://wa.me/918318729508?text=I%20Have%20a%20query", "_blank");
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-indigo-50 pt-4 pb-16">
      <div className="max-w-4xl mx-auto px-4">
        <FadeInSection delay={0.1}>
          <div className="bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-100">
            <div className="p-5 border-b border-gray-100 flex items-center justify-between">
              <div className="flex items-center">
                <button 
                  onClick={() => router.back()}
                  className="p-2 rounded-full hover:bg-gray-100 transition-colors"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                  </svg>
                </button>
                <h1 className="text-2xl font-bold text-gray-800 ml-4">Contact Us</h1>
              </div>
              <div className="hidden md:block">
                <span className="text-sm text-gray-500">We're here to help!</span>
              </div>
            </div>
            
            <div className="p-8">
              <div className="flex flex-col md:flex-row items-center gap-8">
                <FadeInSection delay={0.2} className="w-full md:w-1/2">
                  <div className="relative">
                    <div className="absolute -top-4 -left-4 w-24 h-24 bg-indigo-100 rounded-full opacity-50"></div>
                    <div className="absolute -bottom-4 -right-4 w-32 h-32 bg-purple-100 rounded-full opacity-50"></div>
                    <div className="relative z-10">
                      <Image 
                        src={imagePath.contactUsImg} 
                        alt="Contact Us" 
                        width={400} 
                        height={300} 
                        className="mx-auto drop-shadow-lg"
                      />
                    </div>
                  </div>
                </FadeInSection>
                
                <FadeInSection delay={0.3} className="w-full md:w-1/2">
                  <div className="space-y-6">
                    <div className="mb-6">
                      <h2 className="text-xl font-semibold text-gray-800 mb-2">Get in Touch</h2>
                      <p className="text-gray-600">
                        Have questions or need assistance? We're here to help! Choose your preferred way to contact us.
                      </p>
                    </div>
                    
                    <div className="space-y-4">
                      <GradientButton
                        btnText="Get in Touch"
                        onClick={handlePhoneCall}
                        fullWidth
                        className="h-14 text-lg font-medium shadow-md hover:shadow-lg transition-all duration-300"
                      />
                      
                      <GradientButton
                        btnText="Drop Us an Mail"
                        onClick={handleEmail}
                        fullWidth
                        className="h-14 text-lg font-medium bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 shadow-md hover:shadow-lg transition-all duration-300"
                      />
                      
                      <GradientButton
                        btnText="Send a Message"
                        onClick={handleTextMessage}
                        fullWidth
                        className="h-14 text-lg font-medium bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 shadow-md hover:shadow-lg transition-all duration-300"
                      />
                      
                      <GradientButton
                        btnText="Chat on Whatsapp"
                        onClick={handleWhatsApp}
                        fullWidth
                        className="h-14 text-lg font-medium bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 shadow-md hover:shadow-lg transition-all duration-300"
                      />
                    </div>
                  </div>
                </FadeInSection>
              </div>
              
              <FadeInSection delay={0.4} className="mt-12 pt-8 border-t border-gray-100">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div className="bg-gray-50 p-6 rounded-xl text-center hover:bg-gray-100 transition-colors duration-300">
                    <div className="w-12 h-12 bg-indigo-100 rounded-full flex items-center justify-center mx-auto mb-4">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                      </svg>
                    </div>
                    <h3 className="font-medium text-gray-800 mb-1">Phone</h3>
                    <p className="text-gray-600">+91 83187 29508</p>
                  </div>
                  
                  <div className="bg-gray-50 p-6 rounded-xl text-center hover:bg-gray-100 transition-colors duration-300">
                    <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                      </svg>
                    </div>
                    <h3 className="font-medium text-gray-800 mb-1">Email</h3>
                    <p className="text-gray-600">rohangill20.7@gmail.com</p>
                  </div>
                  
                  <div className="bg-gray-50 p-6 rounded-xl text-center hover:bg-gray-100 transition-colors duration-300">
                    <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                      </svg>
                    </div>
                    <h3 className="font-medium text-gray-800 mb-1">WhatsApp</h3>
                    <p className="text-gray-600">Chat with us</p>
                  </div>
                </div>
              </FadeInSection>
            </div>
          </div>
        </FadeInSection>
      </div>
    </div>
  );
}
</file>

<file path="src/app/(main)/orderForm/[orderId]/page.tsx">
"use client";

import CustomForm from "@/components/CustomForm/CustomForm";
import { Field } from "@/components/CustomForm/types";
import { FadeInSection } from "@/components/transitions";
import usePostData from "@/hooks/usePostData";
import { useGenericQuery } from "@/hooks/useQuery";
import dayjs from "dayjs";
import timezone from "dayjs/plugin/timezone";
import utc from "dayjs/plugin/utc";
import { isEmpty } from "lodash";
import { useRouter } from "next/navigation";
import React, { useState } from "react";
import * as Yup from "yup";

// Extend dayjs with plugins
dayjs.extend(utc);
dayjs.extend(timezone);

// API endpoints
const ACTIVE_BRANDS = "/user/brand/getActiveBrands";
const GET_DEAL_BY_ID = "/user/deal/getDealsByIds";
const GET_ACTIVE_PLATFORM = "/user/platForm/getAllPlatForms";
const UPDATE_ORDER = "/user/order/update";
const FILE_UPLOAD = "/fileUpload";

// Define interfaces
interface Deal {
  _id: string;
  productName?: string;
  actualPrice?: number;
  finalCashBackForUser?: number;
  deliveryFee?: number;
  platForm?: {
    _id: string;
    name: string;
  };
  dealCategory?: {
    _id: string;
    name: string;
  };
  parentDealId?: {
    productName?: string;
    actualPrice?: number;
    finalCashBackForUser?: number;
    platForm?: {
      _id: string;
      name: string;
    };
    dealCategory?: {
      _id: string;
      name: string;
    };
    exchangeDealProducts?: any[];
  };
  exchangeDealProducts?: any[];
}

interface Brand {
  _id: string;
  name: string;
}

interface Platform {
  _id: string;
  name: string;
}

interface Category {
  _id: string;
  name: string;
}

interface FormValues {
  profileName: string;
  orderId: string;
  orderDate: Date;
  orderScreenShot: string;
  orderScreenShotUrl?: string;
  platformOptions: any;
  brandName: any;
  categoryName: any;
  productName: any[];
  deliveryFee: string;
  price: string;
  finalCashBackForUser: string;
}
interface OrderData {
  _id: string;
  reviewerName?: string;
  orderIdOfPlatForm?: string;
  deliveredScreenShot?: string;
  reviewScreenShot?: string;
  sellerFeedback?: string;
  reviewLink?: string;
  paymentId?: string;
  orderFormStatus?: string;
  exchangeDealProducts?: any;
  order_date?:string;
  orderScreenShot?:string;
  dealId?: {
    _id?: string;
    parentDealId?:any
    platForm?:any,
    dealCategory?:any;
    brand?:any
    productName?:string;
    actualPrice?:string;
    finalCashBackForUser:string
  };
  deliveryFee?:string
}
interface ApiResponse {
  success: boolean;
  message: string;
  data: OrderData;
}
export default function OrderFormPage({ params }: any) {
  const unwrappedParams = React.use(params) as { orderId: string };
  const { orderId } = unwrappedParams;
  const { data: orderData, isLoading: isOrderLoading } = useGenericQuery<ApiResponse>(
    ['orderDetail', orderId],
    `/user/order/getOrderById/${orderId}`
  );

  const router = useRouter();
  const [resetKey, setResetKey] = useState(0);
  const [state, setState] = useState({
    brandData: [] as Brand[],
    allBrandDeals: [] as Deal[],
    selectedDeal: [orderData?.data?.dealId?.parentDealId || orderData?.data?.dealId] as Deal[],
    selectedPlatform: {} as any,
    allCategories: [] as Category[],
    newDeals: [] as Deal[],
    selectedDealCategory: {} as any,
    selectedExchange: orderData?.data?.exchangeDealProducts?.[0]||'',
  });

  const { brandData, allBrandDeals, selectedDeal, selectedPlatform, allCategories, newDeals, selectedDealCategory, selectedExchange } = state;

  const updateState = (data: any) => setState(state => ({ ...state, ...data }));

  // Fetch platforms
  const { data: platformData, isPending: isPlatformLoading } = useGenericQuery<{ data: Platform[] }>(
    ["platforms"],
    GET_ACTIVE_PLATFORM
  );

  // Fetch brands
  const { mutate: getallBrands } = usePostData(ACTIVE_BRANDS, {
    onSuccess: async ({ data }: any) => {
      updateState({
        brandData: data || [],
      });
    },
    onError: async (error: any) => {
      console.error("Error fetching brands:", error);
    },
  });

  // Fetch deals by brand
  const { mutate: getDealsByBrand } = usePostData(GET_DEAL_BY_ID, {
    onSuccess: async ({ data }: any) => {
      const deals = data || [];
      let filteredDeals = deals.filter((item: Deal) => {
        const platformId = item?.parentDealId?.platForm?._id || item?.platForm?._id;
        return platformId === selectedPlatform?.id;
      });

      if (isEmpty(filteredDeals)) {
        updateState({ allBrandDeals: [] });
        console.error("No products available");
        return;
      }

      const allCategories = filteredDeals.map((item: Deal) => {
        return item?.parentDealId?.dealCategory || item?.dealCategory;
      });

      const uniqueCategories = Array.from(
        new Map(allCategories.map((category: any) => [category?._id, category])).values()
      );

      updateState({
        allBrandDeals: filteredDeals,
        allCategories: uniqueCategories,
      });
    },
    onError: async (error: any) => {
      console.error("Error fetching deals:", error);
    },
  });

  // Create order
  const { mutate: createOrder } = usePostData(UPDATE_ORDER, {
    onSuccess: async ({ data }: any) => {
      console.log("Order created:", data);
      updateState({
        brandData: [],
        allBrandDeals: [],
        selectedDeal: [],
        selectedPlatform: {},
      });

      // Show success message
      alert(data?.message || "Order Updated successfully");

      // Redirect to home
      setTimeout(() => {
        router.back();
      }, 400);
    },
    onError: async (error: any) => {
      console.error("Error creating order:", error);
      alert(error?.response?.data?.message || "Failed to create order");
    },
  });

  // Platform options
  const platformOptions = platformData?.data?.map((platform: Platform) => ({
    label: platform?.name,
    value: platform?.name,
    id: platform?._id,
  })) || [];

  // Brand options
  const brandOptions = brandData?.map((brand: Brand) => ({
    label: brand?.name,
    value: brand?.name,
    id: brand?._id,
  })) || [];

  // Deal options
  const dealOptions = !isEmpty(newDeals)
    ? newDeals.map((deal: Deal) => {
      const productName = deal?.parentDealId?.productName || deal?.productName || '';
      const actualPrice = deal?.parentDealId?.actualPrice || deal?.actualPrice || 0;
      const platformName = deal?.parentDealId?.platForm?.name || deal?.platForm?.name || '';
      const id = deal?._id || '';
      const finalCashBackForUser = deal?.finalCashBackForUser || 0;
      const exchangeDealProducts = deal?.parentDealId?.exchangeDealProducts || deal?.exchangeDealProducts || [];

      return {
        label: `${productName} (₹${actualPrice}) (${platformName})`,
        value: `${productName} (${platformName})`,
        id,
        price: actualPrice,
        finalCashBackForUser,
        exchangeDealProducts,
      };
    }) || []
    : allBrandDeals.map((deal: Deal) => {
      const productName = deal?.parentDealId?.productName || deal?.productName || '';
      const actualPrice = deal?.parentDealId?.actualPrice || deal?.actualPrice || 0;
      const platformName = deal?.parentDealId?.platForm?.name || deal?.platForm?.name || '';
      const id = deal?._id || '';
      const finalCashBackForUser = deal?.finalCashBackForUser || 0;
      const exchangeDealProducts = deal?.parentDealId?.exchangeDealProducts || deal?.exchangeDealProducts || [];

      return {
        label: `${productName} (₹${actualPrice}) (${platformName})`,
        value: `${productName} (${platformName})`,
        id,
        price: actualPrice,
        finalCashBackForUser,
        exchangeDealProducts,
      };
    }) || [];

  // Category options
  const categoryOptions = allCategories?.map((cat: Category) => ({
    label: cat?.name,
    value: cat?.name,
    id: cat?._id
  })) || [];

  // Validation schema
  const validationSchema = Yup.object().shape({
    profileName: Yup.string().required('Name is required'),
    orderId: Yup.string().required('Order ID is required'),
    orderDate: Yup.date().required('Order Date is required'),
    orderScreenShot: Yup.string().required('Order Screenshot is required'),
    price: Yup.number().required('Price is required'),
    finalCashBackForUser: Yup.number().required('Refund is required'),
    deliveryFee: Yup.number().optional()
  });


  // Handle form submission
  const handleSubmit = (values: { [key: string]: any }) => {

    createOrder({
      dealIds: values?.productName.map((item: any) => {
        return item?.id;
      }),
      reviewerName: values?.profileName,
      orderIdOfPlatForm: values?.orderId,
      orderScreenShot: values?.orderScreenShot,
      exchangeDealProducts: !!selectedExchange ? [selectedExchange] : [],
      orderDate: dayjs(values?.orderDate).format('YYYY-MM-DD'),
      deliveryFee: values?.deliveryFee.toString(),
      orderId: orderData?.data?._id
    });
  };

  // Check if platform is selected
  const checkPlatformSelected = (isopen: boolean, value: string) => {
    if (
      !isopen &&
      (value === 'brandName' || value === 'productName' || value === 'categoryName') &&
      isEmpty(selectedPlatform)
    ) {
      alert('Please select a platform first');
      return false;
    }

    if (!isopen && value === 'productName' && isEmpty(selectedDealCategory)) {
      alert('Please select deal category first');
      return false;
    }

    return true;
  };

  // Handle field changes
  const handleFieldChange = (
    field: string,
    value: any,
    setFieldValue: (field: string, value: any) => void,
    setFieldError: (field: string, error: string) => void
  ) => {
    if (field === 'platformOptions') {
      if (selectedPlatform?.id === value?.id) {
        updateState({ selectedPlatform: {} });
        setFieldValue('platformOptions', '');
        setFieldValue('productName', []);
        setFieldValue('brandName', '');
        setFieldValue('categoryName', '');
        updateState({ newDeals: [], brandOptions: [], allCategories: [], allBrandDeals: [], selectedDealCategory: {} });
        return true;
      } else {
        updateState({ selectedPlatform: value });
        getallBrands({ search: '', offset: 0, limit: 2000 });
        setFieldValue('productName', []);
        setFieldValue('brandName', '');
        setFieldValue('categoryName', '');
        updateState({ newDeals: [], brandOptions: [], allCategories: [], allBrandDeals: [], selectedDealCategory: {} });
      }
    }

    if (field === 'brandName') {
      setFieldValue('productName', []);
      setFieldValue('categoryName', '');
      updateState({ newDeals: [], allCategories: [], selectedDealCategory: {} });
      getDealsByBrand({
        type: 'brand',
        id: value?.id,
        offset: 0,
        limit: 200,
      });
    }

    if (field === 'categoryName') {
      let newDeals = allBrandDeals.filter((item: any) => item?.dealCategory?._id === value?.id);
      setFieldValue('productName', []);
      updateState({ newDeals: newDeals, selectedDeal: [], selectedDealCategory: value });
    }

    if (field === 'productName') {
      if (value.length > 0 && value[value.length - 1]?.exchangeDealProducts?.length > 0 && selectedDeal.length > 0) {
        alert('You cannot select exchange deal with other deals.');
        return true;
      }
      updateState({ selectedDeal: value });
    }
  };


  // Define form fields for CustomForm
  const formFields: Field[] = [
    {
      name: 'profileName',
      label: 'Profile name/ Reviewer name',
      type: 'text',
      placeholder: 'Enter your name',
      initialValue:orderData?.data?.reviewerName,
      disabled: false,
    },
    {
      name: 'orderId',
      label: 'Order ID',
      type: 'text',
      placeholder: 'Enter order ID',
      initialValue:orderData?.data?.orderIdOfPlatForm,
      disabled: false,
    },
    {
      name: 'orderDate',
      label: 'Order Date',
      type: 'date',
      maxDate: new Date(),
      initialValue:dayjs(orderData?.data?.order_date),
      disabled: false,
    },
    {
      name: 'orderScreenShot',
      label: 'Order Screenshot',
      type: 'image',
      subHeading: 'If you are taking more than one deal please make a collage of order screenshot. Image must be below 4 mb and in jpg/png format',
      initialValue:orderData?.data?.orderScreenShot,
      disabled: false,
    },
    {
      name: 'platformOptions',
      label: 'Platform',
      type: 'select',
      options: platformOptions,
      disabled: isPlatformLoading,
      initialValue:{
        label: orderData?.data?.dealId?.parentDealId?.platForm?.name || orderData?.data?.dealId?.platForm?.name,
        value: orderData?.data?.dealId?.parentDealId?.platForm?.name || orderData?.data?.dealId?.platForm?.name,
        id: orderData?.data?.dealId?.parentDealId?.platForm?._id || orderData?.data?.dealId?.platForm?._id,
      },
    },
    {
      name: 'brandName',
      label: 'Brand',
      type: 'select',
      options: brandOptions,
      disabled: isEmpty(selectedPlatform),
      initialValue: {
        label: orderData?.data?.dealId?.parentDealId?.brand?.name || orderData?.data?.dealId?.brand?.name,
        value: orderData?.data?.dealId?.parentDealId?.brand?.name || orderData?.data?.dealId?.brand?.name,
        id: orderData?.data?.dealId?.parentDealId?.brand?._id || orderData?.data?.dealId?.brand?._id,
      },
    },
    {
      name: 'categoryName',
      label: 'Deal Category',
      type: 'select',
      options: categoryOptions,
      disabled: isEmpty(selectedPlatform),
      initialValue: {
        label: orderData?.data?.dealId?.parentDealId?.dealCategory?.name || orderData?.data?.dealId?.dealCategory?.name,
        value: orderData?.data?.dealId?.parentDealId?.dealCategory?.name || orderData?.data?.dealId?.dealCategory?.name,
        id: orderData?.data?.dealId?.parentDealId?.dealCategory?._id || orderData?.data?.dealId?.dealCategory?._id,
      },
    },
    {
      name: 'productName',
      label: 'Product',
      type: 'multiselect',
      options: dealOptions,
      disabled: isEmpty(selectedDealCategory),
      subHeading: 'Hold Ctrl/Cmd to select multiple products',
      initialValue: [{
        label: orderData?.data?.dealId?.parentDealId?.productName || orderData?.data?.dealId?.productName,
        value: orderData?.data?.dealId?.parentDealId?.productName || orderData?.data?.dealId?.productName,
        id: orderData?.data?.dealId?._id,
        price: orderData?.data?.dealId?.parentDealId?.actualPrice || orderData?.data?.dealId?.actualPrice,
        finalCashBackForUser: orderData?.data?.dealId?.finalCashBackForUser,
      }],
    },
    {
      name: 'deliveryFee',
      label: 'Delivery Fee (in ₹)',
      type: 'numeric',
      placeholder: 'Enter delivery fee',
      disabled: false,
      initialValue:orderData?.data?.deliveryFee
    },
    {
      name: 'price',
      label: 'Price (in ₹)',
      type: 'text',
      disabled: true,
      initialValue: orderData?.data?.dealId?.actualPrice,
    },
    {
      name: 'finalCashBackForUser',
      label: 'Refund Amount (in ₹)',
      type: 'text',
      initialValue: orderData?.data?.dealId?.finalCashBackForUser,
      disabled: true,
    },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white pt-4 pb-16">
      <div className="max-w-4xl mx-auto px-4">
        <FadeInSection delay={0.1}>
          <div className="bg-white rounded-xl shadow-sm p-6 mb-6">
            <h1 className="text-2xl font-semibold text-gray-800 mb-4">Order Form</h1>
            <p className="text-gray-600 mb-6">
              Fill out the form below to submit your order details.
            </p>

            <CustomForm
              fields={formFields}
              validationSchema={validationSchema}
              onSubmit={handleSubmit}
              resetKey={resetKey}
              onReset={() => {
                updateState({ selectedPlatform: {}, selectedDeal: [] });
                setResetKey(prevKey => prevKey + 1);
              }}
              onInputValueChange={handleFieldChange}
              onDropdownOpen={checkPlatformSelected}
              submitButtonText="Submit Order"
              className="space-y-6"
            />
          </div>
        </FadeInSection>
      </div>
    </div>
  );
}
</file>

<file path="src/app/(main)/profile/page.tsx">
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { FadeInSection } from "@/components/transitions";
import Image from "next/image";
import imagePath from "@/constants/imagePath";
import { useSelector } from "react-redux";
import { RootState } from "@/redux/store";

export default function ProfilePage() {
  const router = useRouter();
  const userData = useSelector((state: RootState) => state.user.user) || {
    name: "John Doe",
    email: "john.doe@example.com",
    phoneNumber: "+91 98765 43210",
    currentAdminReference: {
      name: "Admin User"
    }
  };    
  

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-indigo-50 pt-4 pb-16">
      <div className="max-w-4xl mx-auto px-4">
        <FadeInSection delay={0.1}>
          <div className="bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-100">
            <div className="p-5 border-b border-gray-100 flex items-center">
              <button 
                onClick={() => router.back()}
                className="p-2 rounded-full hover:bg-gray-100 transition-colors"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
              </button>
              <h1 className="text-2xl font-bold text-gray-800 ml-4">My Profile</h1>
            </div>
            
            <div className="p-8">
              <FadeInSection delay={0.2}>
                <div className="flex flex-col items-center mb-8">
                  <div className="relative">
                    <div className="absolute -top-2 -left-2 w-24 h-24 bg-indigo-100 rounded-full opacity-50"></div>
                    <div className="absolute -bottom-2 -right-2 w-24 h-24 bg-purple-100 rounded-full opacity-50"></div>
                    <div className="relative z-10">
                      <div className="w-32 h-32 rounded-full overflow-hidden border-4 border-white shadow-lg">
                        <Image 
                          src={imagePath.userImg || "/images/user-placeholder.png"} 
                          alt="Profile" 
                          width={128} 
                          height={128} 
                          className="object-cover"
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </FadeInSection>
              
              <FadeInSection delay={0.3}>
                <div className="space-y-6 max-w-md mx-auto">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      NAME
                    </label>
                    <input
                      type="text"
                      value={userData?.name}
                      readOnly
                      className="w-full px-4 py-3 border border-gray-300 rounded-md bg-gray-50 text-gray-700 focus:outline-none"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      EMAIL
                    </label>
                    <input
                      type="email"
                      value={userData?.email}
                      readOnly
                      className="w-full px-4 py-3 border border-gray-300 rounded-md bg-gray-50 text-gray-700 focus:outline-none"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      PHONE NUMBER
                    </label>
                    <input
                      type="text"
                      value={userData?.phoneNumber}
                      readOnly
                      className="w-full px-4 py-3 border border-gray-300 rounded-md bg-gray-50 text-gray-700 focus:outline-none"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      CURRENT ADMIN
                    </label>
                    <input
                      type="text"
                      value={userData?.currentAdminReference?.name}
                      readOnly
                      className="w-full px-4 py-3 border border-gray-300 rounded-md bg-gray-50 text-gray-700 focus:outline-none"
                    />
                  </div>
                </div>
              </FadeInSection>
            </div>
          </div>
        </FadeInSection>
      </div>
    </div>
  );
}
</file>

<file path="src/app/(main)/terms/page.tsx">
"use client";

import { useRouter } from "next/navigation";
import { FadeInSection } from "@/components/transitions";

// Terms and Conditions HTML content
const termsCondition = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>BuyR</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 16px;
      font-size: 16px;
    }

    h1, h2, h3 {
      margin: 16px 0;
    }

    p {
      margin-bottom: 15px;
    }

    ul {
      list-style-type: none;
      padding: 0;
    }

    li {
      margin-bottom: 10px;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      body {
        font-size: 18px;
      }

      h1 {
        font-size: 24px;
      }
      h2, h3 {
        font-size: 16px;
      }
    }
  </style>
</head>
<body>
  <h1>Terms and Conditions</h1>
  <h3>1. Introduction</h3>
  <p>Welcome to BuyR. These Terms and Conditions ("Terms") govern your use of our app and services. By using BuyR, you agree to these Terms. If you do not agree with any part of these Terms, please do not use our app.</p>

  <h3>2. Services</h3>
  <p>BuyR provides offers and cashback deals on products from various brands. These deals are time-limited and subject to change without notice.</p>

  <h3>3. Eligibility</h3>
  <p>To use BuyR, you must be at least 18 years old or have parental consent if you are a minor.</p>

  <h3>4. Cashback Eligibility</h3>
  <ul>
    <li>Cashback will be awarded only when all specified terms and conditions are met.</li>
    <li>Orders must be placed within the campaign period to qualify for cashback.</li>
    <li>The order form must be completed correctly after purchase.</li>
    <li>Cashback will be tracked within 24-48 hours of the transaction.</li>
    <li>Customers can raise a ticket for any missing cashback.</li>
  </ul>

  <h3>5. Cashback Confirmation and Payout</h3>
  <ul>
    <li>Cashback will be confirmed within 15-30 days after the refund form is filled.</li>
    <li>Customers must provide accurate information on the refund form. Incorrect forms will result in the forfeiture of cashback.</li>
  </ul>

  <h3>6. Rights and Limitations</h3>
  <ul>
    <li>BuyR reserves the right to cancel orders or cashback if terms are not followed.</li>
    <li>BuyR is not responsible for any loss resulting from incorrect information provided by the customer.</li>
  </ul>

  <h3>7. Modifications</h3>
  <p>BuyR reserves the right to modify these Terms at any time. Continued use of the app after any changes implies acceptance of the new Terms.</p>

  <h3>8. Contact Us</h3>
  <p>For any questions or concerns, please contact our support team at <span title="Click to copy">+91 83187 29508</span>.</p>
  </body>
</html>
`;

export default function TermsPage() {
  const router = useRouter();

  return (
    <div className="min-h-screen bg-gray-50 pt-4 pb-16">
      <div className="max-w-7xl mx-auto px-4">
        <FadeInSection delay={0.1}>
          <div className="bg-white rounded-xl shadow-sm overflow-hidden">
            <div className="p-4 border-b border-gray-100 flex items-center">
              <button 
                onClick={() => router.back()}
                className="p-2 rounded-full hover:bg-gray-100 transition-colors"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
              </button>
              <h1 className="text-xl font-semibold text-gray-800 ml-4">Terms & Conditions</h1>
            </div>
            
            <div className="p-6">
              <div 
                className="prose max-w-none"
                dangerouslySetInnerHTML={{ __html: termsCondition }}
              />
            </div>
          </div>
        </FadeInSection>
      </div>
    </div>
  );
}
</file>

<file path="src/app/(main)/transactions/page.tsx">
'use client';

import TransactionCard from '@/components/transactions/TransactionCard';
import { AnimatedGrid, FadeInSection } from '@/components/transitions';
import usePostData from '@/hooks/usePostData';
import { useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';

interface Transaction {
  _id: string;
  orderIdOfPlatForm: string;
  dealId: {
    _id: any;
    parentDealId?: {
      platForm?: {
        name: string;
      };
      dealCategory?: {
        name: string;
      };
      productName: string;
    };
    platForm?: {
      name: string;
    };
    dealCategory?: {
      name: string;
    };
    productName: string;
    finalCashBackForUser: number;
  };
  paymentStatus: string;
}

interface OrderListResponse {
  orders: Transaction[];
  totalCount?: number;
}

export default function TransactionsPage() {
  const router = useRouter();
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [currentPage, setCurrentPage] = useState(0);
  const [loadMore, setLoadMore] = useState(false);

  const { mutate: fetchOrders, isLoading } = usePostData<OrderListResponse>(
    '/user/order/getOrderList',
    {
      onSuccess: (data) => {
        setTransactions(prev => 
          currentPage === 0 ? data.orders : [...prev, ...data.orders]
        );
        setLoadMore(data.orders.length >= 10);
      },
      onError: (error) => {
        console.error('Error fetching transactions:', error);
        setLoadMore(false);
      }
    }
  );

  useEffect(() => {
    fetchOrders({
      offset: Number(currentPage+1) * 10,
      limit: 10,
    });
  }, [currentPage, fetchOrders]);

  const handleLoadMore = () => {
    if (loadMore) {
      setCurrentPage(prev => prev + 1);
    }
  };

  const handleTransactionClick = (transaction: Transaction) => {
   router.push(`/orders/${transaction?._id}?dealId=${transaction.dealId._id}`);
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-purple-50 to-white">
      <FadeInSection>
        <div className="max-w-4xl mx-auto px-4 py-8">
          <div className="flex items-center mb-6">
            <button 
              onClick={() => router.back()}
              className="p-2 rounded-full hover:bg-gray-100 transition-colors"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
            </button>
            <h1 className="text-2xl font-bold text-gray-800 ml-4">My Transactions</h1>
          </div>

          {isLoading && currentPage === 0 ? (
            <div className="flex justify-center items-center h-64">
              <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500"></div>
            </div>
          ) : transactions.length === 0 ? (
            <div className="bg-white rounded-xl shadow-sm p-8 text-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 mx-auto text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <h3 className="text-xl font-medium text-gray-700 mb-2">No Transactions Found</h3>
              <p className="text-gray-500">You haven't made any transactions yet.</p>
            </div>
          ) : (
            <AnimatedGrid staggerDelay={0.05}>
              {transactions.map((transaction, index) => (
                <TransactionCard 
                  key={index} 
                  transaction={transaction} 
                  onClick={() => handleTransactionClick(transaction)} 
                />
              ))}
            </AnimatedGrid>
          )}

          {loadMore && !isLoading && (
            <div className="flex justify-center mt-6">
              <button 
                onClick={handleLoadMore}
                className="px-4 py-2 bg-purple-100 text-purple-700 rounded-lg hover:bg-purple-200 transition-colors"
              >
                Load More
              </button>
            </div>
          )}
        </div>
      </FadeInSection>
    </div>
  );
}
</file>

<file path="src/app/page.tsx">
"use client";

import { RootState } from "@/redux/store";
import { useRouter } from "next/navigation";
import { useEffect } from "react";
import { useSelector } from "react-redux";
import Image from "next/image";
import Link from "next/link";
import { motion } from "framer-motion";

export default function HomePage() {
  const router = useRouter();
  const isAuthenticated = useSelector(
    (state: RootState) =>
      (state as { user: { isAuthenticated: boolean } }).user.isAuthenticated
  );

  useEffect(() => {
    if (isAuthenticated) {
      router.push("/home");
    }
  }, [router]);

  console.log(process.env.NEXT_PUBLIC_API_URL, "asdf");

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-gray-100">
      {/* Header */}
      <header className="fixed w-full backdrop-blur-md bg-white/80 shadow-sm z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5 }}
              className="flex items-center"
            >
              <img
                src="/images/logo.png"
                alt="BuyR Logo"
                width={50}
                height={50}
                className="mr-2"
              />
            
            </motion.div>
            <nav className="hidden md:flex space-x-8">
              {[
                { label: "Features", link: "#features" },
                { label: "How It Works", link: "#how-it-works" },
                { label: "Download", link: "#download" },
                { label: "Tutorials", link: "/tutorial" },
                { label: "Login", link: "/auth/login" },
              ].map((item, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: -20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5, delay: index * 0.1 }}
                >
                  <Link
                    href={item?.link}
                    className="text-gray-600 hover:text-blue-600 transition-colors duration-300 relative group"
                  >
                    {item?.label}
                    <span className="absolute bottom-0 left-0 w-0 h-0.5 bg-blue-600 transition-all duration-300 group-hover:w-full"></span>
                  </Link>
                </motion.div>
              ))}
            </nav>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="pt-32 pb-20 bg-gradient-to-br from-blue-500 via-indigo-500 to-purple-600 text-white relative overflow-hidden">
        <div className="absolute inset-0 bg-[url('/images/grid.svg')] opacity-10"></div>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center relative">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
          >
            <h2 className="text-4xl md:text-6xl font-bold mb-6 bg-clip-text text-transparent bg-gradient-to-r from-white to-blue-100">
              Get Paid for Your Reviews
            </h2>
            <p className="text-xl max-w-3xl mx-auto mb-8 text-blue-50">
              Shop, review, and earn money back. Join thousands of smart
              shoppers who get refunds for their honest product ratings and
              reviews.
            </p>
            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
              <Link
                href={"#"}
                download
                className="inline-block bg-white text-blue-600 font-bold py-4 px-8 rounded-full transition-all duration-300 hover:shadow-lg hover:shadow-blue-500/30"
              >
                Download Now
              </Link>
            </motion.div>
          </motion.div>
        </div>
      </section>

      {/* Features Section */}
      <section id="features" className="py-20 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.h2
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            viewport={{ once: true }}
            className="text-3xl font-bold text-center text-gray-800 mb-12"
          >
            Why Choose BuyR
          </motion.h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {[
              {
                icon: "💰",
                title: "Earn Real Money",
                description:
                  "Get actual refunds transferred directly to your account after completing reviews.",
              },
              {
                icon: "🛒",
                title: "Shop Quality Products",
                description:
                  "Browse through hundreds of products from trusted sellers and brands.",
              },
              {
                icon: "⭐",
                title: "Simple Process",
                description:
                  "Our streamlined system makes it easy to buy, review, and claim your refund.",
              },
              {
                icon: "🔒",
                title: "Secure Payments",
                description:
                  "Your financial information is protected with bank-grade security.",
              },
              {
                icon: "📱",
                title: "Mobile Friendly",
                description:
                  "Shop and submit reviews from anywhere using our intuitive mobile app.",
              },
              {
                icon: "🔔",
                title: "Instant Notifications",
                description:
                  "Get alerts for new deals and refund status updates.",
              },
            ].map((feature, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
                viewport={{ once: true }}
                whileHover={{ y: -10 }}
                className="bg-white rounded-xl p-8 text-center shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100"
              >
                <div className="text-4xl mb-4 transform hover:scale-110 transition-transform duration-300">
                  {feature.icon}
                </div>
                <h3 className="text-xl font-semibold mb-3 text-gray-800">
                  {feature.title}
                </h3>
                <p className="text-gray-600">{feature.description}</p>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* How It Works Section */}
      <section
        id="how-it-works"
        className="py-20 bg-gradient-to-b from-gray-50 to-white"
      >
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.h2
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            viewport={{ once: true }}
            className="text-3xl font-bold text-center text-gray-800 mb-12"
          >
            How It Works
          </motion.h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {[
              {
                number: "1",
                title: "Browse Deals",
                description:
                  "Find products with review rewards that interest you on our platform.",
              },
              {
                number: "2",
                title: "Purchase Product",
                description:
                  "Buy the product through our secure platform with your preferred payment method.",
              },
              {
                number: "3",
                title: "Submit Review",
                description:
                  "After receiving the product, leave an honest review or rating as requested.",
              },
              {
                number: "4",
                title: "Claim Refund",
                description:
                  "Fill out the refund form, and get your money back quickly and easily.",
              },
            ].map((step, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
                viewport={{ once: true }}
                className="text-center relative"
              >
                <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-indigo-600 text-white rounded-full flex items-center justify-center text-2xl font-bold mx-auto mb-4 shadow-lg">
                  {step.number}
                </div>
                <h3 className="text-xl font-semibold mb-3 text-gray-800">
                  {step.title}
                </h3>
                <p className="text-gray-600">{step.description}</p>
                {index < 3 && (
                  <div className="hidden lg:block absolute top-8 left-full w-full h-0.5 bg-gradient-to-r from-blue-500 to-indigo-600 -ml-4"></div>
                )}
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* Download Section */}
      <section
        id="download"
        className="py-20 bg-gradient-to-br from-blue-500 via-indigo-500 to-purple-600 text-white relative overflow-hidden"
      >
        <div className="absolute inset-0 bg-[url('/images/grid.svg')] opacity-10"></div>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center relative">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            viewport={{ once: true }}
          >
            <h2 className="text-3xl font-bold mb-6">Download Our App</h2>
            <p className="text-xl max-w-2xl mx-auto mb-8 text-blue-50">
              Start earning rewards for your reviews today!
            </p>
            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
              <a
                href={process.env.NEXT_PUBLIC_API_URL + "buyr.apk"}
                download
                className="inline-block bg-white text-blue-600 font-semibold py-3 px-6 rounded-lg transition-all duration-300 hover:shadow-lg hover:shadow-blue-500/30"
              >
                Download for Android
              </a>
            </motion.div>
          </motion.div>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-gray-900 text-white py-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {[
              {
                title: "Company",
                links: ["About Us", "Careers", "Press", "Blog"],
              },
              {
                title: "Support",
                links: ["Help Center", "Contact Us", "FAQs", "Community"],
              },
              {
                title: "Legal",
                links: [
                  "Privacy Policy",
                  "Terms of Service",
                  "Cookie Policy",
                  "Security",
                ],
              },
              {
                title: "Connect",
                links: ["Facebook", "Twitter", "Instagram", "LinkedIn"],
              },
            ].map((column, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
                viewport={{ once: true }}
              >
                <h3 className="text-lg font-semibold mb-4 text-blue-400">
                  {column.title}
                </h3>
                <ul className="space-y-2">
                  {column.links.map((link, linkIndex) => (
                    <li key={linkIndex}>
                      <a
                        href="#"
                        className="text-gray-300 hover:text-white transition-colors duration-300 relative group"
                      >
                        {link}
                        <span className="absolute bottom-0 left-0 w-0 h-0.5 bg-blue-400 transition-all duration-300 group-hover:w-full"></span>
                      </a>
                    </li>
                  ))}
                </ul>
              </motion.div>
            ))}
          </div>
          <motion.div
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
            viewport={{ once: true }}
            className="mt-12 pt-8 border-t border-gray-800 text-center"
          >
            <p className="text-gray-400">
              &copy; 2024 BuyR. All rights reserved.
            </p>
          </motion.div>
        </div>
      </footer>
    </div>
  );
}
</file>

<file path="src/components/auth/Login.tsx">
"use client";

import usePostData from '@/hooks/usePostData';
import { showError, showSuccess } from '@/utils/helperFunctions';
import Image from 'next/image';
import { useRouter } from 'next/navigation';
import { useState } from 'react';
import GradientButton from '../GradientButton';
import PhoneNumberInput from '../PhoneNumberInput';
import TextContainer from '../TextContainer';
import { styles } from './styles';
import { useAuth } from '@/hooks/useAuth';

const Login = () => {
  const router = useRouter();
  const { login } = useAuth();
  const [activeTab, setActiveTab] = useState('phone');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [referenceId, setReferenceId] = useState('');
  const [errors, setErrors] = useState({
    phoneNumber: '',
    email: '',
    password: '',
    referenceId: ''
  });

  const { mutate: loginApi, isLoading } = usePostData<{ user: any; token: string }>('/auth/signIn', {
    onSuccess: (data) => {
      login({...data.user, token: data.token});
      showSuccess('Login successful');
      router.push('/');
    },
    onError: (error: any) => {
      showError(error?.response?.data?.message || error.message || 'Login failed');
    },
  });

  const validateForm = () => {
    const newErrors = {
      phoneNumber: '',
      email: '',
      password: '',
      referenceId: ''
    };
    let isValid = true;
    if (activeTab === 'phone') {
      if (!phoneNumber) {
        newErrors.phoneNumber = 'Phone number is required';
        isValid = false;
      } else if (phoneNumber.length < 10) {
        newErrors.phoneNumber = 'Phone number must be at least 10 digits';
        isValid = false;
      }
    } else {
      if (!email) {
        newErrors.email = 'Email is required';
        isValid = false;
      } else if (!/\S+@\S+\.\S+/.test(email)) {
        newErrors.email = 'Please enter a valid email address';
        isValid = false;
      }
    }
    if (!password) {
      newErrors.password = 'Password is required';
      isValid = false;
    } else if (password.length < 6) {
      newErrors.password = 'Password must be at least 6 characters';
      isValid = false;
    }
    if (!referenceId) {
      newErrors.referenceId = 'Reference ID is required';
      isValid = false;
    }
    setErrors(newErrors);
    return isValid;
  };

  const handleLogin = () => {
    if (!validateForm()) {
      return;
    }
    loginApi({
      ...(activeTab === 'phone' ? { phoneNumber } : { email }),
      password,
      currentAdminReference: referenceId,
    });
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-orange-50 to-white py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8 bg-white/90 p-8 rounded-2xl shadow-2xl border border-orange-100">
        <div className="flex flex-col items-center mb-4">
          <Image src="/images/logo.png" alt="BuyR Logo" width={90} height={90} className="mb-2 rounded-lg" priority />
          <TextContainer text="Welcome Back" style={styles.logintxt} />
          <TextContainer text="Sign in to continue" style={styles.welcomeBack} />
        </div>

        <div className="flex justify-center gap-2 mb-6">
          <button
            className={`px-4 py-2 rounded-full font-semibold transition-colors duration-200 ${activeTab === 'phone' ? 'bg-orange-500 text-white shadow' : 'bg-gray-100 text-gray-700'}`}
            onClick={() => setActiveTab('phone')}
          >
            Phone
          </button>
          <button
            className={`px-4 py-2 rounded-full font-semibold transition-colors duration-200 ${activeTab === 'email' ? 'bg-orange-500 text-white shadow' : 'bg-gray-100 text-gray-700'}`}
            onClick={() => setActiveTab('email')}
          >
            Email
          </button>
        </div>

        <div className="space-y-4">
          {activeTab === 'phone' ? (
            <div>
              <PhoneNumberInput
                value={phoneNumber}
                onChangeText={setPhoneNumber}
                maxLength={10}
                placeholder="Enter phone number"
              />
              {errors.phoneNumber && (
                <p className="mt-1 text-sm text-red-600">{errors.phoneNumber}</p>
              )}
            </div>
          ) : (
            <div>
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Email"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-400 text-black placeholder:text-gray-500"
              />
              {errors.email && (
                <p className="mt-1 text-sm text-red-600">{errors.email}</p>
              )}
            </div>
          )}

          <div className="relative">
            <input
              type={showPassword ? 'text' : 'password'}
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Password"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-400 text-black placeholder:text-gray-500"
            />
            <button
              type="button"
              onClick={() => setShowPassword(!showPassword)}
              className="absolute right-3 top-2 text-gray-500"
            >
              {showPassword ? 'Hide' : 'Show'}
            </button>
            {errors.password && (
              <p className="mt-1 text-sm text-red-600">{errors.password}</p>
            )}
          </div>

          <div>
            <input
              type="text"
              value={referenceId}
              onChange={(e) => setReferenceId(e.target.value)}
              placeholder="Reference ID *"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-400 text-black placeholder:text-gray-500"
            />
            {errors.referenceId && (
              <p className="mt-1 text-sm text-red-600">{errors.referenceId}</p>
            )}
          </div>
        </div>

        <button
          onClick={() => router.push('/forgot-password')}
          className="block ml-auto text-sm text-orange-600 hover:underline mt-2 mb-4"
        >
          Forgot Password?
        </button>

        <GradientButton
          onPress={handleLogin}
          btnText="Login"
          indicator={isLoading}
        />

        <div className="flex items-center my-6">
          <div className="flex-grow h-px bg-gray-200" />
          <span className="mx-4 text-gray-400">OR</span>
          <div className="flex-grow h-px bg-gray-200" />
        </div>

        <div className="text-center">
          <span className="text-gray-600">Don't have an account? </span>
          <button
            onClick={() => router.push('/auth/signup')}
            className="text-orange-600 font-semibold hover:underline"
          >
            Sign Up
          </button>
        </div>
      </div>
    </div>
  );
};

export default Login;
</file>

<file path="src/components/auth/SignupForm.tsx">
"use client";

import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { useSignUp } from '@/hooks/useAuth';
import { useRouter } from 'next/navigation';

const schema = yup.object({
  email: yup.string().email('Invalid email').required('Email is required'),
  password: yup.string().required('Password is required').min(6, 'Password must be at least 6 characters'),
  confirmPassword: yup.string()
    .oneOf([yup.ref('password')], 'Passwords must match')
    .required('Confirm password is required'),
  phoneNumber: yup.string().matches(/^[0-9]{10}$/, 'Phone number must be 10 digits').required('Phone number is required'),
});

type SignupFormData = yup.InferType<typeof schema>;

export default function SignupForm() {
  const router = useRouter();
  const { register, handleSubmit, formState: { errors } } = useForm<SignupFormData>({
    resolver: yupResolver(schema),
  });

  const { mutate: signUp, isPending } = useSignUp();

  const onSubmit = (data: SignupFormData) => {
    signUp(
      { email: data.email, password: data.password },
      {
        onSuccess: () => {
          router.push('/dashboard');
        },
      }
    );
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Create your account
          </h2>
        </div>
        <form className="mt-8 space-y-6" onSubmit={handleSubmit(onSubmit)}>
          <div className="rounded-md shadow-sm -space-y-px">
            <div>
              <label htmlFor="email" className="sr-only">
                Email address
              </label>
              <input
                {...register('email')}
                type="email"
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-gray-100 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                placeholder="Email address"
              />
              {errors.email && (
                <p className="text-red-500 text-xs mt-1">{errors.email.message}</p>
              )}
            </div>
            <div>
              <label htmlFor="phoneNumber" className="sr-only">
                Phone Number
              </label>
              <input
                {...register('phoneNumber')}
                type="tel"
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-gray-100 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                placeholder="Phone Number"
              />
              {errors.phoneNumber && (
                <p className="text-red-500 text-xs mt-1">{errors.phoneNumber.message}</p>
              )}
            </div>
            <div>
              <label htmlFor="password" className="sr-only">
                Password
              </label>
              <input
                {...register('password')}
                type="password"
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-gray-100 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                placeholder="Password"
              />
              {errors.password && (
                <p className="text-red-500 text-xs mt-1">{errors.password.message}</p>
              )}
            </div>
            <div>
              <label htmlFor="confirmPassword" className="sr-only">
                Confirm Password
              </label>
              <input
                {...register('confirmPassword')}
                type="password"
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-gray-100 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                placeholder="Confirm Password"
              />
              {errors.confirmPassword && (
                <p className="text-red-500 text-xs mt-1">{errors.confirmPassword.message}</p>
              )}
            </div>
          </div>

          <div>
            <button
              type="submit"
              disabled={isPending}
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              {isPending ? 'Creating account...' : 'Sign up'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
</file>

<file path="src/components/CustomForm/CustomDatePicker.tsx">
"use client";

import React from 'react';
import { Field as FormField } from './types';
import dayjs from 'dayjs';

interface CustomDatePickerProps {
  field: FormField;
  value: string | Date;
  onChange: (value: string) => void;
  error?: string;
}

const CustomDatePicker: React.FC<CustomDatePickerProps> = ({
  field,
  value,
  onChange,
  error
}) => {
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    onChange(e.target.value);
  };

  return (
    <div>
      <label htmlFor={field.name} className="block text-sm font-medium text-black mb-1">
        {field.label}
      </label>
      {field.subHeading && (
        <p className="text-sm text-gray-500 mb-2">{field.subHeading}</p>
      )}
      <input
        type="date"
        id={field.name}
        name={field.name}
        value={typeof value === 'string' ? value : dayjs(value).format('YYYY-MM-DD')}
        onChange={handleChange}
        max={field.maxDate ? dayjs(field.maxDate).format('YYYY-MM-DD') : undefined}
        min={field.minDate ? dayjs(field.minDate).format('YYYY-MM-DD') : undefined}
        disabled={field.disabled}
        className="w-full px-4 py-2 border text-black placeholder:text-gray-500 border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 
          disabled:bg-gray-100 disabled:cursor-not-allowed"
      />
      {error && (
        <p className="text-red-500 text-sm mt-1">{error}</p>
      )}
    </div>
  );
};

export default CustomDatePicker;
</file>

<file path="src/components/CustomForm/CustomForm.tsx">
"use client";

import { Form, Formik, FormikProps } from 'formik';
import React, { useState } from 'react';
import { CustomDatePicker, CustomImageUpload, CustomInput, CustomSelect } from './index';
import { CustomFormProps, Field as FormField } from './types';
import { uploadImage } from '@/utils/helperFunctions';

const CustomForm: React.FC<CustomFormProps> = ({
  fields,
  validationSchema,
  onSubmit,
  resetKey,
  onReset,
  onInputValueChange,
  onDropdownOpen,
  submitButtonText = 'Submit',
  showReset = true,
  className = '',
  dealId = '',
  showSuccess = (message: string) => { },
}) => {
  const [uploadingImage, setUploadingImage] = useState<{ fieldName: string } | null>(null);
  const sumPrices = (allItems: object[], type: string) => {
    return allItems.reduce((total: any, item: any) => {
      if (type == 'price') {
        return total + Number(item.price);
      } else {
        return total + Number(item.finalCashBackForUser);
      }
    }, 0);
  };
  const initialValues = fields.reduce((acc, field) => {
    acc[field.name] = field.initialValue || '';
    return acc;
  }, {} as { [key: string]: any });

  const handleInputChange = (
    fieldName: string,
    value: any,
    setFieldValue: (field: string, value: any) => void,
    setFieldError: (field: string, error: string) => void,
    resetField?: (field: string) => void,
    fileName?: string
  ) => {
    if (onInputValueChange) {
      const shouldPreventDefault = onInputValueChange(fieldName, value, setFieldValue, setFieldError);
      if (shouldPreventDefault) {
        return;
      }
    }

    if (fieldName === 'productName') {
      let priceValue = sumPrices(value, 'price');
      let cashBackValue = sumPrices(value, 'cashback');
      setFieldValue('price', !!priceValue ? priceValue.toString() : '');
      setFieldValue('finalCashBackForUser', !!cashBackValue ? cashBackValue.toString() : '');
    } else if (fieldName === 'brandName') {
      setFieldValue('price', '');
      setFieldValue('finalCashBackForUser', '');
    }
    if (
      (fieldName === 'deliveredScreenshot') ||
      (fieldName === 'reviewScreenshot') ||
      (fieldName === 'sellerFeedback') ||
      (fieldName === 'orderScreenShot')
    ) {
      const confirmUpload = window.confirm('Are you sure you want to upload this image?');

      if (!confirmUpload) {
        if (resetField) resetField(fieldName);
        return;
      }

      const uploadImageAsync = async () => {
        setUploadingImage({ fieldName });
        try {
          const res = await uploadImage(
            { uri: value, name: fileName || '', type: 'jpeg/png' },
            dealId,
          );
          if (!!res) {
            setFieldValue(fieldName, res?.data);
            showSuccess(res?.message);
          }
        } catch (error) {
          console.error('Error uploading image:', error);
        } finally {
          setUploadingImage(null);
        }
      };

      uploadImageAsync();
      return;
    }

    setFieldValue(fieldName, value);
  };

  const renderField = (
    field: FormField,
    formikProps: FormikProps<{ [key: string]: any }>
  ) => {
    const { setFieldValue, setFieldError, values, touched, errors } = formikProps;

    switch (field.type) {
      case 'text':
      case 'email':
      case 'password':
      case 'numeric':
        return (
          <CustomInput
            key={field.name}
            field={field}
            value={values[field.name]}
            onChange={(value) => handleInputChange(field.name, value, setFieldValue, setFieldError)}
            error={touched[field.name] && errors[field.name] ? errors[field.name] as string : undefined}
          />
        );

      case 'select':
      case 'multiselect':
        return (
          <CustomSelect
            key={field.name}
            field={field}
            value={values[field.name]}
            onChange={(value) => handleInputChange(field.name, value, setFieldValue, setFieldError)}
            error={touched[field.name] && errors[field.name] ? errors[field.name] as string : undefined}
            onDropdownOpen={(isOpen) => onDropdownOpen?.(isOpen, field.name)}
          />
        );

      case 'image':
        return (
          <CustomImageUpload
            key={field.name}
            field={field}
            value={values[field.name]}
            onChange={(value, fileName) => {
              const resetFieldFn = (fieldName: string) => {
                setFieldValue(fieldName, '');
              };
              handleInputChange(field.name, value, setFieldValue, setFieldError, resetFieldFn, fileName);
            }}
            error={touched[field.name] && errors[field.name] ? errors[field.name] as string : undefined}
            isUploading={uploadingImage?.fieldName === field.name}
          />
        );

      case 'date':
        return (
          <CustomDatePicker
            key={field.name}
            field={field}
            value={values[field.name]}
            onChange={(value) => handleInputChange(field.name, value, setFieldValue, setFieldError)}
            error={touched[field.name] && errors[field.name] ? errors[field.name] as string : undefined}
          />
        );

      default:
        return null;
    }
  };

  return (
    <Formik
      initialValues={initialValues}
      validationSchema={validationSchema}
      onSubmit={async (values, { setSubmitting }) => {
        try {
          onSubmit(values);
        } catch (error) {
          console.error('Submit error:', error);
        } finally {
          setSubmitting(false);
        }
      }}
      key={resetKey}
      enableReinitialize
    >
      {(formikProps) => (
        <Form className={`space-y-6 ${className}`}>
          {fields.map((field) => renderField(field, formikProps))}

          <div className="flex justify-between items-center pt-4">
            <button
              type="submit"
              disabled={formikProps.isSubmitting}
              className="w-full bg-gradient-to-r from-blue-600 to-indigo-600 text-white py-3 rounded-lg font-medium 
                hover:from-blue-700 hover:to-indigo-700 transition-colors duration-200 
                disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {formikProps.isSubmitting ? (
                <div className="flex items-center justify-center gap-2">
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                  <span>Submitting...</span>
                </div>
              ) : (
                submitButtonText
              )}
            </button>

            {showReset && (
              <button
                type="button"
                onClick={() => {
                  formikProps.resetForm();
                  onReset?.();
                }}
                className="ml-4 text-red-500 hover:text-red-700 font-medium"
              >
                Reset
              </button>
            )}
          </div>
        </Form>
      )}
    </Formik>
  );
};

export default CustomForm;
</file>

<file path="src/components/CustomForm/CustomInput.tsx">
"use client";

import React from 'react';
import { Field as FormField } from './types';

interface CustomInputProps {
  field: FormField;
  value: string;
  onChange: (value: string) => void;
  error?: string;
}

const CustomInput: React.FC<CustomInputProps> = ({
  field,
  value,
  onChange,
  error
}) => {
  return (
    <div>
      <label htmlFor={field.name} className="block text-sm font-medium text-gray-700 mb-1">
        {field.label}
      </label>
      {field.subHeading && (
        <p className="text-sm text-gray-500 mb-2">{field.subHeading}</p>
      )}
      <input
        type={field.type === 'numeric' ? 'number' : field.type}
        id={field.name}
        name={field.name}
        value={value}
        onChange={(e) => onChange(e.target.value)}
        disabled={field.disabled}
        placeholder={field.placeholder || `Enter ${field.label.toLowerCase()}`}
        className="w-full px-4 py-2 border text-black placeholder:text-gray-500 border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 
          disabled:bg-gray-100 disabled:cursor-not-allowed"
      />
      {error && (
        <p className="text-red-500 text-sm mt-1">{error}</p>
      )}
    </div>
  );
};

export default CustomInput;
</file>

<file path="src/components/CustomForm/CustomSelect.tsx">
"use client";

import React, { useState, useRef, useEffect } from 'react';
import { Field as FormField } from './types';
import { isEmpty } from 'lodash';

interface CustomSelectProps {
  field: FormField;
  value: any;
  onChange: (value: any) => void;
  error?: string;
  onDropdownOpen?: (isOpen: boolean) => void;
}

const CustomSelect: React.FC<CustomSelectProps> = ({
  field,
  value,
  onChange,
  error,
  onDropdownOpen
}) => {
  const isMulti = field.type === 'multiselect';
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const handleChange = (optionId: string) => {
    if (isMulti) {
      const currentValue = value || [];
      const optionExists = currentValue.some((item: any) => item.id === optionId);
      
      let newValue;
      if (optionExists) {
        // Remove the option if it's already selected
        newValue = currentValue.filter((item: any) => item.id !== optionId);
      } else {
        // Add the option if it's not selected
        const optionToAdd = field.options?.find(opt => opt.id === optionId);
        if (optionToAdd) {
          newValue = [...currentValue, optionToAdd];
        }
      }
      
      onChange(newValue);
    } else {
      const selectedOption = field.options?.find(opt => opt.id === optionId);
      onChange(selectedOption);
      setIsOpen(false);
    }
  };

  const handleRemoveSelected = (optionId: string) => {
    if (!isMulti) return;
    
    const currentValue = value || [];
    const newValue = currentValue.filter((item: any) => item.id !== optionId);
    onChange(newValue);
  };

  const toggleDropdown = () => {
    if (!field.disabled) {
      setIsOpen(!isOpen);
      onDropdownOpen?.(!isOpen);
    }
  };

  const getDisplayValue = () => {
    if (isMulti) {
      if (!value || value.length === 0) {
        return field.placeholder || `Select ${field.label.toLowerCase()}`;
      }
      return `${value.length} selected`;
    } else {
      return value?.label || field.placeholder || `Select ${field.label.toLowerCase()}`;
    }
  };

  return (
    <div>
      <label htmlFor={field.name} className="block text-sm font-medium text-gray-500 mb-1">
        {field.label}
      </label>
      {field.subHeading && (
        <p className="text-sm text-gray-500 mb-2">{field.subHeading}</p>
      )}
      {isMulti ? (
        <div>
          {/* Selected items summary */}
          {value && value.length > 0 && (
            <div className="mb-2 flex flex-wrap gap-2">
              {value.map((item: any) => (
                <div 
                  key={item.id} 
                  className="bg-blue-100 text-blue-800 px-2 py-1 rounded-md text-sm flex items-center"
                >
                  <span className="text-black">{item.label}</span>
                  <button
                    type="button"
                    onClick={() => handleRemoveSelected(item.id)}
                    className="ml-1 text-blue-600 hover:text-blue-800"
                    aria-label="Remove item"
                  >
                    ×
                  </button>
                </div>
              ))}
            </div>
          )}
          
          {/* Options list */}
          <div 
            className="w-full border border-gray-300 rounded-lg focus-within:ring-2 focus-within:ring-blue-500 focus-within:border-blue-500 
              disabled:bg-gray-100 disabled:cursor-not-allowed overflow-y-auto"
            style={{ minHeight: '120px', maxHeight: '200px' }}
            onFocus={() => onDropdownOpen?.(true)}
            onBlur={() => onDropdownOpen?.(false)}
          >
            {field.options?.map((option) => {
              const isSelected = (value || []).some((item: any) => item.id === option.id);
              return (
                <div 
                  key={option.id}
                  className={`px-4 py-2 cursor-pointer text-black ${isSelected ? 'bg-blue-50 text-blue-700' : 'hover:bg-gray-50'}`}
                  onClick={() => handleChange(option.id)}
                >
                  {option.label}
                </div>
              );
            })}
          </div>
        </div>
      ) : (
        <div ref={dropdownRef} className="relative">
          <button
            type="button"
            id={field.name}
            name={field.name}
            onClick={toggleDropdown}
            disabled={field.disabled}
            className="w-full px-4 py-2 text-left border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 
              disabled:bg-gray-100 disabled:cursor-not-allowed flex justify-between items-center text-gray-500"
            aria-haspopup="listbox"
            aria-expanded={isOpen}
          >
            <span className="truncate">{getDisplayValue()}</span>
            <svg 
              className={`h-5 w-5 text-gray-400 transition-transform ${isOpen ? 'transform rotate-180' : ''}`} 
              xmlns="http://www.w3.org/2000/svg" 
              viewBox="0 0 20 20" 
              fill="currentColor" 
              aria-hidden="true"
            >
              <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
            </svg>
          </button>
          
          {isOpen && (
            <div className="absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base overflow-auto focus:outline-none sm:text-sm">
              <ul className="py-1" role="listbox">
                {field.options?.map((option) => (
                  <li
                    key={option.id}
                    className={`px-4 py-2 cursor-pointer text-black ${value?.id === option.id ? 'bg-blue-50 text-blue-700' : 'hover:bg-gray-50'}`}
                    onClick={() => handleChange(option.id)}
                    role="option"
                    aria-selected={value?.id === option.id}
                  >
                    {option.label}
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      )}
      {isMulti && (
        <p className="text-sm text-gray-500 mt-1">Click to select/deselect items</p>
      )}
      {error && (
        <p className="text-red-500 text-sm mt-1">{error}</p>
      )}
    </div>
  );
};

export default CustomSelect;
</file>

<file path="src/components/BrandCard.tsx">
"use client";

import { useState } from "react";
import Image from "next/image";
import { motion } from "framer-motion";

interface BrandCardProps {
  item: {
    _id: string;
    name: string;
    image?: string;
  };
  index: number;
}

export default function BrandCard({ item, index }: BrandCardProps) {
  const [isHovered, setIsHovered] = useState(false);

  return (
    <motion.div
      className="bg-gray-100 rounded-xl overflow-hidden shadow-md"
      whileHover={{ scale: 0.98 }}
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
    >
      <div className="relative h-40 w-full bg-white">
        <Image
          src={item.image || "/images/placeholder.png"}
          alt={item.name}
          fill
          className="object-contain p-4"
        />
      </div>
      <div className="p-3">
        <h3 className="text-lg font-bold text-black">{item.name}</h3>
      </div>
    </motion.div>
  );
}
</file>

<file path="src/components/Header.tsx">
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import Image from "next/image";
import { FadeInSection } from "@/components/transitions";

const Header = () => {
  const pathname = usePathname();
  const [activeTab, setActiveTab] = useState(pathname);
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  // Handle scroll effect
  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 10);
    };
    
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const tabs = [
    { name: "HOME", path: "/home", icon: "/images/home.svg" },
    { name: "FORMS", path: "/orderForm", icon: "/images/form.svg" },
    { name: "MY DEAL ORDERS", path: "/orders", icon: "/images/order.svg" },
    { name: "REFER", path: "/refer", icon: "/images/refer.svg" },
    { name: "ACCOUNT", path: "/account", icon: "/images/account.svg" },
  ];

  return (
    <header 
      className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${
        isScrolled 
          ? "bg-white/90 backdrop-blur-md shadow-md py-2" 
          : "bg-white py-3"
      }`}
    >
      <div className="max-w-7xl mx-auto px-4">
        <div className="flex justify-between items-center">
          {/* Logo */}
          <FadeInSection delay={0.1}>
            <Link href="/home" className="flex items-center">
              <div className="relative w-20 h-15 mr-2">
                <Image
                  src="/images/logo.png"
                  alt="Logo"
                  fill
                  className="object-contain"
                />
              </div>
            </Link>
          </FadeInSection>

          {/* Desktop Navigation */}
          <FadeInSection delay={0.2}>
            <nav className="hidden md:flex items-center space-x-1">
              {tabs.map((tab) => (
                <Link 
                  key={tab.path} 
                  href={tab.path}
                  className={`flex items-center gap-2 py-2 px-4 rounded-lg transition-all duration-200 ${
                    activeTab === tab.path 
                      ? "text-blue-600 bg-blue-50 font-medium" 
                      : "text-gray-600 hover:text-blue-500 hover:bg-gray-50"
                  }`}
                  onClick={() => setActiveTab(tab.path)}
                >
                  <div className="relative w-5 h-5">
                    <Image
                      src={tab.icon}
                      alt={tab.name}
                      fill
                      className={`object-contain transition-opacity duration-200 ${
                        activeTab === tab.path ? "opacity-100" : "opacity-70"
                      }`}
                    />
                  </div>
                  <span className="text-sm">{tab.name}</span>
                </Link>
              ))}
            </nav>
          </FadeInSection>

          {/* Mobile Menu Button */}
          <FadeInSection delay={0.2}>
            <button 
              className="md:hidden p-2 rounded-lg hover:bg-gray-100 transition-colors"
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              aria-label="Toggle menu"
            >
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                className="h-6 w-6 text-gray-600" 
                fill="none" 
                viewBox="0 0 24 24" 
                stroke="currentColor"
              >
                {isMobileMenuOpen ? (
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                ) : (
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                )}
              </svg>
            </button>
          </FadeInSection>
        </div>

        {/* Mobile Navigation */}
        {isMobileMenuOpen && (
          <FadeInSection delay={0.3}>
            <nav className="md:hidden py-4 space-y-2">
              {tabs.map((tab) => (
                <Link 
                  key={tab.path} 
                  href={tab.path}
                  className={`flex items-center gap-3 py-3 px-4 rounded-lg transition-all duration-200 ${
                    activeTab === tab.path 
                      ? "text-blue-600 bg-blue-50 font-medium" 
                      : "text-gray-600 hover:text-blue-500 hover:bg-gray-50"
                  }`}
                  onClick={() => {
                    setActiveTab(tab.path);
                    setIsMobileMenuOpen(false);
                  }}
                >
                  <div className="relative w-5 h-5">
                    <Image
                      src={tab.icon}
                      alt={tab.name}
                      fill
                      className={`object-contain transition-opacity duration-200 ${
                        activeTab === tab.path ? "opacity-100" : "opacity-70"
                      }`}
                    />
                  </div>
                  <span className="text-sm">{tab.name}</span>
                </Link>
              ))}
            </nav>
          </FadeInSection>
        )}
      </div>
    </header>
  );
};

export default Header;
</file>

<file path="src/components/NoDataFound.tsx">
"use client";

export default function NoDataFound() {
  return (
    <div className="flex flex-col items-center justify-center py-12">
      <div className="relative w-64 h-64 mb-6">
        <svg
          viewBox="0 0 200 200"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          className="w-full h-full"
        >
          {/* Background Circle */}
          <circle cx="100" cy="100" r="90" fill="#F8FAFC" />
          
          {/* Outer Ring */}
          <circle cx="100" cy="100" r="85" stroke="#E2E8F0" strokeWidth="2" />
          
          {/* Magnifying Glass */}
          <circle cx="80" cy="80" r="40" stroke="#94A3B8" strokeWidth="3" fill="none" />
          <path
            d="M120 120L140 140"
            stroke="#94A3B8"
            strokeWidth="3"
            strokeLinecap="round"
          />
          
          {/* X Mark */}
          <path
            d="M60 60L80 80M60 80L80 60"
            stroke="#EF4444"
            strokeWidth="3"
            strokeLinecap="round"
          />
          
          {/* Decorative Elements */}
          <circle cx="100" cy="100" r="60" stroke="#E2E8F0" strokeWidth="1" strokeDasharray="4 4" />
          <circle cx="100" cy="100" r="70" stroke="#E2E8F0" strokeWidth="1" strokeDasharray="4 4" />
        </svg>
      </div>
      <h3 className="text-xl font-semibold text-gray-600 mb-2">No Results Found</h3>
      <p className="text-gray-500 text-center max-w-md">
        We couldn't find any matches for your search. Try different keywords or check back later.
      </p>
    </div>
  );
}
</file>

<file path="src/components/PhoneNumberInput.tsx">
"use client";

import React from 'react';

interface PhoneNumberInputProps {
  value: string;
  placeholder: string;
  onChangeText: (text: string) => void;
  containerStyles?: string;
  maxLength?: number;
  countryCode?: string;
  countryFlag?: string;
  setCountryCode?: (code: string) => void;
  setCountryFlag?: (flag: string) => void;
}

const PhoneNumberInput: React.FC<PhoneNumberInputProps> = ({
  value,
  placeholder,
  onChangeText,
  containerStyles = '',
  maxLength,
  countryCode = '+91',
  countryFlag = '🇮🇳',
  setCountryCode,
  setCountryFlag,
}) => {
  return (
    <div className={`relative ${containerStyles}`}>
      <div className="flex">
        <div className="flex items-center rounded-l-md border border-r-0 border-gray-300 bg-white px-3 py-2 text-gray-500">
          <span className="mr-1">{countryFlag} {countryCode}</span>
        </div>
        <input
          type="text"
          value={value}
          onChange={(e) => onChangeText(e.target.value)}
          placeholder={placeholder}
          maxLength={maxLength}
          className="flex-1 rounded-r-md border border-gray-300 py-2 px-4 focus:border-indigo-500 focus:outline-none focus:ring-1 focus:ring-indigo-500 text-black placeholder:text-gray-500"
        />
      </div>
    </div>
  );
};

export default PhoneNumberInput;
</file>

<file path="src/app/(main)/deals/[type]/[id]/page.tsx">
'use client';

import { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { FadeInSection, AnimatedGrid } from '@/components/transitions';
import usePostData from '@/hooks/usePostData';
import DealCard from '@/components/DealCard';
import { isEmpty } from 'lodash';

// Define interfaces
interface Deal {
  _id: string;
  productName: string;
  actualPrice: number;
  finalCashBackForUser: number;
  imageUrl?: string;
  brand?: {
    _id: string;
    name: string;
    image: string;
  };
  dealCategory?: {
    _id: string;
    name: string;
    image: string;
  };
  platForm?: {
    _id: string;
    name: string;
    image: string;
  };
  parentDealId?: {
    imageUrl?: string;
    brand?: {
      image: string;
    };
    dealCategory?: {
      name: string;
    };
    platForm?: {
      name: string;
    };
    productName?: string;
    actualPrice?: number;
  };
}

interface FilterOption {
  _id: string;
  name: string;
}

interface FilterModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  options: FilterOption[];
  selectedOption: FilterOption | null;
  onSelect: (option: FilterOption | null) => void;
  onApply: () => void;
}

// Filter Modal Component
const FilterModal = ({ isOpen, onClose, title, options, selectedOption, onSelect, onApply }: FilterModalProps) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/75 flex items-center justify-center z-50 p-4 overflow-hidden">
      <div className="bg-white rounded-xl p-4 w-full max-w-md max-h-[80vh] overflow-hidden flex flex-col relative">
        <div className="flex justify-between items-center mb-4 sticky top-0 bg-white z-10">
          <h3 className="text-lg font-semibold text-gray-800">{title}</h3>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <div className="overflow-y-auto flex-grow mb-4">
          {options.map((option) => (
            <div 
              key={option._id}
              onClick={() => onSelect(selectedOption?._id === option._id ? null : option)}
              className={`flex justify-between items-center p-3 mb-2 rounded-lg cursor-pointer border ${
                selectedOption?._id === option._id 
                  ? 'border-purple-600 bg-purple-50' 
                  : 'border-gray-200 hover:border-gray-300'
              }`}
            >
              <span className="text-gray-800">{option.name}</span>
              {selectedOption?._id === option._id ? (
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-purple-600" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
              ) : (
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm0-2a6 6 0 100-12 6 6 0 000 12z" clipRule="evenodd" />
                </svg>
              )}
            </div>
          ))}
        </div>
        
        <div className="sticky bottom-0 bg-white pt-2">
          <button 
            onClick={onApply}
            className="w-full py-3 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-lg font-medium hover:from-purple-700 hover:to-indigo-700 transition-colors"
          >
            Apply Filter
          </button>
        </div>
      </div>
    </div>
  );
};

export default function AllDealsPage() {
  const router = useRouter();
  const params = useParams();
  const type = params.type as string;
  const id = params.id as string;

  // State management
  const [currentPage, setCurrentPage] = useState(0);
  const [allDealsData, setAllDealsData] = useState<Deal[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [loadMore, setLoadMore] = useState(false);
  const [isRefreshing, setIsRefreshing] = useState(false);

  // Filter states
  const [filterModal, setFilterModal] = useState(false);
  const [filterType, setFilterType] = useState<'brand' | 'category' | 'platform'>('brand');
  const [selectedCategoryFilter, setSelectedCategoryFilter] = useState<FilterOption | null>(null);
  const [selectedPlatformFilter, setSelectedPlatformFilter] = useState<FilterOption | null>(null);
  const [selectedBrandFilter, setSelectedBrandFilter] = useState<FilterOption | null>(null);
  const [filteredData, setFilteredData] = useState<Deal[]>([]);

  // Filter options
  const [categoryFilter, setCategoryFilter] = useState<FilterOption[]>([]);
  const [platformFilter, setPlatformFilter] = useState<FilterOption[]>([]);
  const [brandFilter, setBrandFilter] = useState<FilterOption[]>([]);

  // Get page title based on type
  const getPageTitle = () => {
    if (type === 'brand') return 'Brand Deals';
    if (type === 'category') return 'Category Deals';
    if (type === 'platform') return 'Platform Deals';
    return 'All Deals';
  };

  // Fetch deals data
  const { mutate: getAllDeals, isPending } = usePostData('/user/deal/getDealsByIds', {
    onSuccess: async (data: any) => {
      setAllDealsData(
        currentPage === 0 ? data?.data : [...allDealsData, ...data?.data]
      );
      setIsLoading(false);

      // Set filter options
      if (currentPage === 0) {
        setCategoryFilter(data?.relatedData?.categories || []);
        setPlatformFilter(data?.relatedData?.platforms || []);
        setBrandFilter(data?.relatedData?.brands || []);
      }
      setCurrentPage(data?.data?.length > 0 ? currentPage + 1 : 0);
      setLoadMore(data?.data?.length === 10);
      setFilterModal(false);
      setIsRefreshing(false);
    },
    onError: async (error: any) => {
      console.error('Error loading deals:', error);
      setIsLoading(false);
      setIsRefreshing(false);
    },
  });

  // Initial load
  useEffect(() => {
    getAllDeals({
      type,
      id,
      selectedCategoryFilter: selectedCategoryFilter?._id ? [selectedCategoryFilter._id] : null,
      selectedPlatformFilter: selectedPlatformFilter?._id ? [selectedPlatformFilter._id] : null,
      selectedBrandFilter: selectedBrandFilter?._id ? [selectedBrandFilter._id] : null,
      offset: currentPage * 10,
      limit: 10,
    });
  }, []);

  // Handle load more
  const handleLoadMore = () => {
    if (!isPending && loadMore) {
      getAllDeals({
        type,
        id,
        selectedCategoryFilter: selectedCategoryFilter?._id ? [selectedCategoryFilter._id] : null,
        selectedPlatformFilter: selectedPlatformFilter?._id ? [selectedPlatformFilter._id] : null,
        selectedBrandFilter: selectedBrandFilter?._id ? [selectedBrandFilter._id] : null,
        offset: currentPage * 10,
        limit: 10,
      });
    }
  };


  // Handle filter apply
  const handleApplyFilter = () => {
    setCurrentPage(0);
    getAllDeals({
      type,
      id,
      selectedCategoryFilter: selectedCategoryFilter?._id ? [selectedCategoryFilter._id] : null,
      selectedPlatformFilter: selectedPlatformFilter?._id ? [selectedPlatformFilter._id] : null,
      selectedBrandFilter: selectedBrandFilter?._id ? [selectedBrandFilter._id] : null,
      offset: 0,
      limit: 10,
    });
  };


  // Loading state
  if (isLoading && allDealsData.length === 0) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white p-4">
        <div className="animate-pulse space-y-6">
          <div className="h-12 bg-gray-200 rounded-xl w-1/3" />
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {[...Array(8)].map((_, i) => (
              <div key={i} className="h-64 bg-gray-200 rounded-xl" />
            ))}
          </div>
        </div>
      </div>
    );
  }

  // Empty state
  if (allDealsData.length === 0) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white p-4 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-800 mb-2">No Deals Found</h2>
          <p className="text-gray-600 mb-4">There are no deals available for this {type}.</p>
          <button
            onClick={() => router.push("/")}
            className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors"
          >
            Go Back Home
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white">
      <div className="p-4 space-y-8 max-w-7xl mx-auto">
        {/* Header */}
        <FadeInSection delay={0.1}>
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
            <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-indigo-700 bg-clip-text text-transparent">
              {getPageTitle()}
            </h1>
          </div>
        </FadeInSection>

        {/* Filter Section */}
        {!isEmpty(allDealsData) && (
          <FadeInSection delay={0.2}>
            <div className="flex flex-col sm:flex-row gap-4">
              {type === 'dealCategory' ? (
                <button
                  onClick={() => {
                    setFilterType('brand');
                    setFilterModal(true);
                  }}
                  className="flex items-center justify-between px-4 py-2 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow"
                >
                  <span className="text-gray-700">
                    {isEmpty(selectedBrandFilter) ? "Filter By Brand" : selectedBrandFilter.name}
                  </span>
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                  </svg>
                </button>
              ) : (
                <button
                  onClick={() => {
                    setFilterType('category');
                    setFilterModal(true);
                  }}
                  className="flex items-center justify-between px-4 py-2 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow"
                >
                  <span className="text-gray-700">
                    {isEmpty(selectedCategoryFilter) ? "Filter By Category" : selectedCategoryFilter.name}
                  </span>
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                  </svg>
                </button>
              )}

              <button
                onClick={() => {
                  setFilterType('platform');
                  setFilterModal(true);
                }}
                className="flex items-center justify-between px-4 py-2 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow"
              >
                <span className="text-gray-700">
                  {isEmpty(selectedPlatformFilter) ? "Filter By Platform" : selectedPlatformFilter.name}
                </span>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                </svg>
              </button>
            </div>
          </FadeInSection>
        )}

        {/* Deals Grid */}
        <FadeInSection delay={0.3}>
          <AnimatedGrid staggerDelay={0.05}>
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
              {(isEmpty(filteredData) ? allDealsData : filteredData).map((deal: Deal, index: number) => (
                <div
                  key={deal._id}
                >
                  <DealCard item={deal} index={index} />
                </div>
              ))}
            </div>
          </AnimatedGrid>
        </FadeInSection>

        {/* Load More Button */}
        {loadMore && (
          <div className="flex justify-center mt-8">
            <button
              onClick={handleLoadMore}
              disabled={isPending}
              className="bg-purple-600 text-white px-6 py-2 rounded-lg hover:bg-purple-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
            >
              {isPending ? (
                <>
                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Loading...
                </>
              ) : (
                'Load More'
              )}
            </button>
          </div>
        )}
      </div>

      {/* Filter Modal */}
      <FilterModal
        isOpen={filterModal}
        onClose={() => setFilterModal(false)}
        title={filterType === 'category' ? 'Select Category' : filterType === 'platform' ? 'Select Platform' : 'Select Brand'}
        options={filterType === 'category' ? categoryFilter : filterType === 'platform' ? platformFilter : brandFilter}
        selectedOption={
          filterType === 'category'
            ? selectedCategoryFilter
            : filterType === 'platform'
              ? selectedPlatformFilter
              : selectedBrandFilter
        }
        onSelect={(option) => {
          if (filterType === 'category') {
            setSelectedCategoryFilter(option);
          } else if (filterType === 'platform') {
            setSelectedPlatformFilter(option);
          } else {
            setSelectedBrandFilter(option);
          }
        }}
        onApply={handleApplyFilter}
      />
    </div>
  );
}
</file>

<file path="src/app/(main)/orders/[orderId]/page.tsx">
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Image from 'next/image';
import { FadeInSection } from '@/components/transitions';
import GradientButton from '@/components/GradientButton';
import { useGenericQuery } from '@/hooks/useQuery';
import { showError } from '@/utils/helperFunctions';
import dayjs from 'dayjs';
import React from 'react';

interface DealData {
  _id: string;
  productName: string;
  actualPrice: number;
  finalCashBackForUser: number;
  imageUrl?: string;
  brand?: {
    name: string;
    image: string;
  };
  dealCategory?: {
    name: string;
    image: string;
  };
  platForm?: {
    name: string;
    image: string;
  };
  parentDealId?: {
    imageUrl?: string;
    brand?: {
      name: string;
      image: string;
    };
    dealCategory?: {
      name: string;
    };
    platForm?: {
      name: string;
    };
    productName?: string;
    actualPrice?: number;
    lessAmount?: number;
    termsAndCondition?: string;
    postUrl?: string;
    slotAlloted?: number;
    slotCompletedCount?: number;
    exchangeDealProducts?: string[];
  };
  lessAmount?: number;
  adminCommission?: number;
  refundDays?: number;
  createdAt?: string;
  termsAndCondition?: string;
  postUrl?: string;
  slotAlloted?: number;
  slotCompletedCount?: number;
  exchangeDealProducts?: string[];
  paymentStatus?: string;
  orderFormStatus?: string;
  orderIdOfPlatForm?: string;
  orderDate?: string;
  rejectReason?: string;
  orderScreenShot?: string;
  deliveredScreenShot?: string;
  reviewScreenShot?: string;
  sellerFeedback?: string;
  reviewLink?: string;
  reviewerName?: string;
}

interface OrderData {
  _id?:string;
  dealId: DealData;
  orderIdOfPlatForm?: string;
  orderFormStatus: string;
  orderDate?: string;
  paymentStatus?: string;
  refundDays?: number;
  reviewerName?: string;
  rejectReason?: string;
  exchangeDealProducts?: Array<string>;
  orderScreenShot?: string;
  deliveredScreenShot?: string;
  reviewScreenShot?: string;
  sellerFeedback?: string;
  finalCashBackForUser?: string;
  reviewLink?:string
}

interface ApiResponse {
  success: boolean;
  message: string;
  data: OrderData;
}

export default function OrderDetailPage({ params }: any) {
  // Unwrap the params Promise using React.use()
  const unwrappedParams = React.use(params) as { orderId: string };
  const { orderId } = unwrappedParams;

  const router = useRouter();
  const [dealData, setDealData] = useState<DealData | null>(null);
  const [orderData, setOrderData] = useState<OrderData | null>(null);
  const [isImageModalOpen, setIsImageModalOpen] = useState(false);
  const [selectedImage, setSelectedImage] = useState<{ title: string; img: string } | null>(null);
  const [isImageLoading, setIsImageLoading] = useState(false);

  // Fetch deal data using custom useQuery hook
  const { data, isLoading, error, refetch } = useGenericQuery<ApiResponse>(
    ['orderDetail', orderId || ''],
    `/user/order/getOrderById/${orderId || ''}`
  );

  useEffect(() => {
    if (data?.data) {
      setDealData(data?.data?.dealId);
      setOrderData(data?.data);
    } else if (error) {
      showError(error?.message || 'Failed to load deal details');
    }
  }, [data, error]);

  const handleViewImage = (title: string, img: string) => {
    setSelectedImage({ title, img });
    setIsImageModalOpen(true);
  };

  const handleCloseImageModal = () => {
    setIsImageModalOpen(false);
    setSelectedImage(null);
  };

  const handleFillReviewForm = () => {
    router.push(`/refund-form/${data?.data?._id}`);
  };

  const handleUpdateReviewForm = () => {
    router.push(`/refund-form/${data?.data?._id}`);
  };

  const handleUpdateOrderForm = () => {
    router.push(`/orderForm/${data?.data?._id}`);
  };

  const checkIsOrderAccepted = (status?: string) => {
    return status === 'accepted';
  };

  const checkIsReviewFormRejected = (status?: string) => {
    return status === 'reviewFormRejected';
  };

  const checkIsOrderFormRejected = (status?: string) => {
    return status === 'rejected';
  };

  // Function to check order status
  const checkOrderStatus = (status: string) => {
    switch (status) {
      case 'reviewFormSubmitted':
        return 'Review Submitted';
      case 'accepted':
        return 'Order Accepted';
      case 'rejected':
        return 'Order Rejected';
      case 'pending':
        return 'Order Pending';
      case 'reviewFormRejected':
        return 'Review Rejected';
      case 'reviewFormAccepted':
        return 'Review Accepted';
    }
  };

  const checkIsAnyFormRejected = (status?: string) => {
    return status === 'rejected' || status === 'reviewFormRejected';
  };
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-purple-50 to-white flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500"></div>
      </div>
    );
  }

  // Function to check if order is pending
  const checkIsOrderPending = (status: string) => {
    return status === "pending" || status === "reviewFormSubmitted";
  };

  const getStatusColor = (status: string) => {
    if (checkIsAnyFormRejected(status)) {
      return "text-red-600";
    } else if (checkIsOrderPending(status) || status === "reviewFormSubmitted") {
      return "text-yellow-600";
    } else {
      return "text-green-600";
    }
  };
  return (
    <div className="min-h-screen bg-gradient-to-b from-purple-50 to-white">
      <FadeInSection>
        <div className="max-w-4xl mx-auto px-4 py-8">
          {/* Header with Status Badge */}
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center">
              <button
                onClick={() => router.back()}
                className="p-2 rounded-full hover:bg-gray-100 transition-colors"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
              </button>
              <h1 className="text-2xl font-bold text-gray-800 ml-4">My Order Details</h1>
            </div>
            {orderData?.paymentStatus && (
              <div className={`px-4 py-2 rounded-full ${getStatusColor(orderData?.orderFormStatus)}`}>
                <span className="font-medium capitalize">{checkOrderStatus(orderData.orderFormStatus)}</span>
              </div>
            )}
          </div>

          {/* Product Card */}
          <div className="bg-white rounded-xl shadow-md overflow-hidden mb-6">
            <div className="relative h-64 w-full bg-gray-50">
              {(orderData?.dealId?.parentDealId?.imageUrl || orderData?.dealId?.imageUrl) &&<Image
                unoptimized
                src={orderData?.dealId?.parentDealId?.imageUrl || orderData?.dealId?.imageUrl || ''}
                alt={orderData?.dealId?.parentDealId?.productName || orderData?.dealId?.productName || 'Product'}
                fill
                className="object-contain p-4"
              />}
            </div>
            <div className="p-6">
              <h2 className="text-xl font-bold text-gray-800 mb-2">
                {orderData?.dealId?.parentDealId?.productName || orderData?.dealId?.productName}
              </h2>

              <div className="flex flex-wrap gap-2 mb-4">
                {(orderData?.dealId?.parentDealId?.brand?.name || orderData?.dealId?.brand?.name) && (
                  <div className="bg-blue-100 px-3 py-1 rounded-full">
                    <span className="text-sm font-medium text-blue-800">
                      {orderData?.dealId?.parentDealId?.brand?.name || orderData?.dealId?.brand?.name}
                    </span>
                  </div>
                )}
                {(orderData?.dealId?.parentDealId?.dealCategory?.name || orderData?.dealId?.dealCategory?.name) && (
                  <div className="bg-purple-100 px-3 py-1 rounded-full">
                    <span className="text-sm font-medium text-purple-800">
                      {orderData?.dealId?.parentDealId?.dealCategory?.name || orderData?.dealId?.dealCategory?.name}
                    </span>
                  </div>
                )}
                {(orderData?.dealId?.parentDealId?.platForm?.name || orderData?.dealId?.platForm?.name) && (
                  <div className="bg-green-100 px-3 py-1 rounded-full">
                    <span className="text-sm font-medium text-green-800">
                      {orderData?.dealId?.parentDealId?.platForm?.name || orderData?.dealId?.platForm?.name}
                    </span>
                  </div>
                )}
              </div>

              <div className="flex justify-between items-center">
                <div>
                  <p className="text-sm text-gray-500">Return Amount</p>
                  <p className="text-xl font-bold text-green-600">₹{Number(orderData?.dealId?.finalCashBackForUser || 0).toFixed(2)}</p>
                </div>
                <div className="text-right">
                  <p className="text-sm text-gray-500">Order ID</p>
                  <p className="text-sm font-medium text-gray-700">{orderData?.orderIdOfPlatForm || ''}</p>
                </div>
              </div>
            </div>
          </div>

          {/* Order Details Card */}
          <div className="bg-white rounded-xl shadow-md p-6 mb-6">
            <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 text-purple-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
              </svg>
              Order Information
            </h3>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* Order Status */}
              {orderData?.orderFormStatus && (
                <div className="bg-gray-50 p-4 rounded-lg">
                  <p className="text-sm text-gray-500 mb-1">Order Status</p>
                  <p className="font-medium capitalize text-blue-500">{checkOrderStatus(orderData.orderFormStatus)}</p>
                </div>
              )}

              {/* Order Date */}
              {orderData?.orderDate && (
                <div className="bg-gray-50 p-4 rounded-lg">
                  <p className="text-sm text-gray-500 mb-1">Order Date</p>
                  <p className="font-medium text-gray-500">{dayjs(orderData.orderDate).format('DD MMMM YYYY')}</p>
                </div>
              )}

              {/* Refund Period or Payment Status */}
              {orderData?.paymentStatus !== 'paid' ? (
                <div className="bg-gray-50 p-4 rounded-lg">
                  <p className="text-sm text-gray-500 mb-1">Refund Period</p>
                  <p className="font-medium text-gray-500">{orderData?.dealId?.refundDays} days</p>
                </div>
              ) : (
                <div className="bg-gray-50 p-4 rounded-lg">
                  <p className="text-sm text-gray-500 mb-1">Payment Status</p>
                  <p className="font-medium capitalize text-gray-500">{orderData?.paymentStatus}</p>
                </div>
              )}

              {/* Profile Name */}
              {orderData?.reviewerName && (
                <div className="bg-gray-50 p-4 rounded-lg">
                  <p className="text-sm text-gray-500 mb-1">Profile Name</p>
                  <p className="font-medium text-gray-500">{orderData.reviewerName}</p>
                </div>
              )}
            </div>

            {/* Order Rejection Reason */}
            {orderData?.rejectReason && checkIsAnyFormRejected(orderData.orderFormStatus) && (
              <div className="mt-4 p-4 bg-red-50 rounded-lg border border-red-100">
                <p className="text-sm font-medium text-red-800 mb-1">Rejection Reason</p>
                <p className="text-red-600">{orderData.rejectReason}</p>
              </div>
            )}
          </div>

          {/* Pricing Details Card */}
          <div className="bg-white rounded-xl shadow-md p-6 mb-6">
            <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 text-purple-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              Pricing Details
            </h3>

            <div className="space-y-3">
              {/* Price */}
              {(orderData?.dealId?.parentDealId?.actualPrice || orderData?.dealId?.actualPrice) && (
                <div className="flex justify-between py-2 border-b border-gray-100">
                  <span className="text-gray-600">Price (MRP of Product)</span>
                  <span className="font-medium text-red-500">₹{Number(orderData?.dealId?.parentDealId?.actualPrice || orderData?.dealId?.actualPrice).toFixed(0)}</span>
                </div>
              )}

              {/* Commission Amount */}
              {(Number(orderData?.dealId?.finalCashBackForUser) > Number(dealData?.parentDealId?.actualPrice || dealData?.actualPrice)) && (
                <div className="flex justify-between py-2 border-b border-gray-100">
                  <span className="text-gray-600">Commission Amount</span>
                  <span className="font-medium text-green-500">₹{Number(Number(orderData?.dealId?.finalCashBackForUser) - Number(dealData?.parentDealId?.actualPrice || dealData?.actualPrice)).toFixed(0)}</span>
                </div>
              )}

              {/* Return Amount */}
              {orderData?.dealId?.finalCashBackForUser && (
                <div className="flex justify-between py-2 border-b border-gray-100">
                  <span className="text-gray-600">Return Amount</span>
                  <span className="font-medium text-green-500">₹{Number(orderData?.dealId?.finalCashBackForUser).toFixed(0)}</span>
                </div>
              )}

              {/* Exchange Product */}
              {orderData?.exchangeDealProducts && orderData?.exchangeDealProducts?.length > 0 && (
                <div className="flex justify-between py-2 border-b border-gray-100">
                  <span className="text-gray-600">Exchange Product</span>
                  <span className="font-medium">{orderData?.exchangeDealProducts?.map((product: string) => product).join(', ')}</span>
                </div>
              )}
            </div>
          </div>

          {/* Review Link */}
          {orderData?.reviewLink && (
            <div className="bg-white rounded-xl shadow-md p-6 mb-6">
              <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 text-purple-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                </svg>
                Review Link
              </h3>
              <a
                href={orderData.reviewLink}
                target="_blank"
                rel="noopener noreferrer"
                className="flex items-center text-blue-500 hover:text-blue-700 transition-colors"
              >
                <span className="truncate">{orderData.reviewLink}</span>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                </svg>
              </a>
            </div>
          )}

          {/* Terms and Condition */}
          {(dealData?.parentDealId?.termsAndCondition || dealData?.termsAndCondition) && (
            <div className="bg-white rounded-xl shadow-md p-6 mb-6">
              <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 text-purple-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                Deal Terms & Condition
              </h3>
              <p className="text-gray-600 text-sm bg-gray-50 p-4 rounded-lg">
                {dealData?.parentDealId?.termsAndCondition || dealData?.termsAndCondition}
              </p>
            </div>
          )}

          {/* Screenshots Section */}
          {(orderData?.orderScreenShot || orderData?.deliveredScreenShot || orderData?.reviewScreenShot || orderData?.sellerFeedback) && (
            <div className="bg-white rounded-xl shadow-md p-6 mb-6">
              <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 text-purple-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                Screenshots
              </h3>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* Order Screenshot */}
                {orderData?.orderScreenShot && (
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="flex justify-between items-center mb-2">
                      <h4 className="font-medium text-gray-800">Order Screenshot</h4>
                      <button
                        onClick={() => handleViewImage('Order Screenshot', orderData.orderScreenShot!)}
                        className="px-3 py-1 bg-purple-100 text-purple-700 rounded-lg hover:bg-purple-200 transition-colors text-sm"
                      >
                        View
                      </button>
                    </div>
                    <div className="relative h-32 w-full bg-white rounded overflow-hidden">
                      <Image
                        src={orderData?.orderScreenShot || ''}
                        alt="Order Screenshot"
                        fill
                        className="object-cover"
                      />
                    </div>
                  </div>
                )}

                {/* Delivered Screenshot */}
                {orderData?.deliveredScreenShot && (
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="flex justify-between items-center mb-2">
                      <h4 className="font-medium text-gray-800">Delivered Screenshot</h4>
                      <button
                        onClick={() => handleViewImage('Delivered Screenshot', orderData.deliveredScreenShot!)}
                        className="px-3 py-1 bg-purple-100 text-purple-700 rounded-lg hover:bg-purple-200 transition-colors text-sm"
                      >
                        View
                      </button>
                    </div>
                    <div className="relative h-32 w-full bg-white rounded overflow-hidden">
                      <Image
                        src={orderData?.deliveredScreenShot || ''}
                        alt="Delivered Screenshot"
                        fill
                        className="object-cover"
                      />
                    </div>
                  </div>
                )}

                {/* Review Screenshot */}
                {orderData?.reviewScreenShot && (
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="flex justify-between items-center mb-2">
                      <h4 className="font-medium text-gray-800">Review Screenshot</h4>
                      <button
                        onClick={() => handleViewImage('Review Screenshot', orderData.reviewScreenShot!)}
                        className="px-3 py-1 bg-purple-100 text-purple-700 rounded-lg hover:bg-purple-200 transition-colors text-sm"
                      >
                        View
                      </button>
                    </div>
                    <div className="relative h-32 w-full bg-white rounded overflow-hidden">
                      <Image
                        src={orderData?.reviewScreenShot || ''}
                        alt="Review Screenshot"
                        fill
                        className="object-cover"
                      />
                    </div>
                  </div>
                )}

                {/* Seller Feedback Screenshot */}
                {orderData?.sellerFeedback && (
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="flex justify-between items-center mb-2">
                      <h4 className="font-medium text-gray-800">Seller Feedback Screenshot</h4>
                      <button
                        onClick={() => handleViewImage('Seller Feedback Screenshot', orderData.sellerFeedback!)}
                        className="px-3 py-1 bg-purple-100 text-purple-700 rounded-lg hover:bg-purple-200 transition-colors text-sm"
                      >
                        View
                      </button>
                    </div>
                    <div className="relative h-32 w-full bg-white rounded overflow-hidden">
                      <Image
                        src={orderData?.sellerFeedback || ''}
                        alt="Seller Feedback Screenshot"
                        fill
                        className="object-cover"
                      />
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Action Buttons */}
          <div className="space-y-4">
            {(checkIsOrderAccepted(orderData?.orderFormStatus) || checkIsReviewFormRejected(orderData?.orderFormStatus)) && (
              <GradientButton
                onClick={checkIsReviewFormRejected(orderData?.orderFormStatus) ? handleUpdateReviewForm : handleFillReviewForm}
                className="w-full"
              >
                {checkIsReviewFormRejected(orderData?.orderFormStatus) ? 'Update Review Form' : 'Fill Review Form'}
              </GradientButton>
            )}

            {checkIsOrderFormRejected(orderData?.orderFormStatus) && (
              <GradientButton
                onClick={handleUpdateOrderForm}
                className="w-full"
              >
                Update Order Form
              </GradientButton>
            )}
          </div>
        </div>
      </FadeInSection>

      {/* Image Modal */}
      {isImageModalOpen && selectedImage && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl p-4 max-w-4xl w-full mx-auto">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-bold text-gray-800">{selectedImage.title}</h3>
              <button
                onClick={handleCloseImageModal}
                className="p-2 rounded-full hover:bg-gray-100 transition-colors"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div className="relative h-96 w-full bg-gray-50 rounded-lg overflow-hidden">
              {isImageLoading && (
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500"></div>
                </div>
              )}
              <Image
                src={selectedImage.img}
                alt={selectedImage.title}
                fill
                className="object-contain"
                onLoadStart={() => setIsImageLoading(true)}
                onLoad={() => setIsImageLoading(false)}
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/app/(main)/refund-form/[orderId]/page.tsx">
"use client";

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import * as Yup from 'yup';
import { useGenericQuery } from '@/hooks/useQuery';
import usePostData from '@/hooks/usePostData';
import { showError, showSuccess } from '@/utils/helperFunctions';
import { FadeInSection } from '@/components/transitions';
import { CustomForm } from '@/components/CustomForm';
import type { Field } from '@/components/CustomForm/types';

// API endpoints
const SUBMIT_REVIEW_FORM = '/user/order/reviewFormSubmit';
const UPDATE_REVIEW_FORM = '/user/order/reviewFormSubmit';

interface RefundFormData {
  profileName: string;
  orderId: string;
  deliveredScreenshot: string;
  reviewScreenshot: string;
  sellerFeedback: string;
  reviewLink: string;
  paymentId: string;
}

interface OrderData {
  _id: string;
  reviewerName?: string;
  orderIdOfPlatForm?: string;
  deliveredScreenShot?: string;
  reviewScreenShot?: string;
  sellerFeedback?: string;
  reviewLink?: string;
  paymentId?: string;
  orderFormStatus?: string;
  dealId?: {
    _id?: string;
  };
}

interface ApiResponse {
  success: boolean;
  message: string;
  data: OrderData;
}

export default function RefundFormPage({ params }: any) {
  const router = useRouter();
  const [resetKey, setResetKey] = useState(0);
  const [isLoading, setIsLoading] = useState(false);

  const unwrappedParams = React.use(params) as { orderId: string };
  const { orderId } = unwrappedParams;

  // Fetch order data
  const { data: orderData, isLoading: isOrderLoading } = useGenericQuery<ApiResponse>(
    ['orderDetail', orderId],
    `/user/order/getOrderById/${orderId}`
  );

  // Check if review form is rejected
  const isReviewFormRejected = (status?: string) => {
    return status === 'reviewFormRejected';
  };

  // Submit review form mutation
  const { mutate: submitReviewForm } = usePostData<ApiResponse, Error, any>(
    isReviewFormRejected(orderData?.data?.orderFormStatus) 
      ? UPDATE_REVIEW_FORM
      : SUBMIT_REVIEW_FORM,
    {
      onSuccess: (data) => {
        setIsLoading(false);
        showSuccess(data?.message || 'Form submitted successfully');
        router.push('/orders');
      },
      onError: (error) => {
        setIsLoading(false);
        showError(error?.message || 'Failed to submit form');
      },
    }
  );

  // Form validation schema
  const validationSchema = Yup.object().shape({
    profileName: Yup.string().required('Name is required'),
    orderId: Yup.string().required('Order ID is required'),
    deliveredScreenshot: Yup.string().required('Delivered Screenshot is required'),
    reviewScreenshot: Yup.string().required('Review/Rating Screenshot is required'),
    reviewLink: Yup.string().required('Review/Rating Link is required'),
    paymentId: Yup.string().required('Paytm/ Gpay/ upi Id is required'),
  });

  // Form fields
  const fields: Field[] = [
    {
      name: 'profileName',
      label: 'Profile name/ Reviewer name',
      type: 'text',
      initialValue: orderData?.data?.reviewerName || '',
      isEditable: true,
    },
    {
      name: 'orderId',
      label: 'Order Id',
      type: 'text',
      initialValue: orderData?.data?.orderIdOfPlatForm || '',
      isEditable: true,
    },
    {
      name: 'deliveredScreenshot',
      label: 'Delivered Screenshot',
      type: 'image',
      initialValue: orderData?.data?.deliveredScreenShot || '',
      subHeading: 'Image must be below 4 mb and in jpg/png format',
    },
    {
      name: 'reviewScreenshot',
      label: 'Review/Rating Screenshot',
      type: 'image',
      initialValue: orderData?.data?.reviewScreenShot || '',
      subHeading: 'Image must be below 4 mb and in jpg/png format',
    },
    {
      name: 'sellerFeedback',
      label: 'Seller Feedback Screenshot',
      type: 'image',
      initialValue: orderData?.data?.sellerFeedback || '',
      subHeading: 'Image must be below 4 mb and in jpg/png format',
    },
    {
      name: 'reviewLink',
      label: 'Review/Rating Link',
      type: 'text',
      initialValue: orderData?.data?.reviewLink || '',
      isEditable: true,
    },
    {
      name: 'paymentId',
      label: 'Paytm/ Gpay/ upi Id',
      type: 'text',
      initialValue: orderData?.data?.paymentId || '',
      isEditable: true,
    },
  ];

  // Handle form submission
  const handleSubmit = (values: { [key: string]: any }) => {
    setIsLoading(true);
    // Prepare the data to be sent to the API
    const formData = {
      orderId: orderId, // Include the orderId in the request body
      reviewLink: values.reviewLink,
      deliveredScreenShot: values.deliveredScreenshot,
      reviewScreenShot: values.reviewScreenshot,
      sellerFeedback: values.sellerFeedback,
      paymentId: values.paymentId,
      reviewerName: values.profileName,
      orderIdOfPlatForm: values.orderId,
    };

    // Submit the form data
    submitReviewForm(formData);
  };

  // Handle form reset
  const handleReset = () => {
    setResetKey(prevKey => prevKey + 1);
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-purple-50 to-white">
      <FadeInSection>
        <div className="max-w-4xl mx-auto px-4 py-8">
          {/* Header */}
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center">
              <button
                onClick={() => router.back()}
                className="p-2 rounded-full hover:bg-gray-100 transition-colors"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
              </button>
              <h1 className="text-2xl font-bold text-gray-800 ml-4">Refund Form</h1>
            </div>
          </div>

          {isOrderLoading ? (
            <div className="flex justify-center items-center h-64">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600"></div>
            </div>
          ) : (
            <div className="bg-white rounded-xl shadow-md p-6 mb-6">
              <CustomForm
                key={resetKey}
                fields={fields}
                validationSchema={validationSchema}
                onSubmit={handleSubmit}
                onReset={handleReset}
              />
            </div>
          )}
        </div>
      </FadeInSection>
    </div>
  );
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import Header from "@/components/Header";
import { Providers } from "./providers";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Buyr Web",
  description: "Your one-stop shop for deals and cashback",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <Providers>
      <html lang="en">
        <body className={inter.className}>
          <main>
            {children}
          </main>
        </body>
      </html>
    </Providers>
  );
}
</file>

<file path="src/components/auth/Signup.tsx">
"use client";

import usePostData from '@/hooks/usePostData';
import { showError, showSuccess } from '@/utils/helperFunctions';
import Image from 'next/image';
import { useRouter } from 'next/navigation';
import { useState } from 'react';
import GradientButton from '../GradientButton';
import PhoneNumberInput from '../PhoneNumberInput';
import TextContainer from '../TextContainer';
import { styles } from './styles';
import { useAuth } from '@/hooks/useAuth';

const Signup = () => {
  const router = useRouter();
  const { login } = useAuth();
  const [activeTab, setActiveTab] = useState('phone');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [countryCode, setCountryCode] = useState('US');
  const [countryFlag, setCountryFlag] = useState('🇺🇸');
  const [referenceId, setReferenceId] = useState('');
  const [errors, setErrors] = useState({
    phoneNumber: '',
    email: '',
    password: '',
    confirmPassword: '',
    referenceId: ''
  });

  const { mutate: signup, isLoading } = usePostData<{ user: any; token: string }>('/auth/signUp', {
    onSuccess: (data) => {
      login({...data.user, token: data.token});
      showSuccess('Signup successful');
      router.push('/');
    },
    onError: (error:any) => {
      showError(error?.response?.data?.message || error.message || 'Signup failed');
    },
  });

  const validateForm = () => {
    const newErrors = {
      phoneNumber: '',
      email: '',
      password: '',
      confirmPassword: '',
      referenceId: ''
    };
    let isValid = true;
    if (activeTab === 'phone') {
      if (!phoneNumber) {
        newErrors.phoneNumber = 'Phone number is required';
        isValid = false;
      } else if (phoneNumber.length < 10) {
        newErrors.phoneNumber = 'Phone number must be at least 10 digits';
        isValid = false;
      }
    } else {
      if (!email) {
        newErrors.email = 'Email is required';
        isValid = false;
      } else if (!/\S+@\S+\.\S+/.test(email)) {
        newErrors.email = 'Please enter a valid email address';
        isValid = false;
      }
    }
    if (!password) {
      newErrors.password = 'Password is required';
      isValid = false;
    } else if (password.length < 6) {
      newErrors.password = 'Password must be at least 6 characters';
      isValid = false;
    }
    if (!confirmPassword) {
      newErrors.confirmPassword = 'Please confirm your password';
      isValid = false;
    } else if (password !== confirmPassword) {
      newErrors.confirmPassword = 'Passwords do not match';
      isValid = false;
    }
    if (!referenceId) {
      newErrors.referenceId = 'Reference ID is required';
      isValid = false;
    }
    setErrors(newErrors);
    return isValid;
  };

  const handleSignup = () => {
    if (!validateForm()) {
      return;
    }
    signup({
      ...(activeTab === 'phone' ? { phoneNumber } : { email }),
      password,
      currentAdminReference: referenceId,
    });
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-orange-50 to-white py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8 bg-white/90 p-8 rounded-2xl shadow-2xl border border-orange-100">
        <div className="flex flex-col items-center mb-4">
          <Image src="/images/logo.png" alt="BuyR Logo" width={90} height={90} className="mb-2 rounded-lg" priority />
          <TextContainer text="Create Account" style={styles.logintxt} />
          <TextContainer text="Sign up to get started" style={styles.welcomeBack} />
        </div>

        <div className="flex justify-center gap-2 mb-6">
          <button
            className={`px-4 py-2 rounded-full font-semibold transition-colors duration-200 ${activeTab === 'phone' ? 'bg-orange-500 text-white shadow' : 'bg-gray-100 text-gray-700'}`}
            onClick={() => setActiveTab('phone')}
          >
            Phone
          </button>
          <button
            className={`px-4 py-2 rounded-full font-semibold transition-colors duration-200 ${activeTab === 'email' ? 'bg-orange-500 text-white shadow' : 'bg-gray-100 text-gray-700'}`}
            onClick={() => setActiveTab('email')}
          >
            Email
          </button>
        </div>

        <div className="space-y-4">
          {activeTab === 'phone' ? (
            <div>
              <PhoneNumberInput
                value={phoneNumber}
                onChangeText={setPhoneNumber}
                maxLength={10}
                placeholder="Enter phone number"
              />
              {errors.phoneNumber && (
                <p className="mt-1 text-sm text-red-600">{errors.phoneNumber}</p>
              )}
            </div>
          ) : (
            <div>
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Email"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-400 text-black placeholder:text-gray-500"
              />
              {errors.email && (
                <p className="mt-1 text-sm text-red-600">{errors.email}</p>
              )}
            </div>
          )}

          <div className="relative">
            <input
              type={showPassword ? 'text' : 'password'}
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Password"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-400 text-black placeholder:text-gray-500"
            />
            <button
              type="button"
              onClick={() => setShowPassword(!showPassword)}
              className="absolute right-3 top-2 text-gray-500"
            >
              {showPassword ? 'Hide' : 'Show'}
            </button>
            {errors.password && (
              <p className="mt-1 text-sm text-red-600">{errors.password}</p>
            )}
          </div>

          <div className="relative">
            <input
              type={showConfirmPassword ? 'text' : 'password'}
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              placeholder="Confirm Password"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-400 text-black placeholder:text-gray-500"
            />
            <button
              type="button"
              onClick={() => setShowConfirmPassword(!showConfirmPassword)}
              className="absolute right-3 top-2 text-gray-500"
            >
              {showConfirmPassword ? 'Hide' : 'Show'}
            </button>
            {errors.confirmPassword && (
              <p className="mt-1 text-sm text-red-600">{errors.confirmPassword}</p>
            )}
          </div>

          <div>
            <input
              type="text"
              value={referenceId}
              onChange={(e) => setReferenceId(e.target.value)}
              placeholder="Reference ID *"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-400 text-black placeholder:text-gray-500"
            />
            {errors.referenceId && (
              <p className="mt-1 text-sm text-red-600">{errors.referenceId}</p>
            )}
          </div>
        </div>

        <GradientButton
          onPress={handleSignup}
          btnText="Sign Up"
          indicator={isLoading}
        />

        <div className="flex items-center my-6">
          <div className="flex-grow h-px bg-gray-200" />
          <span className="mx-4 text-gray-400">OR</span>
          <div className="flex-grow h-px bg-gray-200" />
        </div>

        <div className="text-center">
          <span className="text-gray-600">Already have an account? </span>
          <button
            onClick={() => router.push('/auth/login')}
            className="text-orange-600 font-semibold hover:underline"
          >
            Sign In
          </button>
        </div>
      </div>
    </div>
  );
};

export default Signup;
</file>

<file path="src/components/CustomScrollBanner.tsx">
"use client";

import { useState, useEffect, useRef } from "react";
import Image from "next/image";
import { motion, AnimatePresence } from "framer-motion";
import { ChevronLeft, ChevronRight } from "lucide-react";

interface BannerProps {
  data: Array<{
    _id: string;
    image: string;
    posterType: string;
    redirectUrl: string;
    brand?: {
      _id: string;
      name: string;
    };
    deal?: {
      _id: string;
      name: string;
    };
    dealCategory?: {
      _id: string;
      name: string;
    };
  }>;
  autoScrollInterval?: number;
}

export default function CustomScrollBanner({ data, autoScrollInterval = 5000 }: BannerProps) {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isPaused, setIsPaused] = useState(false);
  const [isDragging, setIsDragging] = useState(false);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);
  const containerRef = useRef<HTMLDivElement>(null);

  const handleNext = () => {
    setCurrentIndex((prev) => (prev + 1) % data.length);
  };

  const handlePrev = () => {
    setCurrentIndex((prev) => (prev - 1 + data.length) % data.length);
  };

  useEffect(() => {
    if (data.length <= 1) return;

    const startAutoScroll = () => {
      if (intervalRef.current) clearInterval(intervalRef.current);
      
      intervalRef.current = setInterval(() => {
        if (!isPaused && !isDragging) {
          handleNext();
        }
      }, autoScrollInterval);
    };

    startAutoScroll();

    return () => {
      if (intervalRef.current) clearInterval(intervalRef.current);
    };
  }, [data.length, autoScrollInterval, isPaused, isDragging]);

  const handleMouseEnter = () => setIsPaused(true);
  const handleMouseLeave = () => setIsPaused(false);

  const handleDragEnd = (event: any, info: any) => {
    setIsDragging(false);
    const threshold = 50;
    
    if (Math.abs(info.offset.x) > threshold) {
      if (info.offset.x > 0) {
        handlePrev();
      } else {
        handleNext();
      }
    }
  };

  if (!data.length) return null;

  return (
    <div 
      ref={containerRef}
      className="relative w-full aspect-[2/1] md:aspect-[3/1] rounded-xl overflow-hidden group"
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
      role="region"
      aria-label="Image carousel"
    >
      <motion.div
        className="flex w-full h-full"
        animate={{
          x: `-${currentIndex * 100}%`,
        }}
        transition={{
          type: "spring",
          stiffness: 300,
          damping: 30,
        }}
        drag="x"
        dragConstraints={{ left: 0, right: 0 }}
        dragElastic={0.1}
        onDragStart={() => setIsDragging(true)}
        onDragEnd={handleDragEnd}
        whileTap={{ cursor: "grabbing" }}
      >
        {data.map((item, index) => (
          <motion.div
            key={item._id}
            className="relative flex-shrink-0 w-full h-full"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.3 }}
          >
            <Image
              src={item.image}
              alt={`Banner ${index + 1}`}
              fill
              className="object-stretch select-none"
              priority={index === 0}
              draggable={false}
            />
          </motion.div>
        ))}
      </motion.div>

      {/* Navigation Buttons */}
      <button
        onClick={handlePrev}
        className="absolute left-4 top-1/2 -translate-y-1/2 bg-black/50 text-white p-3 rounded-full 
                 hover:bg-black/70 transition-all duration-200 opacity-0 group-hover:opacity-100
                 focus:outline-none focus:ring-2 focus:ring-white/50"
        aria-label="Previous slide"
      >
        <ChevronLeft className="w-6 h-6" />
      </button>
      <button
        onClick={handleNext}
        className="absolute right-4 top-1/2 -translate-y-1/2 bg-black/50 text-white p-3 rounded-full 
                 hover:bg-black/70 transition-all duration-200 opacity-0 group-hover:opacity-100
                 focus:outline-none focus:ring-2 focus:ring-white/50"
        aria-label="Next slide"
      >
        <ChevronRight className="w-6 h-6" />
      </button>

      {/* Dots Indicator */}
      <div className="absolute bottom-6 left-1/2 -translate-x-1/2 flex space-x-2">
        {data.map((_, index) => (
          <button
            key={index}
            onClick={() => setCurrentIndex(index)}
            className={`w-2.5 h-2.5 rounded-full transition-all duration-200
                      ${index === currentIndex ? "bg-white scale-125" : "bg-white/50 hover:bg-white/75"}`}
            aria-label={`Go to slide ${index + 1}`}
            aria-current={index === currentIndex}
          />
        ))}
      </div>
    </div>
  );
}
</file>

<file path="src/components/DealCard.tsx">
"use client";

import { useState } from "react";
import Image from "next/image";
import { motion } from "framer-motion";
import { useRouter } from "next/navigation";

interface DealCardProps {
  item: {
    _id: string;
    productName: string;
    actualPrice: number;
    finalCashBackForUser: number;
    imageUrl?: string;
    brand?: {
      name: string;
      image: string;
    };
    dealCategory?: {
      name: string;
      image: string;
    };
    platForm?: {
      name: string;
      image: string;
    };
    parentDealId?: {
      imageUrl?: string;
      brand?: {
        image: string;
      };
      dealCategory?: {
        name: string;
      };
      platForm?: {
        name: string;
      };
      productName?: string;
      actualPrice?: number;
    };
  };
  index: number;
}

export default function DealCard({ item, index }: DealCardProps) {
  const [isHovered, setIsHovered] = useState(false);
  const router = useRouter();

  const imageUrl = item?.parentDealId?.imageUrl ||
    item?.parentDealId?.brand?.image ||
    item?.imageUrl ||
    item?.brand?.image;

  const categoryName = item?.parentDealId?.dealCategory?.name ||
    item?.dealCategory?.name;

  const platformName = item?.parentDealId?.platForm?.name ||
    item?.platForm?.name;

  const productName = item?.parentDealId?.productName ||
    item?.productName;

  const actualPrice = item?.parentDealId?.actualPrice ||
    item?.actualPrice;

  const handleViewDeal = () => {
    router.push(`/deal/${item._id}`);
  };

  return (
    <motion.div
      className="w-full sm:w-64 rounded-xl overflow-hidden bg-white shadow-md hover:shadow-xl transition-all duration-300 border border-gray-100"
      whileHover={{ y: -5 }}
    >
      {/* Card Header with Image */}
      <div className="relative">
        <div className="relative h-40 w-full bg-gradient-to-br bg-white-50 bg-white-100">
          {!!imageUrl ? <Image
            unoptimized
            src={imageUrl}
            alt={productName || "Product"}
            fill
            className="object-contain p-3"
          /> :
            <div className="absolute inset-0 flex items-center justify-center">
              <div className="w-16 h-16 rounded-full bg-gray-200 flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              </div>
            </div>
          }
        </div>
        {/* Category Badge */}
        <div className="absolute top-3 left-3 bg-indigo-100 text-indigo-700 px-3 py-1 rounded-full text-xs font-medium shadow-sm">
          {categoryName}
        </div>

        {/* Platform Badge */}
        <div className="absolute top-3 right-3 bg-emerald-100 text-emerald-700 px-3 py-1 rounded-full text-xs font-medium shadow-sm">
          {platformName}
        </div>
      </div>

      {/* Card Content */}
      <div className="p-4">
        <h3 className="font-semibold text-sm capitalize mb-2 line-clamp-2 min-h-[2.5rem] text-black">
          {productName}
        </h3>

        <div className="flex items-center justify-between mb-3">
          <div className="flex flex-col">
            <span className="text-xs text-gray-500">Price</span>
            <span className="text-red-500 font-bold">
              ₹{Number(actualPrice).toFixed(0)}
            </span>
          </div>

          <div className="flex flex-col items-end">
            <span className="text-xs text-gray-500">Refund</span>
            <span className="text-green-500 font-bold">
              ₹{Number(item.finalCashBackForUser).toFixed(0)}
            </span>
          </div>
        </div>
        <button 
          onClick={handleViewDeal}
          className="w-full bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white py-2 rounded-lg text-sm font-medium transition-all duration-300 shadow-sm hover:shadow-md"
        >
          View Deal
        </button>
      </div>
    </motion.div>
  );
}
</file>

<file path="package.json">
{
  "name": "buyr-web",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^5.0.1",
    "@reduxjs/toolkit": "^2.7.0",
    "@tanstack/react-query": "^5.74.4",
    "axios": "^1.9.0",
    "cookies-next": "^5.1.0",
    "dayjs": "^1.11.13",
    "firebase": "^11.6.1",
    "framer-motion": "^12.9.2",
    "lucide-react": "^0.503.0",
    "next": "15.3.1",
    "nextjs-toploader": "^3.8.16",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.56.1",
    "react-redux": "^9.2.0"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4",
    "@types/lodash": "^4.17.16",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "formik": "^2.4.6",
    "tailwindcss": "^4",
    "typescript": "^5",
    "yup": "^1.6.1"
  }
}
</file>

<file path="src/app/(main)/home/page.tsx">
"use client";

import BrandCard from "@/components/BrandCard";
import CustomScrollBanner from "@/components/CustomScrollBanner";
import DealCard from "@/components/DealCard";
import NoDataFound from "@/components/NoDataFound";
import { FadeInSection } from "@/components/transitions";
import { getHomeData } from "@/services/api";
import { useQuery } from "@tanstack/react-query";
import { Search } from "lucide-react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { useState } from "react";

export default function HomePage() {
  const router = useRouter();
  const [searchQuery, setSearchQuery] = useState("");
  const { data: homeData, isLoading, error, refetch } = useQuery({
    queryKey: ["homeData"],
    queryFn: getHomeData,
    retry: 1,
  });

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      router.push(`/search?q=${encodeURIComponent(searchQuery.trim())}`);
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white p-4 md:p-6">
        <div className="animate-pulse space-y-8">
          <div className="h-[400px] bg-gray-200 rounded-2xl" />
          <div className="h-48 bg-gray-200 rounded-2xl" />
          <div className="h-64 bg-gray-200 rounded-2xl" />
          <div className="h-64 bg-gray-200 rounded-2xl" />
        </div>
      </div>
    );
  }

  if (error) {
    console.error("Error loading home data:", error);
    return <NoDataFound />;
  }

  if (!homeData) {
    return <NoDataFound />;
  }

  const { Poster, dealCategoryData, activelyDeals, brandData } = homeData;

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white">
      <div className="p-4 md:p-6 space-y-12 max-w-7xl mx-auto">
        {/* Search Bar */}
        <FadeInSection delay={0.05}>
          <Link href="/search" className="relative">
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="Search deals and brands..."
              className="w-full h-14 pl-12 pr-4 rounded-2xl border border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-300 bg-white shadow-sm text-gray-400"
            />
            <Search className="absolute left-4 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
          </Link>
        </FadeInSection>

        {/* Hero Banner Section */}
        {Poster && Poster.length > 0 && (
          <FadeInSection delay={0.1}>
            <div className="rounded-2xl overflow-hidden shadow-xl">
              <CustomScrollBanner data={Poster} />
            </div>
          </FadeInSection>
        )}

        {/* Categories Section - Redesigned */}
        {dealCategoryData && dealCategoryData.length > 0 && (
          <FadeInSection delay={0.2}>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-blue-800 bg-clip-text text-transparent">Your Favourite Categories</h2>
                <Link href="/categories" className="text-blue-600 hover:text-blue-800 transition-colors font-medium flex items-center">
                  View All
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </Link>
              </div>

              <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">
                {dealCategoryData.map((category: any) => (
                  <Link
                    href={`/deals/dealCategory/${category._id}`}
                    key={category._id}
                  >
                    <div
                      key={category._id}
                      className="bg-white rounded-xl p-4 shadow-sm hover:shadow-md transition-all duration-300 border border-gray-100 flex flex-col items-center justify-center text-center h-32"
                    >
                      <div className="w-12 h-12 rounded-full bg-blue-100 flex items-center justify-center mb-2">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                        </svg>
                      </div>
                      <span className="text-sm font-medium text-black">{category.name}</span>
                    </div>
                  </Link>
                ))}
              </div>
            </div>
          </FadeInSection>
        )}

        {/* Deals Section - Horizontal Scroll */}
        {activelyDeals && activelyDeals.length > 0 && (
          <FadeInSection delay={0.3}>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold bg-gradient-to-r from-green-600 to-emerald-700 bg-clip-text text-transparent">Deals You May Like</h2>
              </div>

              <div className="relative">
                <div className="flex overflow-x-auto pb-4 space-x-4 scrollbar-hide snap-x snap-mandatory">
                  {activelyDeals.map((deal: any, index: number) => (
                    <div key={deal._id} className="snap-start flex-shrink-0 w-64">
                      <DealCard item={deal} index={index} />
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </FadeInSection>
        )}

        {/* Brands Section - Horizontal Scroll */}
        {brandData && brandData.length > 0 && (
          <FadeInSection delay={0.4}>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold bg-gradient-to-r from-purple-600 to-indigo-700 bg-clip-text text-transparent">Your Favourite Brands</h2>
                <Link href="/brands" className="text-purple-600 hover:text-purple-800 transition-colors font-medium flex items-center">
                  View All
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </Link>
              </div>

              <div className="relative">
                <div className="flex overflow-x-auto pb-4 space-x-4 scrollbar-hide snap-x snap-mandatory">
                  {brandData.map((brand: any, index: number) => (
                    <Link
                      href={`/deals/brand/${brand._id}`}
                      key={brand._id}
                    >
                      <div key={brand._id} className="snap-start flex-shrink-0 w-64">
                        <BrandCard item={brand} index={index} />
                      </div>
                    </Link>
                  ))}
                </div>
              </div>
            </div>
          </FadeInSection>
        )}
      </div>
    </div>
  );
}
</file>

<file path="src/app/(main)/orderForm/page.tsx">
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { FadeInSection } from "@/components/transitions";
import usePostData from "@/hooks/usePostData";
import { useGenericQuery } from "@/hooks/useQuery";
import dayjs from "dayjs";
import timezone from "dayjs/plugin/timezone";
import utc from "dayjs/plugin/utc";
import { isEmpty } from "lodash";
import * as Yup from "yup";
import Image from "next/image";
import CustomForm from "@/components/CustomForm/CustomForm";
import { Field } from "@/components/CustomForm/types";

// Extend dayjs with plugins
dayjs.extend(utc);
dayjs.extend(timezone);

// API endpoints
const ACTIVE_BRANDS = "/user/brand/getActiveBrands";
const GET_DEAL_BY_ID = "/user/deal/getDealsByIds";
const GET_ACTIVE_PLATFORM = "/user/platForm/getAllPlatForms";
const CREATE_ORDER = "/user/order/create";
const FILE_UPLOAD = "/fileUpload";

// Define interfaces
interface Deal {
  _id: string;
  productName?: string;
  actualPrice?: number;
  finalCashBackForUser?: number;
  deliveryFee?: number;
  platForm?: {
    _id: string;
    name: string;
  };
  dealCategory?: {
    _id: string;
    name: string;
  };
  parentDealId?: {
    productName?: string;
    actualPrice?: number;
    finalCashBackForUser?: number;
    platForm?: {
      _id: string;
      name: string;
    };
    dealCategory?: {
      _id: string;
      name: string;
    };
    exchangeDealProducts?: any[];
  };
  exchangeDealProducts?: any[];
}

interface Brand {
  _id: string;
  name: string;
}

interface Platform {
  _id: string;
  name: string;
}

interface Category {
  _id: string;
  name: string;
}

interface FormValues {
  profileName: string;
  orderId: string;
  orderDate: Date;
  orderScreenShot: string;
  orderScreenShotUrl?: string;
  platformOptions: any;
  brandName: any;
  categoryName: any;
  productName: any[];
  deliveryFee: string;
  price: string;
  finalCashBackForUser: string;
}

export default function OrderFormPage() {
  const router = useRouter();
  const [resetKey, setResetKey] = useState(0);
  const [state, setState] = useState({
    brandData: [] as Brand[],
    allBrandDeals: [] as Deal[],
    selectedDeal: [] as Deal[],
    selectedPlatform: {} as any,
    allCategories: [] as Category[],
    newDeals: [] as Deal[],
    selectedDealCategory: {} as any,
    selectedExchange: "",
  });

  const { brandData, allBrandDeals, selectedDeal, selectedPlatform, allCategories, newDeals, selectedDealCategory, selectedExchange } = state;

  const updateState = (data: any) => setState(state => ({ ...state, ...data }));

  // Fetch platforms
  const { data: platformData, isPending: isPlatformLoading } = useGenericQuery<{ data: Platform[] }>(
    ["platforms"],
    GET_ACTIVE_PLATFORM
  );

  // Fetch brands
  const { mutate: getallBrands } = usePostData(ACTIVE_BRANDS, {
    onSuccess: async ({ data }: any) => {
      updateState({
        brandData: data || [],
      });
    },
    onError: async (error: any) => {
      console.error("Error fetching brands:", error);
    },
  });

  // Fetch deals by brand
  const { mutate: getDealsByBrand } = usePostData(GET_DEAL_BY_ID, {
    onSuccess: async ({ data }: any) => {
      const deals = data || [];
      let filteredDeals = deals.filter((item: Deal) => {
        const platformId = item?.parentDealId?.platForm?._id || item?.platForm?._id;
        return platformId === selectedPlatform?.id;
      });

      if (isEmpty(filteredDeals)) {
        updateState({ allBrandDeals: [] });
        console.error("No products available");
        return;
      }

      const allCategories = filteredDeals.map((item: Deal) => {
        return item?.parentDealId?.dealCategory || item?.dealCategory;
      });

      const uniqueCategories = Array.from(
        new Map(allCategories.map((category: any) => [category?._id, category])).values()
      );

      updateState({
        allBrandDeals: filteredDeals,
        allCategories: uniqueCategories,
      });
    },
    onError: async (error: any) => {
      console.error("Error fetching deals:", error);
    },
  });

  // Create order
  const { mutate: createOrder } = usePostData(CREATE_ORDER, {
    onSuccess: async ({ data }: any) => {
      console.log("Order created:", data);
      updateState({
        brandData: [],
        allBrandDeals: [],
        selectedDeal: [],
        selectedPlatform: {},
      });

      // Show success message
      alert(data?.message || "Order created successfully");

      // Redirect to home
      setTimeout(() => {
        router.push("/");
      }, 400);
    },
    onError: async (error: any) => {
      console.error("Error creating order:", error);
      alert(error?.response?.data?.message || "Failed to create order");
    },
  });

  // Platform options
  const platformOptions = platformData?.data?.map((platform: Platform) => ({
    label: platform?.name,
    value: platform?.name,
    id: platform?._id,
  })) || [];

  // Brand options
  const brandOptions = brandData?.map((brand: Brand) => ({
    label: brand?.name,
    value: brand?.name,
    id: brand?._id,
  })) || [];

  // Deal options
  const dealOptions = !isEmpty(newDeals)
    ? newDeals.map((deal: Deal) => {
      const productName = deal?.parentDealId?.productName || deal?.productName || '';
      const actualPrice = deal?.parentDealId?.actualPrice || deal?.actualPrice || 0;
      const platformName = deal?.parentDealId?.platForm?.name || deal?.platForm?.name || '';
      const id = deal?._id || '';
      const finalCashBackForUser = deal?.finalCashBackForUser || 0;
      const exchangeDealProducts = deal?.parentDealId?.exchangeDealProducts || deal?.exchangeDealProducts || [];

      return {
        label: `${productName} (₹${actualPrice}) (${platformName})`,
        value: `${productName} (${platformName})`,
        id,
        price: actualPrice,
        finalCashBackForUser,
        exchangeDealProducts,
      };
    }) || []
    : allBrandDeals.map((deal: Deal) => {
      const productName = deal?.parentDealId?.productName || deal?.productName || '';
      const actualPrice = deal?.parentDealId?.actualPrice || deal?.actualPrice || 0;
      const platformName = deal?.parentDealId?.platForm?.name || deal?.platForm?.name || '';
      const id = deal?._id || '';
      const finalCashBackForUser = deal?.finalCashBackForUser || 0;
      const exchangeDealProducts = deal?.parentDealId?.exchangeDealProducts || deal?.exchangeDealProducts || [];

      return {
        label: `${productName} (₹${actualPrice}) (${platformName})`,
        value: `${productName} (${platformName})`,
        id,
        price: actualPrice,
        finalCashBackForUser,
        exchangeDealProducts,
      };
    }) || [];

  // Category options
  const categoryOptions = allCategories?.map((cat: Category) => ({
    label: cat?.name,
    value: cat?.name,
    id: cat?._id
  })) || [];

  // Validation schema
  const validationSchema = Yup.object().shape({
    profileName: Yup.string().required('Name is required'),
    orderId: Yup.string().required('Order ID is required'),
    orderDate: Yup.date().required('Order Date is required'),
    orderScreenShot: Yup.string().required('Order Screenshot is required'),
    price: Yup.number().required('Price is required'),
    finalCashBackForUser: Yup.number().required('Refund is required'),
    deliveryFee: Yup.number().optional()
  });

  // Initial form values
  const initialValues: FormValues = {
    profileName: "",
    orderId: "",
    orderDate: new Date(),
    orderScreenShot: "",
    platformOptions: "",
    brandName: "",
    categoryName: "",
    productName: [],
    deliveryFee: "",
    price: "",
    finalCashBackForUser: "",
  };

  // Handle form submission
  const handleSubmit = (values: { [key: string]: any }) => {

    createOrder({
      dealIds: values?.productName.map((item: any) => {
        return item?.id;
      }),
      reviewerName: values?.profileName,
      orderIdOfPlatForm: values?.orderId,
      orderScreenShot: values?.orderScreenShot,
      exchangeDealProducts: !!selectedExchange ? [selectedExchange] : [],
      orderDate: dayjs(values?.orderDate).format('YYYY-MM-DD'),
      deliveryFee: values?.deliveryFee.toString()
    });
  };

  // Check if platform is selected
  const checkPlatformSelected = (isopen: boolean, value: string) => {
    if (
      !isopen &&
      (value === 'brandName' || value === 'productName' || value === 'categoryName') &&
      isEmpty(selectedPlatform)
    ) {
      alert('Please select a platform first');
      return false;
    }

    if (!isopen && value === 'productName' && isEmpty(selectedDealCategory)) {
      alert('Please select deal category first');
      return false;
    }

    return true;
  };

  // Handle field changes
  const handleFieldChange = (
    field: string,
    value: any,
    setFieldValue: (field: string, value: any) => void,
    setFieldError: (field: string, error: string) => void
  ) => {
    if (field === 'platformOptions') {
      if (selectedPlatform?.id === value?.id) {
        updateState({ selectedPlatform: {} });
        setFieldValue('platformOptions', '');
        setFieldValue('productName', []);
        setFieldValue('brandName', '');
        setFieldValue('categoryName', '');
        updateState({ newDeals: [], brandOptions: [], allCategories: [], allBrandDeals: [], selectedDealCategory: {} });
        return true;
      } else {
        updateState({ selectedPlatform: value });
        getallBrands({ search: '', offset: 0, limit: 2000 });
        setFieldValue('productName', []);
        setFieldValue('brandName', '');
        setFieldValue('categoryName', '');
        updateState({ newDeals: [], brandOptions: [], allCategories: [], allBrandDeals: [], selectedDealCategory: {} });
      }
    }

    if (field === 'brandName') {
      setFieldValue('productName', []);
      setFieldValue('categoryName', '');
      updateState({ newDeals: [], allCategories: [], selectedDealCategory: {} });
      getDealsByBrand({
        type: 'brand',
        id: value?.id,
        offset: 0,
        limit: 200,
      });
    }

    if (field === 'categoryName') {
      let newDeals = allBrandDeals.filter((item: any) => item?.dealCategory?._id === value?.id);
      setFieldValue('productName', []);
      updateState({ newDeals: newDeals, selectedDeal: [], selectedDealCategory: value });
    }

    if (field === 'productName') {
      if (value.length > 0 && value[value.length - 1]?.exchangeDealProducts?.length > 0 && selectedDeal.length > 0) {
        alert('You cannot select exchange deal with other deals.');
        return true;
      }
      updateState({ selectedDeal: value });
    }
  };

  // Handle image upload
  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>, setFieldValue: (field: string, value: any) => void) => {
    const file = e.target.files?.[0];
    if (!file) {
      alert('Please select an image first');
      return;
    }

    if (file.size > 4 * 1024 * 1024) {
      alert('Image must be below 4MB');
      return;
    }

    if (!file.type.match(/^image\/(jpeg|png)$/)) {
      alert('Image must be in jpg/png format');
      return;
    }

    // Show preview immediately
    const reader = new FileReader();
    reader.onloadend = () => {
      setFieldValue('orderScreenShot', reader.result);
    };
    reader.readAsDataURL(file);

    // Upload the image
    try {
      const formData = new FormData();
      formData.append('file', file);
      
      const response = await fetch(FILE_UPLOAD, {
        method: 'POST',
        body: formData,
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      
      const data = await response.json();
      
      if (response.ok) {
        console.log('Image uploaded successfully:', data);
        // Store the uploaded image URL
        setFieldValue('orderScreenShotUrl', data.url || data.data?.url);
      } else {
        console.error('Upload failed:', data.message);
        alert(data.message || 'Failed to upload image');
      }
    } catch (error: any) {
      console.error('Upload error:', error);
      alert(error?.message || 'An error occurred during upload');
    }
  };

  // Define form fields for CustomForm
  const formFields: Field[] = [
    {
      name: 'profileName',
      label: 'Profile name/ Reviewer name',
      type: 'text',
      placeholder: 'Enter your name',
      disabled: false,
    },
    {
      name: 'orderId',
      label: 'Order ID',
      type: 'text',
      placeholder: 'Enter order ID',
      disabled: false,
    },
    {
      name: 'orderDate',
      label: 'Order Date',
      type: 'date',
      maxDate: new Date(),
      disabled: false,
    },
    {
      name: 'orderScreenShot',
      label: 'Order Screenshot',
      type: 'image',
      subHeading: 'If you are taking more than one deal please make a collage of order screenshot. Image must be below 4 mb and in jpg/png format',
      disabled: false,
    },
    {
      name: 'platformOptions',
      label: 'Platform',
      type: 'select',
      options: platformOptions,
      disabled: isPlatformLoading,
    },
    {
      name: 'brandName',
      label: 'Brand',
      type: 'select',
      options: brandOptions,
      disabled: isEmpty(selectedPlatform),
    },
    {
      name: 'categoryName',
      label: 'Deal Category',
      type: 'select',
      options: categoryOptions,
      disabled: isEmpty(selectedPlatform),
    },
    {
      name: 'productName',
      label: 'Product',
      type: 'multiselect',
      options: dealOptions,
      disabled: isEmpty(selectedDealCategory),
      subHeading: 'Hold Ctrl/Cmd to select multiple products',
    },
    {
      name: 'deliveryFee',
      label: 'Delivery Fee (in ₹)',
      type: 'numeric',
      placeholder: 'Enter delivery fee',
      disabled: false,
    },
    {
      name: 'price',
      label: 'Price (in ₹)',
      type: 'text',
      disabled: true,
      initialValue: '',
    },
    {
      name: 'finalCashBackForUser',
      label: 'Refund Amount (in ₹)',
      type: 'text',
      initialValue:  '',
      disabled: true,
    },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white pt-4 pb-16">
      <div className="max-w-4xl mx-auto px-4">
        <FadeInSection delay={0.1}>
          <div className="bg-white rounded-xl shadow-sm p-6 mb-6">
            <h1 className="text-2xl font-semibold text-gray-800 mb-4">Order Form</h1>
            <p className="text-gray-600 mb-6">
              Fill out the form below to submit your order details.
            </p>

            <CustomForm
              fields={formFields}
              validationSchema={validationSchema}
              onSubmit={handleSubmit}
              resetKey={resetKey}
              onReset={() => {
                updateState({ selectedPlatform: {}, selectedDeal: [] });
                setResetKey(prevKey => prevKey + 1);
              }}
              onInputValueChange={handleFieldChange}
              onDropdownOpen={checkPlatformSelected}
              submitButtonText="Submit Order"
              className="space-y-6"
            />
          </div>
        </FadeInSection>
      </div>
    </div>
  );
}
</file>

<file path="src/app/(main)/orders/page.tsx">
"use client";

import { AnimatedGrid, FadeInSection } from "@/components/transitions";
import usePostData from "@/hooks/usePostData";
import { AppDispatch } from "@/redux/store";
import dayjs from "dayjs";
import timezone from "dayjs/plugin/timezone";
import utc from "dayjs/plugin/utc";
import Image from "next/image";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import { useDispatch } from "react-redux";

// Extend dayjs with plugins
dayjs.extend(utc);
dayjs.extend(timezone);

// Define order interface based on the React Native code
interface Order {
  _id: string;
  orderDate: string;
  orderFormStatus: string;
  paymentStatus: string;
  dealId: {
    _id: string;
    productName: string;
    actualPrice: number;
    imageUrl?: string;
    brand?: {
      image?: string;
    };
    finalCashBackForUser?: number;
    parentDealId?: {
      productName?: string;
      actualPrice?: number;
      imageUrl?: string;
      brand?: {
        image?: string;
      };
    };
  };
  image?: string;
  name?: string;
  productName?: string;
}

// Define filter types
type FilterType = 'brand' | 'category' | 'platform';

export default function OrdersPage() {
  const router = useRouter();
  const dispatch = useDispatch<AppDispatch>();
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [isDateModalOpen, setIsDateModalOpen] = useState(false);
  const [isFilterModalOpen, setIsFilterModalOpen] = useState(false);
  const [activeFilterType, setActiveFilterType] = useState<FilterType>('brand');

  // Filter states
  const [selectedCategoryFilter, setSelectedCategoryFilter] = useState<any>(null);
  const [selectedPlatformFilter, setSelectedPlatformFilter] = useState<any>(null);
  const [selectedBrandFilter, setSelectedBrandFilter] = useState<any>(null);

  // Filter options
  const [categoryFilter, setCategoryFilter] = useState<any[]>([]);
  const [platformFilter, setPlatformFilter] = useState<any[]>([]);
  const [brandFilter, setBrandFilter] = useState<any[]>([]);

  // Use the post data hook for fetching orders
  const {
    mutate: fetchOrders,
    data: orderData,
    isLoading: isOrdersLoading,
    isPending: isFetching
  } = usePostData<any, Error, any>('/user/order/getOrderList', {
    onSuccess: (data) => {
      // Update filter options when data is loaded
      if (data?.relatedData) {
        setCategoryFilter(data?.relatedData?.categories || []);
        setPlatformFilter(data?.relatedData?.platforms || []);
        setBrandFilter(data?.relatedData?.brands || []);
      }
    }
  });
  // State to accumulate orders
  const [accumulatedOrders, setAccumulatedOrders] = useState<Order[]>([]);

  // Fetch orders when component mounts or filters change
  useEffect(() => {
    // Reset accumulated orders when filters change
    if (currentPage === 1) {
      setAccumulatedOrders([]);
    }

    fetchOrders({
      selectedCategoryFilter: selectedCategoryFilter?._id ? [selectedCategoryFilter?._id] : null,
      selectedPlatformFilter: selectedPlatformFilter?._id ? [selectedPlatformFilter?._id] : null,
      selectedBrandFilter: selectedBrandFilter?._id ? [selectedBrandFilter?._id] : null,
      selectedDate: selectedDate ? dayjs(selectedDate).format('YYYY-MM-DD') : null,
      offset: (currentPage - 1) * 10,
      limit: 10,
    });
  }, [currentPage, selectedCategoryFilter, selectedPlatformFilter, selectedBrandFilter, selectedDate]);

  // Update accumulated orders when new data arrives
  useEffect(() => {
    if (orderData?.orders) {
      if (currentPage === 1) {
        setAccumulatedOrders(orderData?.orders);
      } else {
        setAccumulatedOrders(prev => [...prev, ...orderData?.orders]);
      }
    }
  }, [orderData, currentPage]);

  const hasNextPage = orderData?.orders?.length === 10 ? true : false;

  // Handle load more
  const handleLoadMore = () => {
    if (hasNextPage && !isFetching) {
      setCurrentPage(prev => prev + 1);
      // No need to explicitly fetch here as the useEffect will handle it
    }
  };

  // Function to handle date selection
  const handleDateSelect = (date: Date) => {
    setSelectedDate(date);
    setIsDateModalOpen(false);
    setCurrentPage(1); // Reset to first page when filter changes
  };

  // Function to handle filter application
  const applyFilter = () => {
    setIsFilterModalOpen(false);
    setCurrentPage(1); // Reset to first page when filter changes
  };

  // Function to check order status
  const checkOrderStatus = (status: string) => {
    switch (status) {
      case 'reviewFormSubmitted':
        return 'Review Submitted';
      case 'accepted':
        return 'Order Accepted';
      case 'rejected':
        return 'Order Rejected';
      case 'pending':
        return 'Order Pending';
      case 'reviewFormRejected':
        return 'Review Rejected';
      case 'reviewFormAccepted':
        return 'Review Accepted';
    }
  };

  // Function to check if order is pending
  const checkIsOrderPending = (status: string) => {
    return status === "pending" || status === "reviewFormSubmitted";
  };

  // Function to check if any form is rejected
  const checkIsAnyFormRejected = (status: string) => {
    return status === "rejected";
  };

  // Function to get status color
  const getStatusColor = (status: string) => {
    if (checkIsAnyFormRejected(status)) {
      return "text-red-600";
    } else if (checkIsOrderPending(status) || status === "reviewFormSubmitted") {
      return "text-yellow-600";
    } else {
      return "text-green-600";
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 pt-4 pb-16">
      <div className="max-w-4xl mx-auto px-4">
        {/* Header */}
        <FadeInSection delay={0.1}>
          <div className="bg-white rounded-xl shadow-sm p-6 mb-6">
            <h1 className="text-2xl font-semibold text-gray-800">My Deal Orders</h1>
          </div>
        </FadeInSection>

        {/* Filters */}
        <FadeInSection delay={0.2}>
          <div className="bg-white rounded-xl shadow-sm p-4 mb-6">
            <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
              {/* Filter Button */}
              <button
                onClick={() => setIsFilterModalOpen(true)}
                className="flex items-center gap-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors duration-200"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-600" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L12 11.414V15a1 1 0 01-.293.707l-2 2A1 1 0 018 17v-5.586L3.293 6.707A1 1 0 013 6V3z" clipRule="evenodd" />
                </svg>
                <span className="text-gray-700 font-medium">Filter</span>
              </button>

              {/* Date Filter */}
              <div className="flex items-center gap-2">
                <button
                  onClick={() => setIsDateModalOpen(true)}
                  className="flex items-center gap-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors duration-200"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-600" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clipRule="evenodd" />
                  </svg>
                  <span className="text-gray-700 font-medium">
                    {selectedDate ? dayjs(selectedDate).format('DD-MM-YYYY') : 'Select Date'}
                  </span>
                </button>

                {selectedDate && (
                  <button
                    onClick={() => {
                      setSelectedDate(null);
                      setCurrentPage(1); // Reset to first page when filter changes
                    }}
                    className="p-2 text-gray-500 hover:text-gray-700"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                    </svg>
                  </button>
                )}
              </div>
            </div>
          </div>
        </FadeInSection>

        {/* Orders List */}
        <AnimatedGrid className="space-y-4">
          {isOrdersLoading && currentPage === 1 ? (
            <div className="flex justify-center py-10">
              <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500"></div>
            </div>
          ) : accumulatedOrders.length === 0 ? (
            <div className="bg-white rounded-xl shadow-sm p-8 text-center">
              <p className="text-gray-500">No orders found</p>
            </div>
          ) : (
            accumulatedOrders.map((order: Order, index: number) => (
              <FadeInSection key={order._id} delay={0.1 + index * 0.05}>
                <div
                  className="bg-white rounded-xl shadow-sm overflow-hidden hover:shadow-md transition-shadow duration-300"
                  onClick={() => router.push(`/orders/${order._id}?dealId=${order.dealId._id}`)}
                >
                  <div className="flex flex-col md:flex-row">
                    {/* Product Image */}
                    <div className="relative w-full md:w-32 h-32 md:h-auto">
                      <Image
                        src={order.dealId?.parentDealId?.imageUrl || order.dealId?.parentDealId?.brand?.image || order.dealId?.imageUrl || order.dealId?.brand?.image || '/images/placeholder.jpg'}
                        alt={order.dealId?.parentDealId?.productName || order.dealId?.productName || 'Product'}
                        fill
                        className="object-contain"
                      />
                    </div>

                    {/* Order Details */}
                    <div className="flex-1 p-4">
                      <div className="flex flex-col md:flex-row justify-between mb-2">
                        <h3 className="text-lg font-semibold text-gray-800">
                          {order.dealId?.parentDealId?.productName || order.dealId?.productName}
                        </h3>
                        <span className="text-sm text-gray-500">
                          {dayjs(order.orderDate).format('DD MMMM YYYY')}
                        </span>
                      </div>

                      <div className="flex flex-col md:flex-row justify-between mb-2">
                        <div className="text-gray-600">
                          Price: ₹{order.dealId?.parentDealId?.actualPrice || order.dealId?.actualPrice}
                        </div>
                        <div className="text-gray-600">
                          Refund: ₹{order.dealId?.finalCashBackForUser}
                        </div>
                      </div>

                      <div className={`font-medium ${getStatusColor(order.orderFormStatus)}`}>
                        Order Status: {order.paymentStatus === 'paid' ? 'Payment Paid' : checkOrderStatus(order.orderFormStatus)}
                      </div>

                      <div className="mt-3 flex justify-end">
                        <button className="text-blue-600 hover:text-blue-800 text-sm font-medium">
                          View Details
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </FadeInSection>
            ))
          )}
        </AnimatedGrid>

        {/* Load More Button */}
        {hasNextPage && !isOrdersLoading && (
          <div className="flex justify-center my-6">
            <button
              onClick={handleLoadMore}
              disabled={isFetching}
              className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Load More Orders
            </button>
          </div>
        )}

        {/* Date Picker Modal */}
        {isDateModalOpen && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 w-full max-w-md">
              <h3 className="text-lg font-semibold mb-4 text-gray-800">Select Date</h3>
              <input
                type="date"
                className="w-full p-2 border border-gray-300 rounded-lg mb-4 text-gray-800 placeholder:text-gray-400"
                max={dayjs().format('YYYY-MM-DD')}
                onChange={(e) => {
                  if (e.target.value) {
                    handleDateSelect(new Date(e.target.value));
                  }
                }}
              />
              <div className="flex justify-end gap-2">
                <button
                  className="px-4 py-2 bg-gray-200 rounded-lg hover:bg-gray-300 text-gray-800"
                  onClick={() => setIsDateModalOpen(false)}
                >
                  Cancel
                </button>
                <button
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                  onClick={() => {
                    if (selectedDate) {
                      handleDateSelect(selectedDate);
                    }
                  }}
                >
                  Apply
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Filter Modal */}
        {isFilterModalOpen && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 w-full max-w-4xl max-h-[80vh] overflow-hidden flex flex-col">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-gray-800">Select Options</h3>
                <button
                  className="text-gray-500 hover:text-gray-700"
                  onClick={() => setIsFilterModalOpen(false)}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>

              <div className="flex flex-1 overflow-hidden">
                {/* Filter Types */}
                <div className="w-1/3 bg-gray-100 overflow-y-auto">
                  {['brand', 'category', 'platform'].map((type) => (
                    <button
                      key={type}
                      className={`w-full text-left px-4 py-3 border-l-4 ${activeFilterType === type
                          ? 'border-blue-600 bg-white'
                          : 'border-transparent'
                        }`}
                      onClick={() => setActiveFilterType(type as FilterType)}
                    >
                      <span className="font-medium capitalize text-gray-800">
                        {type === 'brand' ? 'Brand' : type === 'category' ? 'Category' : 'Platform'}
                      </span>
                    </button>
                  ))}
                </div>

                {/* Filter Options */}
                <div className="w-2/3 bg-white p-4 overflow-y-auto">
                  <h4 className="font-medium mb-3 capitalize text-gray-800">
                    {activeFilterType === 'brand'
                      ? 'Select the Deal Brand'
                      : activeFilterType === 'category'
                        ? 'Select the Type of Deal'
                        : 'Select the Deal Platform'}
                  </h4>

                  <div className="space-y-2">
                    {activeFilterType === 'brand' && brandFilter.map((item) => (
                      <div
                        key={item._id}
                        className={`flex justify-between items-center p-3 border rounded-lg cursor-pointer ${selectedBrandFilter?._id === item._id
                            ? 'border-blue-600 bg-blue-50'
                            : 'border-gray-200 hover:border-gray-300'
                          }`}
                        onClick={() => setSelectedBrandFilter(
                          selectedBrandFilter?._id === item._id ? null : item
                        )}
                      >
                        <span className="text-gray-800" >{item.name}</span>
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          className={`h-5 w-5 ${selectedBrandFilter?._id === item._id
                              ? 'text-blue-600'
                              : 'text-gray-400'
                            }`}
                          viewBox="0 0 20 20"
                          fill="currentColor"
                        >
                          <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                        </svg>
                      </div>
                    ))}

                    {activeFilterType === 'category' && categoryFilter.map((item) => (
                      <div
                        key={item._id}
                        className={`flex justify-between items-center p-3 border rounded-lg cursor-pointer ${selectedCategoryFilter?._id === item._id
                            ? 'border-blue-600 bg-blue-50'
                            : 'border-gray-200 hover:border-gray-300'
                          }`}
                        onClick={() => setSelectedCategoryFilter(
                          selectedCategoryFilter?._id === item._id ? null : item
                        )}
                      >
                        <span className="text-gray-800">{item.name}</span>
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          className={`h-5 w-5 ${selectedCategoryFilter?._id === item._id
                              ? 'text-blue-600'
                              : 'text-gray-400'
                            }`}
                          viewBox="0 0 20 20"
                          fill="currentColor"
                        >
                          <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                        </svg>
                      </div>
                    ))}

                    {activeFilterType === 'platform' && platformFilter.map((item) => (
                      <div
                        key={item._id}
                        className={`flex justify-between items-center p-3 border rounded-lg cursor-pointer ${selectedPlatformFilter?._id === item._id
                            ? 'border-blue-600 bg-blue-50'
                            : 'border-gray-200 hover:border-gray-300'
                          }`}
                        onClick={() => setSelectedPlatformFilter(
                          selectedPlatformFilter?._id === item._id ? null : item
                        )}
                      >
                        <span className="text-gray-800">{item.name}</span>
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          className={`h-5 w-5 ${selectedPlatformFilter?._id === item._id
                              ? 'text-blue-600'
                              : 'text-gray-400'
                            }`}
                          viewBox="0 0 20 20"
                          fill="currentColor"
                        >
                          <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                        </svg>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              <div className="mt-4 pt-4 border-t border-gray-200">
                <button
                  className="w-full py-3 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg font-medium hover:from-blue-700 hover:to-indigo-700 transition-colors duration-200"
                  onClick={applyFilter}
                >
                  Apply Filter
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
</file>

<file path="src/app/(main)/deal/[id]/page.tsx">
"use client";

import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import Link from 'next/link';
import { isEmpty } from 'lodash';
import { useGenericQuery } from '@/hooks/useQuery';
import { FadeInSection } from '@/components/transitions';
import { showError } from '@/utils/helperFunctions';

interface DealData {
  _id: string;
  productName: string;
  actualPrice: number;
  finalCashBackForUser: number;
  imageUrl?: string;
  brand?: {
    name: string;
    image: string;
  };
  dealCategory?: {
    name: string;
    image: string;
  };
  platForm?: {
    name: string;
    image: string;
  };
  parentDealId?: {
    imageUrl?: string;
    brand?: {
      name: string;
      image: string;
    };
    dealCategory?: {
      name: string;
    };
    platForm?: {
      name: string;
    };
    productName?: string;
    actualPrice?: number;
    lessAmount?: number;
    termsAndCondition?: string;
    postUrl?: string;
    slotAlloted?: number;
    slotCompletedCount?: number;
    exchangeDealProducts?: string[];
  };
  lessAmount?: number;
  adminCommission?: number;
  refundDays?: number;
  createdAt?: string;
  termsAndCondition?: string;
  postUrl?: string;
  slotAlloted?: number;
  slotCompletedCount?: number;
  exchangeDealProducts?: string[];
}

interface ApiResponse {
  success: boolean;
  message: string;
  data: DealData;
}

// For client components in Next.js App Router, we need to use React.use() to unwrap params
export default function DealDetailPage({params}: any) {
  const router = useRouter();
  const [dealData, setDealData] = useState<DealData | null>(null);
  
  // Unwrap the params Promise using React.use()
  const unwrappedParams = React.use(params) as { id: string };
  const { id } = unwrappedParams;
  
  // Fetch deal data using custom useQuery hook
  const { data, isLoading, error, refetch } = useGenericQuery<ApiResponse>(
    ['dealDetail', id],
    `/user/deal/detail/${id}`
  );

  useEffect(() => {
    if (data?.data) {
      setDealData(data.data);
    } else if (error) {
      showError(error?.message || 'Failed to load deal details');
    }
  }, [data, error]);

  // Handle back navigation
  const handleBack = () => {
    router.back();
  };

  // Share product link
  const shareProductLink = (id: string) => {
    if (navigator.share) {
      navigator.share({
        title: 'Check out this deal',
        url: window.location.href,
      });
    } else {
      // Fallback for browsers that don't support Web Share API
      const url = window.location.href;
      navigator.clipboard.writeText(url);
      alert('Link copied to clipboard!');
    }
  };

  // Calculate slots left
  const slotsLeft = dealData?.parentDealId?.slotAlloted
    ? Number(dealData?.parentDealId?.slotAlloted) - Number(dealData?.parentDealId?.slotCompletedCount || 0)
    : dealData?.slotAlloted
      ? Number(dealData?.slotAlloted) - Number(dealData?.slotCompletedCount || 0)
      : 0;

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm">
        <div className="container mx-auto px-4 py-4 flex items-center justify-between">
          <button
            onClick={handleBack}
            className="flex items-center text-gray-700 hover:text-gray-900"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
            </svg>
            Back
          </button>
          <h1 className="text-xl font-bold text-gray-800">Deal Detail</h1>
          <button
            onClick={() => shareProductLink(dealData?._id || '')}
            className="text-gray-700 hover:text-gray-900"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
            </svg>
          </button>
        </div>
      </div>

      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        </div>
      ) : (
        <div className="container mx-auto px-4 py-6">
          <FadeInSection delay={0.1}>
            {/* Product Image */}
            <div className="relative bg-white rounded-lg shadow-md overflow-hidden mb-6">
              <div className="relative h-80 w-full">
                <Image
                  unoptimized
                  src={
                    dealData?.parentDealId?.imageUrl ||
                    dealData?.parentDealId?.brand?.image ||
                    dealData?.imageUrl ||
                    dealData?.brand?.image ||
                    '/images/placeholder.png'
                  }
                  alt={dealData?.parentDealId?.productName || dealData?.productName || 'Product'}
                  fill
                  className="object-contain"
                />
              </div>

              {slotsLeft > 0 && (
                <div className="absolute top-2 right-2 bg-black bg-opacity-70 rounded-lg px-3 py-1">
                  <p className="text-white text-sm font-medium animate-pulse">
                    Hurry! {slotsLeft} slots left
                  </p>
                </div>
              )}
            </div>

            {/* Product Details */}
            <div className="bg-white rounded-lg shadow-md p-6 mb-6">
              <h1 className="text-2xl font-bold text-gray-800 mb-4">
                {dealData?.parentDealId?.productName || dealData?.productName}
              </h1>

              <div className="space-y-3">
                {/* Brand */}
                {(dealData?.parentDealId?.brand?.name || dealData?.brand?.name) && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Brand</span>
                    <span className="text-gray-800 font-medium">
                      {dealData?.parentDealId?.brand?.name || dealData?.brand?.name}
                    </span>
                  </div>
                )}

                {/* Deal Type */}
                {(dealData?.parentDealId?.dealCategory?.name || dealData?.dealCategory?.name) && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Deal Type</span>
                    <span className="text-gray-800 font-medium">
                      {dealData?.parentDealId?.dealCategory?.name || dealData?.dealCategory?.name}
                    </span>
                  </div>
                )}

                {/* Platform */}
                {(dealData?.parentDealId?.platForm?.name || dealData?.platForm?.name) && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Platform</span>
                    <span className="text-gray-800 font-medium">
                      {dealData?.parentDealId?.platForm?.name || dealData?.platForm?.name}
                    </span>
                  </div>
                )}

                {/* Product Price */}
                {(dealData?.parentDealId?.actualPrice || dealData?.actualPrice) && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Product Price</span>
                    <span className="text-red-600 font-medium">
                      ₹{Number(dealData?.parentDealId?.actualPrice || dealData?.actualPrice).toFixed(0)}
                    </span>
                  </div>
                )}

                {/* Less Amount */}
                {(dealData?.parentDealId?.lessAmount || dealData?.lessAmount) && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Less Amount</span>
                    <span className="text-gray-800 font-medium">
                      ₹{Number(Number(dealData?.lessAmount) + Number(dealData?.adminCommission)).toFixed(0)}
                    </span>
                  </div>
                )}

                {/* Commission Amount */}
                {(Number(dealData?.finalCashBackForUser) > Number(dealData?.parentDealId?.actualPrice || dealData?.actualPrice)) && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Commission Amount</span>
                    <span className="text-green-600 font-medium">
                      ₹{Number(Number(dealData?.finalCashBackForUser) - Number(dealData?.parentDealId?.actualPrice || dealData?.actualPrice)).toFixed(0)}
                    </span>
                  </div>
                )}

                {/* Return Amount */}
                {dealData?.finalCashBackForUser && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Return Amount</span>
                    <span className="text-green-600 font-medium">
                      ₹{Number(dealData?.finalCashBackForUser).toFixed(0)}
                    </span>
                  </div>
                )}

                {/* Refund Period */}
                {dealData?.createdAt && dealData?.refundDays && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Refund Period</span>
                    <span className="text-gray-800 font-medium">
                      {dealData?.refundDays} days
                    </span>
                  </div>
                )}

                {/* Exchange Products */}
                {!isEmpty(dealData?.parentDealId?.exchangeDealProducts || dealData?.exchangeDealProducts) && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Exchange Product</span>
                    <span className="text-gray-800 font-medium">
                      {((dealData?.parentDealId?.exchangeDealProducts || dealData?.exchangeDealProducts) || []).map((itm: string) => `${itm}, `)}
                    </span>
                  </div>
                )}
              </div>

              {/* Terms and Conditions */}
              {(dealData?.parentDealId?.termsAndCondition || dealData?.termsAndCondition) && (
                <div className="mt-6">
                  <h2 className="text-lg font-semibold text-gray-800 mb-2">Deal Terms & Conditions</h2>
                  <p className="text-gray-600 text-sm">
                    {dealData?.parentDealId?.termsAndCondition || dealData?.termsAndCondition}
                  </p>
                </div>
              )}
            </div>

            {/* Action Buttons */}
            <div className="space-y-4">
              <button
                onClick={() => window.open(dealData?.parentDealId?.postUrl || dealData?.postUrl, '_blank')}
                className="w-full bg-gradient-to-r from-blue-600 to-indigo-600 text-white py-3 rounded-lg font-medium 
                  hover:from-blue-700 hover:to-indigo-700 transition-colors duration-200"
              >
                Get This Deal
              </button>

              <Link
                href={`/orderForm`}
                className="block w-full bg-gradient-to-r from-green-600 to-teal-600 text-white py-3 rounded-lg font-medium text-center
                  hover:from-green-700 hover:to-teal-700 transition-colors duration-200"
              >
                Fill Order Form
              </Link>
            </div>
          </FadeInSection>
        </div>
      )}
    </div>
  );
}
</file>

</files>
